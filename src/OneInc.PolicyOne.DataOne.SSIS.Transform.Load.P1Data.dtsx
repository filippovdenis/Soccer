<?xml version="1.0" encoding="utf-8"?>
<DTS:Executable DTS:CreationDate="11/21/2017 17:53:11" DTS:CreationName="Microsoft.Package" DTS:CreatorComputerName="NB-NSK-02" DTS:CreatorName="dfilippov" DTS:DTSID="{C9D8300C-AEDE-41F9-B44D-A3FD69DEF996}" DTS:EnableConfig="True" DTS:ExecutableType="Microsoft.Package" DTS:LastModifiedProductVersion="" DTS:LocaleID="1033" DTS:ObjectName="OneInc_PolicyOne_DataOne_SSIS_Transform_Load_P1Data" DTS:ProtectionLevel="0" DTS:refId="Package" DTS:VersionBuild="0" DTS:VersionGUID="{9DFD3543-D503-4ED0-BC58-C73BFFA85E0F}" DTS:VersionMajor="0" xmlns:DTS="www.microsoft.com/SqlServer/Dts">
  <DTS:Configurations>
    <DTS:Configuration DTS:ConfigurationString="d:\Projects\policyone.dataone\OneInc.PolicyOne.DataOne.SSIS\OneInc.PolicyOne.DataOne.SSIS.Transform.Load.P1Data\OneInc.PolicyOne.DataOne.SSIS.Transform.Load.P1Data.Development.dtsConfig" DTS:ConfigurationType="1" DTS:CreationName="" DTS:DTSID="{6C339B8C-4BCE-419C-A266-AC91646C1842}" DTS:ObjectName="OneInc_PolicyOne_DataOne_SSIS_DataMart_PremiumLoss">
    </DTS:Configuration>
  </DTS:Configurations>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager DTS:CreationName="SMTP" DTS:DTSID="{33A9F961-B2EB-4688-A62D-0341E6938A0B}" DTS:ObjectName="SMTCONN_alerts" DTS:refId="Package.ConnectionManagers[SMTCONN_alerts]">
      <DTS:ObjectData>
        <SmtpConnectionManager ConnectionString="SmtpServer=mail.intranet.local;UseWindowsAuthentication=False;EnableSsl=False;">
        </SmtpConnectionManager>
      </DTS:ObjectData>
      <DTS:PropertyExpression DTS:Name="SmtpServer">
				@[User::config_SMTPServer]
			</DTS:PropertyExpression>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager DTS:CreationName="OLEDB" DTS:DelayValidation="True" DTS:DTSID="{B542F959-05CB-4AEA-995D-264CD8ABF6B5}" DTS:ObjectName="OLEDBCONN_DDS_DataOne" DTS:refId="Package.ConnectionManagers[OLEDBCONN_DDS_DataOne]">
      <DTS:ObjectData>
        <DTS:ConnectionManager DTS:ConnectionString="Server=localhost;Initial Catalog=PolicyOneDDS_Mendota_new;Integrated Security=SSPI;Provider=SQLNCLI11">
        </DTS:ConnectionManager>
      </DTS:ObjectData>
      <DTS:PropertyExpression DTS:Name="ConnectionString">@[User::config_DataOne_DDS_DB_ConnectionString]</DTS:PropertyExpression>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:EventHandlers>
    <DTS:EventHandler DTS:CreationName="OnError" DTS:DTSID="{F8FFA02B-5BE0-4389-AE7C-D3E68059AE5A}" DTS:EventID="0" DTS:EventName="OnError" DTS:LocaleID="-1" DTS:refId="Package.EventHandlers[OnError]">
      <DTS:Executables>
        <DTS:Executable DTS:CreationName="Microsoft.ScriptTask" DTS:DTSID="{BAE4D3A4-BF70-4685-BDB5-8A0DF7243E74}" DTS:ExecutableType="Microsoft.ScriptTask" DTS:LocaleID="-1" DTS:ObjectName="SCR Prepare Error Text" DTS:refId="Package.EventHandlers[OnError]\SCR Prepare Error Text">
          <DTS:ObjectData>
            <ScriptProject Language="CSharp" Name="sp_461859b733f24a948c86d2b2b5d50976" VSTAMajorVersion="3" VSTAMinorVersion="0">
              <BinaryItem Name="\bin\release\sp_461859b733f24a948c86d2b2b5d50976.csproj.dll">inaryItem>
              <ProjectItem Encoding="UTF8" Name="AssemblyInfo.cs"><![CDATA[
        using System.Reflection;
        using System.Runtime.CompilerServices;

        [assembly: AssemblyTitle("ST_6a6ea42e945542d393aadee04e2ee889.csproj")]
        [assembly: AssemblyDescription("")]
        [assembly: AssemblyConfiguration("")]
        [assembly: AssemblyCompany("OneInc")]
        [assembly: AssemblyProduct("ST_6a6ea42e945542d393aadee04e2ee889.csproj")]
        [assembly: AssemblyCopyright("Copyright @ OneInc 2012")]
        [assembly: AssemblyTrademark("")]
        [assembly: AssemblyCulture("")]

        [assembly: AssemblyVersion("1.0.*")]
      ]]></ProjectItem>
              <ProjectItem Encoding="UTF8" Name="ScriptMain.cs"><![CDATA[

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Collections;


namespace ST_6a6ea42e945542d393aadee04e2ee889
{
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{

		public void Main()
		{
			        Variables vars = null;
        Dts.VariableDispenser.LockForRead("System::ErrorDescription");
        Dts.VariableDispenser.LockForWrite("User::errorCount");
        Dts.VariableDispenser.LockForWrite("User::errorMessages");
        Dts.VariableDispenser.LockForWrite("User::errorText");
        Dts.VariableDispenser.LockForWrite("User::errorMessagesString");
        Dts.VariableDispenser.GetVariables(ref vars);

        //See if messages array already exists, If not - create one.
        ArrayList messages;

        try
        {
        messages = (ArrayList)vars["errorMessages"].Value;
        }
        catch (Exception ex)
        {
        messages = new ArrayList();
        }

        //Add current error message to array
        messages.Add(vars["ErrorDescription"].Value.ToString());

        //Update error collection
        vars["errorMessages"].Value = messages;

        //Increment Package Error count
        vars["errorCount"].Value = Int32.Parse(vars["errorCount"].Value.ToString()) + 1;

        //Prepare errorMessagesString with first 3000 chars from error description
        string errorMessagesString = string.Empty;
        foreach (string errorMessage in messages)
        {
        errorMessagesString = errorMessagesString + System.Environment.NewLine + errorMessage;
        }
        //Chop first 2997 chars
        if (errorMessagesString.Length > 2997) { errorMessagesString = errorMessagesString.Substring(0, 2997) + "..."; }

        //Set package variable
        vars["errorMessagesString"].Value = errorMessagesString;


        //Unlock Package variables
        vars.Unlock();


			Dts.TaskResult = (int)ScriptResults.Success;
		}

        #region ScriptResults declaration
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}
      ]]></ProjectItem>
              <ProjectItem Encoding="UTF8" Name="Properties\Settings.settings"><![CDATA[<?xml version="1.0" encoding="iso-8859-1"?>
<SettingsFile xmlns="http://schemas.microsoft.com/VisualStudio/2004/01/settings" CurrentProfile="(Default)"  >
    <Profiles>
        <Profile Name="(Default)" />
    </Profiles>
    <Settings /></SettingsFile>
]]></ProjectItem>
              <ProjectItem Encoding="UTF8" Name="Properties\Settings.Designer.cs"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "sp_461859b733f24a948c86d2b2b5d50976.csproj.Properties.Settings.get_Default():sp_461859b733f24a948c86d2b2b5d50976.csproj.Properties.Settings")]

namespace sp_461859b733f24a948c86d2b2b5d50976.csproj.Properties
{

    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }

    }
}]]></ProjectItem>
              <ProjectItem Encoding="UTF8" Name="Properties\Resources.resx"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
    <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
    <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
        <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
        <xsd:element name="root" msdata:IsDataSet="true">
            <xsd:complexType>
                <xsd:choice maxOccurs="unbounded">
                    <xsd:element name="metadata">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="value" type="xsd:string" minOccurs="0" />
                            </xsd:sequence>
                            <xsd:attribute name="name" use="required" type="xsd:string" />
                            <xsd:attribute name="type" type="xsd:string" />
                            <xsd:attribute name="mimetype" type="xsd:string" />
                            <xsd:attribute ref="xml:space" />
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element name="assembly">
                        <xsd:complexType>
                            <xsd:attribute name="alias" type="xsd:string" />
                            <xsd:attribute name="name" type="xsd:string" />
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element name="data">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
                            </xsd:sequence>
                            <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
                            <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
                            <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
                            <xsd:attribute ref="xml:space" />
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element name="resheader">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                            </xsd:sequence>
                            <xsd:attribute name="name" type="xsd:string" use="required" />
                        </xsd:complexType>
                    </xsd:element>
                </xsd:choice>
            </xsd:complexType>
        </xsd:element>
    </xsd:schema>
    <resheader name="resmimetype">
        <value>text/microsoft-resx</value>
    </resheader>
    <resheader name="version">
        <value>2.0</value>
    </resheader>
    <resheader name="reader">
        <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
    </resheader>
    <resheader name="writer">
        <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
    </resheader>
    </root>
]]></ProjectItem>
              <ProjectItem Encoding="UTF8" Name="Properties\Resources.Designer.cs"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "sp_461859b733f24a948c86d2b2b5d50976.csproj.Properties.Resources.get_ResourceManager():System.Resources.ResourceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "sp_461859b733f24a948c86d2b2b5d50976.csproj.Properties.Resources.get_Culture():System.Globalization.CultureInfo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "sp_461859b733f24a948c86d2b2b5d50976.csproj.Properties.Resources.set_Culture(System.Globalization.CultureInfo):Void")]

namespace sp_461859b733f24a948c86d2b2b5d50976.csproj.Properties {
    using System;


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("sp_461859b733f24a948c86d2b2b5d50976.csproj.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }

    }
}]]></ProjectItem>
              <ProjectItem Encoding="UTF16LE" Name="sp_461859b733f24a948c86d2b2b5d50976.csproj"><![CDATA[<?xml version="1.0" encoding="utf-16"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
	    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
        <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
        <OutputType>Library</OutputType>
        <RootNamespace>sp_461859b733f24a948c86d2b2b5d50976.csproj</RootNamespace>
        <AssemblyName>sp_461859b733f24a948c86d2b2b5d50976.csproj</AssemblyName>
        <ProjectGuid>{C792B577-3187-41B4-A778-35BF1292DEDE}</ProjectGuid>
		        <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
        <NoStandardLibraries>false</NoStandardLibraries>
		    </PropertyGroup>
    <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
		        <DebugSymbols>true</DebugSymbols>
        <Optimize>false</Optimize>
        <OutputPath>.\bin\Debug\</OutputPath>
        <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
        <DefineConstants>DEBUG;TRACE</DefineConstants>
        <WarningLevel>4</WarningLevel>
		    </PropertyGroup>
    <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
		        <DebugSymbols>false</DebugSymbols>
        <Optimize>true</Optimize>
        <OutputPath>.\bin\Release\</OutputPath>
        <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
        <DefineConstants>TRACE</DefineConstants>
        <WarningLevel>4</WarningLevel>
		    </PropertyGroup>
    <PropertyGroup>
        <PreBuildEvent>
        </PreBuildEvent>
        <PostBuildEvent>
        </PostBuildEvent>
    </PropertyGroup>
    <ItemGroup>
                <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
                <Reference Include="Microsoft.SqlServer.ScriptTask, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
                <Reference Include="System.dll" />
                <Reference Include="System.AddIn, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=MSIL" />
                <Reference Include="System.Data.dll" />
                <Reference Include="System.Windows.Forms.dll" />
                <Reference Include="System.Xml.dll" />
            </ItemGroup>
	    <ItemGroup>
        <Folder Include="Resources\" />
        <AppDesigner Include="Properties\" />
        <EmbeddedResource Include="Properties\Resources.resx">
						<Generator>ResXFileCodeGenerator</Generator>
            <LastGenOutput>Resources.Designer.cs</LastGenOutput>
			        </EmbeddedResource>
        <Compile Include="Properties\Resources.Designer.cs">
            <AutoGen>True</AutoGen>
            <DependentUpon>Resources.resx</DependentUpon>
            <DesignTime>True</DesignTime>
        </Compile>
		        <None Include="Properties\Settings.settings">
            <Generator>SettingsSingleFileGenerator</Generator>
            <LastGenOutput>Settings.Designer.cs</LastGenOutput>
        </None>
        <Compile Include="Properties\Settings.Designer.cs">
            <AutoGen>True</AutoGen>
            <DependentUpon>Settings.settings</DependentUpon>
            <DesignTimeSharedInput>True</DesignTimeSharedInput>
        </Compile>

				<Compile Include="AssemblyInfo.cs">
			<SubType>Code</SubType>
		</Compile>
				<Compile Include="ScriptMain.cs">
			<SubType>Code</SubType>
		</Compile>
		
		
		
		
		    </ItemGroup>
		<!-- Include the build rules for a C# project.-->
    <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
		<!-- This section defines VSTA properties that describe the host-changable project properties. -->
    <ProjectExtensions>
        <VisualStudio>
            <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
                <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="#HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\9.0\InstallDir#\devenv.exe" />
                <Host Name="SSIS_ScriptTask" />
                <ProjectClient>
                    <HostIdentifier>SSIS_ST120</HostIdentifier>
                </ProjectClient>
            </FlavorProperties>
        </VisualStudio>
    </ProjectExtensions>
    <PropertyGroup>
        <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    </PropertyGroup>
    <PropertyGroup>
        <TargetFrameworkProfile></TargetFrameworkProfile>
    </PropertyGroup></Project>
]]></ProjectItem>
              <ProjectItem Encoding="UTF16LE" Name="Project"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:ProjectId>{a03c54a2-4da1-4f6b-9e9e-ce81f65012a2}</msb:ProjectId>
		<msb:NoContent>Reference;Import;Folder</msb:NoContent>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>sp_461859b733f24a948c86d2b2b5d50976</msb:DisplayName>
		<msb:CodeName>sp_461859b733f24a948c86d2b2b5d50976</msb:CodeName>
	</msb:PropertyGroup>
	<msb:ItemGroup>
				<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
				<msb:File Include="Properties\Resources.Designer.cs"/>
				<msb:File Include="AssemblyInfo.cs"/>
				<msb:File Include="ScriptMain.cs"/>
								<msb:File Include="Properties\Settings.settings"/>
						<msb:Project Include="sp_461859b733f24a948c86d2b2b5d50976.csproj"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:Variables>
        <DTS:Variable DTS:CreationName="" DTS:Description="The propagate property of the event&#xD;&#xA;The propagate property of the event" DTS:DTSID="{68BA7595-C4A0-4E83-BEB7-30C0899A5BB1}" DTS:IncludeInDebugDump="6789" DTS:Namespace="System" DTS:ObjectName="Propagate">
          <DTS:VariableValue DTS:DataType="11">True</DTS:VariableValue>
        </DTS:Variable>
      </DTS:Variables>
    </DTS:EventHandler>
  </DTS:EventHandlers>
  <DTS:Executables>
    <DTS:Executable DTS:CreationName="STOCK:SEQUENCE" DTS:DTSID="{C454C9FE-BE1C-42A4-BD76-B7BE4D0D83C2}" DTS:ExecutableType="STOCK:SEQUENCE" DTS:LocaleID="-1" DTS:ObjectName="SEQC Package Logic" DTS:refId="Package\SEQC Package Logic">
      <DTS:Executables>
        <DTS:Executable DTS:CreationName="STOCK:SEQUENCE" DTS:DTSID="{A66639E2-A910-434C-98C3-C1BC8CE884C7}" DTS:ExecutableType="STOCK:SEQUENCE" DTS:LocaleID="-1" DTS:ObjectName="SEQC Prepare Database" DTS:refId="Package\SEQC Package Logic\SEQC Prepare Database">
          <DTS:Executables>
            <DTS:Executable DTS:CreationName="STOCK:SEQUENCE" DTS:DTSID="{B608C544-E044-4B10-8C13-17F5946E888B}" DTS:ExecutableType="STOCK:SEQUENCE" DTS:LocaleID="-1" DTS:ObjectName="SEQC Preparations for any updates" DTS:refId="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Preparations for any updates">
              <DTS:Executables>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{40C66B32-4B1C-4DEB-9BB0-597F30BFF220}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL drop objects for any updates" DTS:refId="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Preparations for any updates\SQL drop objects for any updates" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                                -- Drop staging tables&#xA;                                IF object_id('[Staging].[ClaimBase]') IS NOT NULL DROP TABLE [Staging].[ClaimBase]&#xA;                                IF object_id('[Staging].[A1_Quote_Advertising]') IS NOT NULL DROP TABLE [Staging].[A1_Quote_Advertising]&#xA;&#xA;                                IF object_id('[Staging].[OneWayMilesRangeText]') IS NOT NULL DROP TABLE [Staging].[OneWayMilesRangeText]&#xA;                                IF object_id('[Staging].[AnnualMileageRangeText]') IS NOT NULL DROP TABLE [Staging].[AnnualMileageRangeText]&#xA;                                IF object_id('[Staging].[OdometerMileageRangeText]') IS NOT NULL DROP TABLE [Staging].[OdometerMileageRangeText]&#xA;                                IF object_id('[Staging].[CostRangeText]') IS NOT NULL DROP TABLE [Staging].[CostRangeText]&#xA;                                IF object_id('[Staging].[AgeGroupRangeText]') IS NOT NULL DROP TABLE [Staging].[AgeGroupRangeText]&#xA;                                IF object_id('[Staging].[CreditScoreRangeText]') IS NOT NULL DROP TABLE [Staging].[CreditScoreRangeText]&#xA;                                IF object_id('[Staging].[DaysLapseRangeText]') IS NOT NULL DROP TABLE [Staging].[DaysLapseRangeText]&#xA;                                &#xA;&#xA;                                --Drop data mart fact tables&#xA;                                IF object_id('[DataMart].[factClaim]') IS NOT NULL DROP TABLE [DataMart].[factClaim]&#xA;&#xA;&#xA;&#xA;                                IF object_id('[DataMart].[factClaim]') IS NOT NULL DROP TABLE [DataMart].[factClaim]&#xA;                                IF object_id('[DataMart].[factClaimMonthly]') IS NOT NULL DROP TABLE [DataMart].[factClaimMonthly]&#xA;                                IF object_id('[DataMart].[factFeature]') IS NOT NULL DROP TABLE [DataMart].[factFeature]&#xA;                                IF object_id('[DataMart].[factFeatureMonthly]') IS NOT NULL DROP TABLE [DataMart].[factFeatureMonthly]&#xA;                                IF object_id('[DataMart].[factExpense]') IS NOT NULL DROP TABLE [DataMart].[factExpense]&#xA;                                IF object_id('[DataMart].[factExpenseMonthly]') IS NOT NULL DROP TABLE [DataMart].[factExpenseMonthly]&#xA;                                IF object_id('[DataMart].[factReserve]') IS NOT NULL DROP TABLE [DataMart].[factReserve]&#xA;                                IF object_id('[DataMart].[factReserveMonthly]') IS NOT NULL DROP TABLE [DataMart].[factReserveMonthly]&#xA;                                IF object_id('[DataMart].[factlessSecurityProducer]') IS NOT NULL DROP TABLE [DataMart].[factlessSecurityProducer]&#xA;                                IF object_id('[DataMart].[factlessSecurityCarrier]') IS NOT NULL DROP TABLE [DataMart].[factlessSecurityCarrier]                                &#xA;                                --Drop data mart dimension tables&#xA;                                &#xA;                                IF object_id('[DataMart].[dimClaim]') IS NOT NULL DROP TABLE [DataMart].[dimClaim]&#xA;                                IF object_id('[DataMart].[dimFeature]') IS NOT NULL DROP TABLE [DataMart].[dimFeature]&#xA;                                &#xA;                                --Drop data mart help tables                                                                &#xA;                                IF object_id('[DataMart].[dimEndorsementBusinessType]') IS NOT NULL DROP TABLE [DataMart].[dimEndorsementBusinessType]&#xA;                                &#xA;&#xA;                              &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{A4159E71-2F30-44A1-BA3C-12E9CE01A031}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL prepare dimDriver objects" DTS:refId="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Preparations for any updates\SQL prepare dimDriver objects" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                                CREATE TABLE [Staging].[AgeGroupRangeText] (&#xA;                                 [LowestValue] INT NOT NULL&#xA;                                 ,[Text] VARCHAR(20) NOT NULL&#xA;                                 )&#xA;                                GO&#xA;&#xA;                                CREATE TABLE [Staging].[CreditScoreRangeText] (&#xA;                                 [LowestValue] INT NOT NULL&#xA;                                 ,[Text] VARCHAR(20) NOT NULL&#xA;                                 ,[OrderNum] INT NOT NULL&#xA;                                 )&#xA;                                GO&#xA;&#xA;                                CREATE TABLE [Staging].[DaysLapseRangeText] (&#xA;                                 [LowestValue] INT NOT NULL&#xA;                                 ,[Text] VARCHAR(20) NOT NULL&#xA;                                 ,[OrderNum] INT NOT NULL&#xA;                                 )&#xA;                                GO&#xA;&#xA;                                DECLARE @counter INT = 15;&#xA;                                DECLARE @next INT;&#xA;                                DECLARE @OrderNum INT;&#xA;&#xA;                                INSERT INTO [Staging].[AgeGroupRangeText]&#xA;                                VALUES (&#xA;                                 13&#xA;                                 ,'13-15'&#xA;                                 )&#xA;&#xA;                                WHILE @counter &lt;= 96&#xA;                                BEGIN&#xA;                                 SET @next = @counter + 3;&#xA;&#xA;                                 INSERT INTO [Staging].[AgeGroupRangeText]&#xA;                                 VALUES (&#xA;                                  @counter&#xA;                                  ,CAST(@counter AS VARCHAR(2)) + '-' + CAST(@next AS VARCHAR(2))&#xA;                                  )&#xA;&#xA;                                 SET @counter = @next&#xA;                                END&#xA;&#xA;                                INSERT INTO [Staging].[AgeGroupRangeText]&#xA;                                VALUES (&#xA;                                 100&#xA;                                 ,'&gt; 99'&#xA;                                 )&#xA;&#xA;                                SET @counter = 100;&#xA;                                SET @OrderNum = 2;&#xA;&#xA;                                INSERT INTO [Staging].[CreditScoreRangeText]&#xA;                                VALUES (&#xA;                                 1&#xA;                                 ,'0-100'&#xA;                                 ,1&#xA;                                 )&#xA;&#xA;                                WHILE @counter &lt;= 900&#xA;                                BEGIN&#xA;                                 SET @next = @counter + 100;&#xA;                                 SET @counter = @counter + 1;&#xA;&#xA;                                 INSERT INTO [Staging].[CreditScoreRangeText]&#xA;                                 VALUES (&#xA;                                  @counter&#xA;                                  ,CAST(@counter AS VARCHAR(3)) + '-' + CAST(@next AS VARCHAR(4))&#xA;                                  ,@OrderNum&#xA;                                  )&#xA;&#xA;                                 SET @counter = @next;&#xA;                                 SET @OrderNum = @OrderNum + 1;&#xA;                                END&#xA;&#xA;                                INSERT INTO [Staging].[CreditScoreRangeText]&#xA;                                VALUES (&#xA;                                 1001&#xA;                                 ,'&gt;1000'&#xA;                                 ,11&#xA;                                 )&#xA;&#xA;                                INSERT INTO [Staging].[DaysLapseRangeText] VALUES(0, 'None', 1)&#xA;                                INSERT INTO [Staging].[DaysLapseRangeText] VALUES(1, '1-10d', 2)&#xA;                                INSERT INTO [Staging].[DaysLapseRangeText] VALUES(11, '11-20d', 3)&#xA;                                INSERT INTO [Staging].[DaysLapseRangeText] VALUES(21, '21-30d', 4)&#xA;                                INSERT INTO [Staging].[DaysLapseRangeText] VALUES(31, '31-40d', 5)&#xA;                                INSERT INTO [Staging].[DaysLapseRangeText] VALUES(41, '41-50d', 6)&#xA;                                INSERT INTO [Staging].[DaysLapseRangeText] VALUES(51, '51-60d', 7)&#xA;                                INSERT INTO [Staging].[DaysLapseRangeText] VALUES(61, '61-90d', 8)&#xA;                                INSERT INTO [Staging].[DaysLapseRangeText] VALUES(91, '91-120d', 9)&#xA;                                INSERT INTO [Staging].[DaysLapseRangeText] VALUES(121, '120-180d', 10)&#xA;                                INSERT INTO [Staging].[DaysLapseRangeText] VALUES(181, '181-365d', 11)&#xA;                                INSERT INTO [Staging].[DaysLapseRangeText] VALUES(366, '&gt;365d', 12)                     &#xA;               &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{34980DF6-6B84-4ECB-BF58-D6F35058222B}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL prepare objects for Vehicle" DTS:refId="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Preparations for any updates\SQL prepare objects for Vehicle" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                                CREATE TABLE [Staging].[OneWayMilesRangeText]&#xA;                                (&#xA;                                 [LowestValue] int NOT NULL,&#xA;                                 [Text] varchar(20) NOT NULL,&#xA;                                 [OrderNum] int NOT NULL &#xA;                                )&#xA;&#xA;                                GO&#xA;&#xA;                                CREATE TABLE [Staging].[AnnualMileageRangeText]&#xA;                                (&#xA;                                 [LowestValue] int NOT NULL,&#xA;                                 [Text] varchar(20) NOT NULL,&#xA;                                 [OrderNum] int NOT NULL &#xA;                                )&#xA;&#xA;                                GO&#xA;&#xA;                                CREATE TABLE [Staging].[OdometerMileageRangeText]&#xA;                                (&#xA;                                 [LowestValue] int NOT NULL,&#xA;                                 [Text] varchar(20) NOT NULL,&#xA;                                 [OrderNum] int NOT NULL &#xA;                                )&#xA;&#xA;                                GO&#xA;&#xA;                                CREATE TABLE [Staging].[CostRangeText]&#xA;                                (&#xA;                                 [LowestValue] int NOT NULL,&#xA;                                 [Text] varchar(20) NOT NULL,&#xA;                                 [OrderNum] int NOT NULL&#xA;                                )&#xA;&#xA;                                GO&#xA;&#xA;                                DECLARE @counter int = 0;&#xA;                                DECLARE @next int = 1;&#xA;                                DECLARE @OrderNum int = 23;&#xA;&#xA;                                WHILE @counter &lt;= 20&#xA;                                BEGIN&#xA;                                 INSERT INTO [Staging].[OneWayMilesRangeText] VALUES(@counter, CAST(@counter as varchar(20)), @counter + 2);&#xA;                                 SET @counter = @counter + 1;&#xA; &#xA;                                END&#xA;&#xA;                                WHILE @counter &lt;= 96&#xA;                                BEGIN&#xA;                                 SET @next = @counter + 4; &#xA;                                 INSERT INTO [Staging].[OneWayMilesRangeText] VALUES(@counter, CAST(@counter as varchar(2)) + '-' + CAST(@next as varchar(3)), @OrderNum);&#xA;                                 SET @counter = @counter + 5;&#xA;                                 SET @OrderNum = @OrderNum + 1;&#xA;                                END&#xA;&#xA;                                INSERT INTO [Staging].[OneWayMilesRangeText] VALUES(101, '&gt; 100', 39)&#xA;&#xA;                                SET @counter = 1;&#xA;                                SET @next = 1;&#xA;                                SET @OrderNum = 3;&#xA;&#xA;                                INSERT INTO [Staging].[AnnualMileageRangeText] VALUES (0,'=0',2);&#xA;                                WHILE @counter &lt;= 30000&#xA;                                BEGIN&#xA;                                 SET @next = @counter + 1000 - 1;&#xA; &#xA;                                 INSERT INTO  [Staging].[AnnualMileageRangeText] VALUES (@counter, FORMAT(@counter, '##,##') + ' - ' + FORMAT(@next, '##,##'), @OrderNum);&#xA;                                 SET @counter = @counter + 1000;&#xA;                                 SET @OrderNum = @OrderNum + 1;&#xA;                                END&#xA;&#xA;                                INSERT INTO [Staging].[AnnualMileageRangeText] VALUES (30001,'&gt;30,000',33);&#xA;&#xA;                                SET @counter = 10000;&#xA;                                SET @OrderNum = 3;&#xA;&#xA;                                INSERT INTO [Staging].[OdometerMileageRangeText]&#xA;                                VALUES (&#xA;                                 0&#xA;                                 ,'2.1 - 10,000'&#xA;                                 ,2&#xA;                                 );&#xA;&#xA;                                WHILE @counter &lt;= 240000&#xA;                                BEGIN&#xA;                                 SET @next = @counter + 10000;&#xA;&#xA;                                 INSERT INTO [Staging].[OdometerMileageRangeText]&#xA;                                 VALUES (&#xA;                                  @counter&#xA;                                  ,CAST(@ordernum AS VARCHAR(2)) + '.' + FORMAT(@counter, '##,##0') + ' - ' + FORMAT(@next, '##,##')&#xA;                                  ,@OrderNum&#xA;                                  )&#xA;&#xA;                                 SET @counter = @counter + 10000;&#xA;                                 SET @OrderNum = @OrderNum + 1;&#xA;                                END&#xA;&#xA;                                INSERT INTO  [Staging].[OdometerMileageRangeText] VALUES (250000,'27.&gt; 250,000',27);&#xA;&#xA;                                INSERT INTO [Staging].[CostRangeText]([LowestValue], [Text], [OrderNum]) VALUES&#xA;                                (0, '=$0', 2),&#xA;                                (1, '$1 -  $1,000', 3),&#xA;                                (1000, '$1,001 -  $2,000', 4),&#xA;                                (2000, '$2,001 -  $3,000', 5),&#xA;                                (3000, '$3,001 -  $4,000', 6),&#xA;                                (4000, '$4,001 -  $5,000', 7),&#xA;                                (5000, '$5,001 -  $6,000', 8),&#xA;                                (6000, '$6,001 -  $7,000', 9),&#xA;                                (7000, '$7,001 -  $8,000', 10),&#xA;                                (8000, '$8,001 -  $9,000', 11),&#xA;                                (9000, '$9,001 - $10,000', 12),&#xA;                                (10000, '$10,001 - $11,000', 13),&#xA;                                (11000, '$11,001 - $12,000', 14),&#xA;                                (12000, '$12,001 - $13,000', 15),&#xA;                                (13000, '$13,001 - $14,000', 16),&#xA;                                (14000, '$14,001 - $15,000', 17),&#xA;                                (15000, '$15,001 - $16,000', 18),&#xA;                                (16000, '$16,001 - $17,000', 19),&#xA;                                (17000, '$17,001 - $18,000', 20),&#xA;                                (18000, '$18,001 - $19,000', 21),&#xA;                                (19000, '$19,001 - $20,000', 22),&#xA;                                (20000, '$20,001 - $25,000', 23),&#xA;                                (25000, '$25,001 - $30,000', 24),&#xA;                                (30000, '$30,001 - $35,000', 25),&#xA;                                (35000, '$35,001 - $40,000', 26),&#xA;                                (40000, '$40,001 - $45,000', 27),&#xA;                                (45000, '$45,001 - $50,000', 28),&#xA;                                (50000, '$50,001 - $55,000', 29),&#xA;                                (55000, '$55,001 - $60,000', 30),&#xA;                                (60000, '$60,001 - $65,000', 31),&#xA;                                (65000, '$65,001 - $70,000', 32),&#xA;                                (70000, '&gt;$70,000', 33)                              &#xA;                              &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
              </DTS:Executables>
              <DTS:PrecedenceConstraints>
                <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{F3EC1156-45B2-42BF-81AC-2208183E3388}" DTS:From="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Preparations for any updates\SQL drop objects for any updates" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL drop objects for any updates_To_SQL prepare dimDriver objects" DTS:refId="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Preparations for any updates.PrecedenceConstraints[Constraint_SQL drop objects for any updates_To_SQL prepare dimDriver objects]" DTS:To="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Preparations for any updates\SQL prepare dimDriver objects">
                </DTS:PrecedenceConstraint>
                <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{85F684BD-7753-4B49-9403-70F1930E8B6E}" DTS:From="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Preparations for any updates\SQL prepare dimDriver objects" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL prepare dimDriver objects_To_SQL prepare objects for Vehicle" DTS:refId="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Preparations for any updates.PrecedenceConstraints[Constraint_SQL prepare dimDriver objects_To_SQL prepare objects for Vehicle]" DTS:To="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Preparations for any updates\SQL prepare objects for Vehicle">
                </DTS:PrecedenceConstraint>
              </DTS:PrecedenceConstraints>
            </DTS:Executable>
            <DTS:Executable DTS:CreationName="STOCK:SEQUENCE" DTS:DTSID="{A268F0EA-CFE3-44F7-983A-9DF193B22D00}" DTS:ExecutableType="STOCK:SEQUENCE" DTS:LocaleID="-1" DTS:ObjectName="SEQC Read incremental parameters" DTS:refId="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Read incremental parameters">
              <DTS:Executables>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{21FF65E8-3B5C-444F-8FDD-CF88AF6B75C7}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL get isIncremental" DTS:refId="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Read incremental parameters\SQL get isIncremental" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:ResultType="ResultSetType_SingleRow" SQLTask:SqlStatementSource="&#xA;                              &#xA;                            SELECT        TOP (1) IsIncremental, IncrementalStartDate, ProcessRatemaking&#xA;                            FROM            Incremental.UpdateParameters                &#xA;                  &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                      <SQLTask:ResultBinding SQLTask:DtsVariableName="User::IsIncremental" SQLTask:ResultName="IsIncremental">
                      </SQLTask:ResultBinding>
                      <SQLTask:ResultBinding SQLTask:DtsVariableName="User::IncrementalStartDate" SQLTask:ResultName="IncrementalStartDate">
                      </SQLTask:ResultBinding>
                      <SQLTask:ResultBinding SQLTask:DtsVariableName="User::ProcessRatemakingRaw" SQLTask:ResultName="ProcessRatemaking">
                      </SQLTask:ResultBinding>
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExpressionTask" DTS:DTSID="{38F59C2F-DDBA-4CB2-83CE-05FB37ADBF6A}" DTS:ExecutableType="Microsoft.ExpressionTask" DTS:LocaleID="-1" DTS:ObjectName="Process Ratemaking variable calculation" DTS:refId="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Read incremental parameters\Process Ratemaking variable calculation" DTS:TaskContact="Expression Task;Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <ExpressionTask Expression="@[User::ProcessRatemaking] = @[User::IsIncremental] ==1 ? @[User::ProcessRatemakingRaw]  :  1">
                    </ExpressionTask>
                  </DTS:ObjectData>
                </DTS:Executable>
              </DTS:Executables>
              <DTS:PrecedenceConstraints>
                <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{0A4AA8A0-4760-4F59-BEFE-FB504CD2ABD2}" DTS:From="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Read incremental parameters\SQL get isIncremental" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL get isIncremental_To_Process Ratemaking variable calculation" DTS:refId="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Read incremental parameters.PrecedenceConstraints[Constraint_SQL get isIncremental_To_Process Ratemaking variable calculation]" DTS:To="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Read incremental parameters\Process Ratemaking variable calculation">
                </DTS:PrecedenceConstraint>
              </DTS:PrecedenceConstraints>
            </DTS:Executable>
            <DTS:Executable DTS:CreationName="STOCK:SEQUENCE" DTS:DTSID="{9F175A98-3A7F-44BC-A031-AA06B730E025}" DTS:ExecutableType="STOCK:SEQUENCE" DTS:LocaleID="-1" DTS:ObjectName="SEQC Preparations for Ratemaking processing" DTS:refId="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Preparations for Ratemaking processing">
              <DTS:Executables>
                <DTS:Executable DTS:CreationName="Microsoft.ExpressionTask" DTS:DTSID="{37B334C2-A875-467F-9469-B7EFF3E641F7}" DTS:ExecutableType="Microsoft.ExpressionTask" DTS:LocaleID="-1" DTS:ObjectName="Fake expression task" DTS:refId="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Preparations for Ratemaking processing\Fake expression task" DTS:TaskContact="Expression Task;Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <ExpressionTask Expression="@[User::ProcessRatemaking] = @[User::ProcessRatemaking]">
                    </ExpressionTask>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{743F5FCB-1A5A-4225-8617-8CE041A002DD}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL Setup Ratemaking tables" DTS:refId="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Preparations for Ratemaking processing\SQL Setup Ratemaking tables" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                                        &#xA;                                  &#xA;                                  IF object_id('[Staging].[FlatCancels]') IS NOT NULL DROP TABLE [Staging].[FlatCancels]&#xA;                                  IF object_id('[DataMart].[factPremiums]') IS NOT NULL DROP TABLE [DataMart].[factPremiums]&#xA;                                  IF object_id('[DataMart].[factRenewals]') IS NOT NULL DROP TABLE [DataMart].[factRenewals]&#xA;                                  IF object_id('[DataMart].[factRenewalsActual]') IS NOT NULL DROP TABLE [DataMart].[factRenewalsActual]&#xA;                                  IF object_id('[DataMart].[factRenewalsCarrioverActual]') IS NOT NULL DROP TABLE [DataMart].[factRenewalsCarrioverActual]&#xA;                                  IF object_id('[DataMart].[factNewBusiness]') IS NOT NULL DROP TABLE [DataMart].[factNewBusiness]&#xA;                                  IF object_id('[DataMart].[factPremiumsMonthly]') IS NOT NULL DROP TABLE [DataMart].[factPremiumsMonthly]&#xA;                                  IF object_id('[DataMart].[factPifVifMonthly]') IS NOT NULL DROP TABLE [DataMart].[factPifVifMonthly]&#xA;                                  IF object_id('[DataMart].[factNewBusinessMonthly]') IS NOT NULL DROP TABLE [DataMart].[factNewBusinessMonthly]&#xA;                                  IF object_id('[DataMart].[factRenewalsMonthly]') IS NOT NULL DROP TABLE [DataMart].[factRenewalsMonthly]&#xA;                                  IF object_id('[DataMart].[factRenewalsActualMonthly]') IS NOT NULL DROP TABLE [DataMart].[factRenewalsActualMonthly]&#xA;                                  IF object_id('[DataMart].[factRenewalsCarrioverActualMonthly]') IS NOT NULL DROP TABLE [DataMart].[factRenewalsCarrioverActualMonthly]&#xA;&#xA;                                  IF object_id('[DataMart].[factlessSecurityProgramGroup]') IS NOT NULL DROP TABLE [DataMart].[factlessSecurityProgramGroup]&#xA;                                  IF object_id('[DataMart].[factlessSecurityAgency]') IS NOT NULL DROP TABLE [DataMart].[factlessSecurityAgency]&#xA;                                  IF object_id('[DataMart].[factlessSecurityAgencyOffice]') IS NOT NULL DROP TABLE [DataMart].[factlessSecurityAgencyOffice]&#xA;                                  IF object_id('[DataMart].[factlessUserProducer]') IS NOT NULL DROP TABLE [DataMart].[factlessUserProducer]&#xA;                                  IF object_id('[DataMart].[factDriverCount]') IS NOT NULL DROP TABLE [DataMart].[factDriverCount]&#xA;                                  IF object_id('[DataMart].[factDriverCountMonthly]') IS NOT NULL DROP TABLE [DataMart].[factDriverCountMonthly]&#xA;                                  IF object_id('[DataMart].[factDIF]') IS NOT NULL DROP TABLE [DataMart].[factDIF]&#xA;                         &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
              </DTS:Executables>
              <DTS:PrecedenceConstraints>
                <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{5CF6D9D3-F060-437F-ABD3-E8B6DBB563F7}" DTS:EvalOp="3" DTS:Expression="@[User::ProcessRatemaking]==1" DTS:From="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Preparations for Ratemaking processing\Fake expression task" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_Fake expression task_To_SQL Setup Ratemaking tables" DTS:refId="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Preparations for Ratemaking processing.PrecedenceConstraints[Constraint_Fake expression task_To_SQL Setup Ratemaking tables]" DTS:To="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Preparations for Ratemaking processing\SQL Setup Ratemaking tables">
                </DTS:PrecedenceConstraint>
              </DTS:PrecedenceConstraints>
            </DTS:Executable>
            <DTS:Executable DTS:CreationName="STOCK:SEQUENCE" DTS:DTSID="{392A5EE8-E630-478A-87CA-1020FC5B33E3}" DTS:ExecutableType="STOCK:SEQUENCE" DTS:LocaleID="-1" DTS:ObjectName="SEQC Preparations for full update" DTS:refId="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Preparations for full update">
              <DTS:Executables>
                <DTS:Executable DTS:CreationName="STOCK:SEQUENCE" DTS:DTSID="{B85DD0D0-D168-4F36-A39A-1D94B7D546AA}" DTS:ExecutableType="STOCK:SEQUENCE" DTS:LocaleID="-1" DTS:ObjectName="SEQC fake container for full updates" DTS:refId="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Preparations for full update\SEQC fake container for full updates">
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="STOCK:SEQUENCE" DTS:DTSID="{EDCB39F9-26D5-48F6-B6BA-EED893E639E3}" DTS:ExecutableType="STOCK:SEQUENCE" DTS:LocaleID="-1" DTS:ObjectName="SEQC Preparations for full update conditional" DTS:refId="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Preparations for full update\SEQC Preparations for full update conditional">
                  <DTS:Executables>
                    <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{A6334470-ADA5-4A8F-850A-F3749D77A89A}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL Cleanup DB Full Update Only" DTS:refId="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Preparations for full update\SEQC Preparations for full update conditional\SQL Cleanup DB Full Update Only" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                      <DTS:ObjectData>
                        <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                  &#xA;                      IF object_id('[DataMart].[factPaymentTransaction]') IS NOT NULL DROP TABLE [DataMart].[factPaymentTransaction]&#xA;                      IF object_id('[DataMart].[factCashAppliedTransaction]') IS NOT NULL DROP TABLE [DataMart].[factCashAppliedTransaction]                                  &#xA;                      IF object_id('[DataMart].[dimSecurityUser]') IS NOT NULL DROP TABLE [DataMart].[dimSecurityUser]                                  &#xA;                        &#xA;                      IF object_id('[Staging].[Periods]') IS NOT NULL DROP TABLE [Staging].[Periods]&#xA;                IF object_id('[Staging].[DriverID]') IS NOT NULL DROP TABLE [Staging].[DriverID]&#xA;                IF object_id('[Staging].[DriversID]') IS NOT NULL DROP TABLE [Staging].[DriversID]            &#xA;                      IF object_id('[Staging].[EndorsementVehicleCoverage_DriverID]') IS NOT NULL DROP TABLE [Staging].[EndorsementVehicleCoverage_DriverID]&#xA;                      IF object_id('[Staging].[EndorsementVehicleCoverage]') IS NOT NULL DROP TABLE [Staging].[EndorsementVehicleCoverage]&#xA;         &#xA;                    IF object_id('[Staging].[PeriodsData]') IS NOT NULL DROP TABLE [Staging].[PeriodsData]&#xA;                    IF object_id('[Staging].[EndorsementPeriodsData]') IS NOT NULL DROP TABLE [Staging].[EndorsementPeriodsData]&#xA;                    IF object_id('[Staging].[EndorsementPeriodIntervals]') IS NOT NULL DROP TABLE [Staging].[EndorsementPeriodIntervals]&#xA;                    IF object_id('[Staging].[EndorsementDateSupport]') IS NOT NULL DROP TABLE [Staging].[EndorsementDateSupport]&#xA;                    IF object_id('[Staging].[BaseEPEEData]') IS NOT NULL DROP TABLE [Staging].[BaseEPEEData]                &#xA;                    IF object_id('[Staging].[BaseWPWEData]') IS NOT NULL DROP TABLE [Staging].[BaseWPWEData] &#xA;                &#xA;         &#xA;                IF object_id('[Staging].[PolicyID]') IS NOT NULL DROP TABLE [Staging].[PolicyID]&#xA;                IF object_id('[Staging].[VehicleID]') IS NOT NULL DROP TABLE [Staging].[VehicleID]&#xA;                IF object_id('[Staging].[EndorsementID]') IS NOT NULL DROP TABLE [Staging].[EndorsementID]&#xA;                  &#xA;                IF object_id('[Staging].[EPEE_Transactional]') IS NOT NULL DROP TABLE [Staging].[EPEE_Transactional]&#xA;                IF object_id('[Staging].[WPWE_Transactional]') IS NOT NULL DROP TABLE [Staging].[WPWE_Transactional]             &#xA;         &#xA;             IF object_id('[Staging].[Inforce_Transactional]') IS NOT NULL DROP TABLE [Staging].[Inforce_Transactional]&#xA;                    IF object_id('[DataMart].[factQuotePremium]') IS NOT NULL DROP TABLE [DataMart].[factQuotePremium]&#xA;             IF object_id('[DataMart].[factPIFVIFDIFTransaction]') IS NOT NULL DROP TABLE [DataMart].[factPIFVIFDIFTransaction]&#xA;                IF object_id('[DataMart].[factEndorsementTransaction]') IS NOT NULL DROP TABLE [DataMart].[factEndorsementTransaction]       &#xA;                      IF object_id('[DataMart].[factPremiumsTransactional]') IS NOT NULL DROP TABLE [DataMart].[factPremiumsTransactional]&#xA;           IF object_id('[DataMart].[factInforcePremiumTransactional]') IS NOT NULL DROP TABLE [DataMart].[factInforcePremiumTransactional]            &#xA;         &#xA;             IF object_id('[DataMart].[factPIFVIFDIFTransactionMonthly]') IS NOT NULL DROP TABLE [DataMart].[factPIFVIFDIFTransactionMonthly]&#xA;                IF object_id('[DataMart].[factPremiumsTransactionalMonthly]') IS NOT NULL DROP TABLE [DataMart].[factPremiumsTransactionalMonthly]&#xA;                IF object_id('[DataMart].[factInforcePremiumTransactionalMonthly]') IS NOT NULL DROP TABLE [DataMart].[factInforcePremiumTransactionalMonthly]&#xA;                IF object_id('[DataMart].[factSoFarPremiumTransactionalMonthly]') IS NOT NULL DROP TABLE [DataMart].[factSoFarPremiumTransactionalMonthly]               &#xA;                IF object_id('[DataMart].[factPremiumChangingEndorsement]') IS NOT NULL DROP TABLE [DataMart].[factPremiumChangingEndorsement]   &#xA;                      IF object_id('[DataMart].[factlessVehicleLienholder]') IS NOT NULL DROP TABLE [DataMart].[factlessVehicleLienholder]&#xA;                IF object_id('[DataMart].[factlessDrivers]') IS NOT NULL DROP TABLE [DataMart].[factlessDrivers]         &#xA;         &#xA;             IF object_id('[DataMart].[dimEndorsement]') IS NOT NULL DROP TABLE [DataMart].[dimEndorsement]&#xA;                IF object_id('[DataMart].[dimPolicy]') IS NOT NULL DROP TABLE [DataMart].[dimPolicy]&#xA;                  &#xA;             IF object_id('[DataMart].[dimVehicle]') IS NOT NULL DROP TABLE [DataMart].[dimVehicle]&#xA;             IF object_id('[DataMart].[dimLienholder]') IS NOT NULL DROP TABLE [DataMart].[dimLienholder]&#xA;            IF object_id('[DataMart].[dimDriver]') IS NOT NULL DROP TABLE [DataMart].[dimDriver]&#xA;            IF object_id('[DataMart].[dimQuoteDriver]') IS NOT NULL DROP TABLE [DataMart].[dimQuoteDriver]&#xA;                    IF object_id('[DataMart].[dimQuoteVehicle]') IS NOT NULL DROP TABLE [DataMart].[dimQuoteVehicle]&#xA;                    IF object_id('[DataMart].[dimQuotePolicyTerm]') IS NOT NULL DROP TABLE [DataMart].[dimQuotePolicyTerm]      &#xA;                    IF object_id('[DataMart].[dimPaymentTransaction]') IS NOT NULL DROP TABLE [DataMart].[dimPaymentTransaction]                    &#xA;                    IF object_id('[Staging].[Quote]') IS NOT NULL DROP TABLE [Staging].[Quote]  &#xA;                    IF object_id('[Staging].[QuoteVehicleCoverage_DriverID]') IS NOT NULL DROP TABLE [Staging].[QuoteVehicleCoverage_DriverID]           &#xA;                    &#xA;&#xA;                IF object_id('[DataMart].[dimDrivers]') IS NOT NULL DROP TABLE [DataMart].[dimDrivers]&#xA;                  &#xA;                      IF object_id('[DataMart].[dimDate]') IS NOT NULL DROP TABLE [DataMart].[dimDate]&#xA;                      IF object_id('[DataMart].[dimMonth]') IS NOT NULL DROP TABLE [DataMart].[dimMonth]&#xA;                  &#xA;                      IF object_id('[dbo].[PolicyTermSequence]') IS NOT NULL DROP SEQUENCE [dbo].[PolicyTermSequence]&#xA;                      IF object_id('[dbo].[VehicleSequence]') IS NOT NULL DROP SEQUENCE [dbo].[VehicleSequence]&#xA;                      IF object_id('[dbo].[DriverSequence]') IS NOT NULL DROP SEQUENCE [dbo].[DriverSequence]&#xA;                      IF object_id('[dbo].[DriversSequence]') IS NOT NULL DROP SEQUENCE [dbo].[DriversSequence]&#xA;              &#xA;                                " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                        </SQLTask:SqlTaskData>
                      </DTS:ObjectData>
                    </DTS:Executable>
                    <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{23056500-BA8A-41BD-9781-C7D385852176}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL Create sequences" DTS:refId="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Preparations for full update\SEQC Preparations for full update conditional\SQL Create sequences" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                      <DTS:ObjectData>
                        <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                  &#xA;                                    CREATE SEQUENCE dbo.PolicyTermSequence&#xA;                                    AS INT&#xA;                                    START WITH 1&#xA;                                    INCREMENT BY 1;                        &#xA;                                &#xA;                                    CREATE SEQUENCE dbo.VehicleSequence&#xA;                                    AS INT&#xA;                                    START WITH 1&#xA;                                    INCREMENT BY 1;     &#xA;                                &#xA;                                    CREATE SEQUENCE dbo.DriverSequence&#xA;                                    AS INT&#xA;                                    START WITH 1 &#xA;                                    INCREMENT BY 1;          &#xA;                                &#xA;                                    CREATE SEQUENCE dbo.DriversSequence&#xA;                                    AS INT&#xA;                                    START WITH 1 &#xA;                                    INCREMENT BY 1;                                 &#xA;                                  &#xA;                                " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                        </SQLTask:SqlTaskData>
                      </DTS:ObjectData>
                    </DTS:Executable>
                    <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{CE42198B-B79F-4F14-BB7D-A078450851B5}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL Create Staging Tables" DTS:refId="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Preparations for full update\SEQC Preparations for full update conditional\SQL Create Staging Tables" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                      <DTS:ObjectData>
                        <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                  &#xA;                                    CREATE TABLE [Staging].[PolicyID](&#xA;                                     [SK_PolicyID] [int] NOT NULL,&#xA;                                     [BK_EndorsementID] [int] NULL&#xA;                                    ) ON [PRIMARY]&#xA;                                &#xA;                                    CREATE TABLE [Staging].[EndorsementID](&#xA;                                     [SK_EndorsementID] [int] IDENTITY(1,1) NOT NULL,&#xA;                                     [BK_EndorsementID] [int] NOT NULL&#xA;&#xA;                                    ) ON [PRIMARY]                &#xA;                                &#xA;                                &#xA;                                    CREATE TABLE [Staging].[VehicleID](&#xA;                                     [SK_VehicleID] [int] NOT NULL,&#xA;                                     [BK_EndorsementID] [int] NOT NULL,&#xA;                                     [BK_EndorsementPolicyTermID] [int] NOT NULL,&#xA;                                     [BK_VehicleID] [int] NOT NULL,&#xA;                                     [BK_EndorsementVehicleID] [int] NOT NULL,&#xA;                                      PolicyTermStatusID [int] NOT NULL&#xA;                                    ) ON [PRIMARY];&#xA;                                &#xA;                                &#xA;                                    CREATE TABLE [Staging].[DriverID](&#xA;                                     [SK_DriverID] [int] NOT NULL,&#xA;                                     [BK_EndorsementID] [int] NOT NULL,&#xA;                                     [BK_EndorsementPolicyTermID] [int] NOT NULL,&#xA;                                     [BK_DriverID] [int] NOT NULL,&#xA;                                     [BK_EndorsementPopulationID] [int] NOT NULL&#xA;                                    ) ON [PRIMARY]   &#xA;&#xA;&#xA;&#xA;                                    CREATE TABLE [Staging].[EndorsementVehicleCoverage_DriverID](&#xA;                                     [EndorsementVehicleCoverageID] [int] NOT NULL,&#xA;                                     [EndorsementPopulationID] [int] NOT NULL,&#xA;                                     [SK_DriverID] [int] NOT NULL,&#xA;                                      [BK_EndorsementVehicleID] [int] NOT NULL,&#xA;                                      Premium money NOT NULL,&#xA;                                      ProgramCoverageID [int] NOT NULL,&#xA;                                    ) ON [PRIMARY]&#xA;&#xA;                                    CREATE TABLE [Staging].[DriversID](&#xA;                                     [SK_DriversID] [int] NOT NULL,&#xA;                                     [BK_EndorsementID] [int] NOT NULL&#xA;                                    ) ON [PRIMARY] &#xA;&#xA;                                &#xA;                                    CREATE TABLE [Staging].[EndorsementVehicleCoverage](&#xA;                                      BK_EndorsementVehicleID INT NOT NULL,&#xA;                                      BK_EndorsementVehicleCoverageID INT NOT NULL,&#xA;                                      Premium money NOT NULL,&#xA;                                      ProgramCoverageID int NOT NULL,&#xA;                                      ProducerID int NOT NULL&#xA;                                    )&#xA;                                &#xA;                                    CREATE TABLE [Staging].[PeriodsData](&#xA;                                     [PeriodID] [int] NOT NULL,&#xA;                                     [TriggeringEndorsementID] [int] NULL,&#xA;                                     [PolicyTermID] [int] NULL,&#xA;                                     [PreviousPeriodID] [int] NULL,&#xA;                                     [NextPeriodID] [int] NULL,&#xA;                                     [PeriodActiveStartDate] [datetime] NULL,&#xA;                                     [PeriodActiveEndDate] [datetime] NULL,&#xA;                                     [PeriodActiveEndDateRaw] [datetime] NULL,&#xA;                                     [EffectiveDate] [datetime] NULL,&#xA;                                     [ExpirationDate] [datetime] NULL,&#xA;                                     [TimeZone] [int] NULL,&#xA;                                     [SK_CarrierID] [int] NULL&#xA;                                    ) ON [PRIMARY]&#xA;                                &#xA;                                    CREATE TABLE [Staging].[Periods](&#xA;                                     [BK_PolicyTermID] [int] NULL,&#xA;                                     [BK_VehicleID] [int] NULL,&#xA;                                     [SK_PolicyID] [int] NULL,&#xA;                                     [SK_VehicleID] [int] NULL,&#xA;                                     [SK_DriversID] [int] NULL,&#xA;                                     [SK_ProducerID] [int] NULL,&#xA;                                     [SK_CoverageID] [int] NULL,&#xA;                                     [SK_PY_DateID] [int] NULL,&#xA;                                     [SK_PY_MonthID] [int] NULL,&#xA;                                     [SK_RatedDriverID] [int] NULL,&#xA;                                     [SK_EndorsementDateID] [int] NULL,&#xA;                                     [SK_EndorsementEndDateID] [int] NULL,&#xA;                                     [BK_EndorsementPeriodID] [int] NULL,&#xA;                                     [BK_EndorsementID] [int] NULL,&#xA;                                     [EffectiveDate] [datetime] NULL,&#xA;                                     [ExpirationDate] [datetime] NULL,&#xA;                                     [EndorsementPeriodStartDate] [datetime] NULL,&#xA;                                     [EndorsementPeriodEndDate] [datetime] NULL,&#xA;                                     [Premium] [decimal](28, 14) NULL,&#xA;                                     [DailyRunRate] [decimal](38, 10) NULL,&#xA;                                     [BK_DriverID] [int] NULL,&#xA;                                     [SK_CarrierID] [int] NULL,&#xA;                                     [VIN] [varchar](50) NULL,&#xA;                                     [BK_NextPolicyTermID] [int] NULL,&#xA;                                     [PolicyTermStatusID] [int] NULL,&#xA;                                     [BK_ProducerID] int NULL                                      &#xA;                                    ) ON [PRIMARY]                                &#xA;&#xA;                                    CREATE TABLE [Staging].[EndorsementPeriodsData](&#xA;                                     [PeriodID] [int] NOT NULL,&#xA;                                     [EndorsementID] [int] NOT NULL,&#xA;                                     [EndorsementPeriodID] [int] NULL,&#xA;                                     [PolicyActive] [int] NULL,&#xA;                                     [EndorsementPeriodStartDate] [datetime] NULL,&#xA;                                     [EndorsementPeriodEndDate] [datetime] NULL&#xA;                                    ) ON [PRIMARY]&#xA;&#xA;                                    CREATE TABLE [Staging].[EndorsementPeriodIntervals](&#xA;                                     [EndorsementPeriodID] [int] NULL,&#xA;                                     [IntervalStartDate] [datetime2](7) NULL,&#xA;                                     [IntervalEndDate] [datetime2](7) NULL&#xA;                                    ) ON [PRIMARY]&#xA;&#xA;                                    CREATE TABLE [Staging].[EndorsementDateSupport](&#xA;                                     [EndorsementPeriodID] [int] NOT NULL,&#xA;                                     [SK_DateID] [int] NOT NULL&#xA;                                    ) ON [PRIMARY]&#xA;&#xA;                                    CREATE TABLE [Staging].[BaseEPEEData](&#xA;                                     [PeriodID] [int] NOT NULL,&#xA;                                     [TriggeringEndorsementID] [int] NOT NULL,&#xA;                                     [PeriodActiveStartDate] [datetime] NOT NULL,&#xA;                                     [SK_CarrierID] [int] NOT NULL,&#xA;                                     [BK_PolicyTermID] [int] NOT NULL,&#xA;                                     [SK_VehicleID] [int] NOT NULL,&#xA;                                     [SK_PolicyID] [int] NOT NULL,&#xA;                                     [SK_EndorsementID] [int] NOT NULL,&#xA;                                     [BK_DriverID] [int] NOT NULL,&#xA;                                     [SK_ProgramID] [int] NULL,&#xA;                                     [SK_ProgramGroupID] [int] NULL,    &#xA;                                     [BK_VehicleID] [int] NOT NULL,   &#xA;                                     [BK_ProducerID] [int] NULL,&#xA;                                     [SK_CoverageID] [int] NULL,    &#xA;                                     [SK_RatedDriverID] [int] NOT NULL,&#xA;                                     [SK_ProducerID] [int]  NULL,&#xA;                                     [BK_OfficeID] [int] NULL,                           &#xA;                                     [CoverageTypeID] [int] NOT NULL,&#xA;                                     [EndorsementVehicleID] [int] NOT NULL,&#xA;                                     [EndorsementPeriodID] [int] NULL,&#xA;                                     [EP_AtPeriodStart] [decimal](38, 13) NULL,&#xA;                                     [EP_AtPeriodEnd] [decimal](38, 13) NULL,&#xA;                                     [EE_AtPeriodStart] [int] NULL,&#xA;                                     [EE_AtPeriodEnd] [int] NULL,&#xA;                                     [EP_DailyRunRate] [decimal](38, 24) NULL,&#xA;                                     [EndorsementVehicleCoverageID] [int] NULL&#xA;                                    ) ON [PRIMARY]           &#xA;                                &#xA;                                    CREATE TABLE [Staging].[BaseWPWEData](&#xA;                                     [PeriodID] [int] NOT NULL,&#xA;                                     [CoverageTypeID] [int] NOT NULL,&#xA;                                     [EndorsementVehicleID] [int] NOT NULL,&#xA;                                     [WP] [decimal](38, 14) NULL,&#xA;                                     [WE] [int] NULL,&#xA;                                     [EndorsementVehicleCoverageID] [int] NULL,&#xA;                                     [EndorsementPeriodID] [int] NULL&#xA;                                    ) ON [PRIMARY]&#xA;&#xA;                                    CREATE TABLE [Staging].[Inforce_Transactional](&#xA;                                     [TriggeringEndorsementID] [int] NULL,&#xA;                                     [IntervalStartDate] [datetime2](7) NULL,                                 &#xA;                                     [PolicyTermID] [int] NULL,&#xA;                                     [CoverageTypeID] [int] NOT NULL,&#xA;                                     [EndorsementVehicleID] [int] NOT NULL,&#xA;                                     [SK_CarrierID] [int] NULL,&#xA;                                     [EndorsementVehicleCoverageID] [int] NULL,&#xA;                                     [EP_forPeriod] [decimal](38, 13) NULL,&#xA;                                     [EP_DailyRunRate] [decimal](38, 13) NULL,&#xA;                                     [EE_forPeriod] [int] NULL,&#xA;                                     [EndorsementPeriodID] INT NULL&#xA;                                    ) ON [PRIMARY]   &#xA;                                &#xA;                                    CREATE TABLE [Staging].[EPEE_Transactional](&#xA;                                     [TriggeringEndorsementID] [int] NULL,&#xA;                                     [SK_DateID] [int] NULL,&#xA;                                     [PolicyTermID] [int] NULL,&#xA;                                     [CoverageTypeID] [int] NOT NULL,&#xA;                                     [EndorsementVehicleID] [int] NOT NULL,&#xA;                                     [EndorsementVehicleCoverageID] [int] NULL,&#xA;                                     [SK_CarrierID] [int] NULL,&#xA;                                     [EP] [decimal](38, 13) NULL,&#xA;                                     [EE] [int] NULL&#xA;                                    ) ON [PRIMARY] &#xA;&#xA;                                    CREATE TABLE [Staging].[WPWE_Transactional](&#xA;                                     [TriggeringEndorsementID] [int] NULL,&#xA;                                     [SK_DateID] [int] NULL,&#xA;                                     [PolicyTermID] [int] NULL,&#xA;                                     [CoverageTypeID] [int] NOT NULL,&#xA;                                     [EndorsementVehicleID] [int] NOT NULL,&#xA;                                     [EndorsementVehicleCoverageID] [int] NULL,&#xA;                                     [SK_CarrierID] [int] NULL,&#xA;                                     [WP] [decimal](38, 12) NULL,&#xA;                                     [WE] [int] NULL&#xA;                                    ) ON [PRIMARY]&#xA;                                &#xA;                                    CREATE TABLE [Staging].[Quote](&#xA;                                     [BK_QuoteID] [int] NOT NULL,&#xA;                                     [QuoteOrigin] [varchar](50) NOT NULL,&#xA;                                     [QuoteValidationStatus] [varchar](50) NOT NULL,&#xA;                                     [SK_DateID] [int] NULL,&#xA;                                     [SK_ProducerID] [int] NOT NULL,&#xA;                                     [SK_ProgramID] [int] NOT NULL,&#xA;                                     [SK_CarrierID] [int] NOT NULL,&#xA;                                     [Completed] [varchar](3) NOT NULL,&#xA;                                     [PolicyCreated] [varchar](3) NOT NULL,&#xA;                                     [Premium] [money] NULL,&#xA;                                     [IsRenewal] [varchar](3) NOT NULL,&#xA;                                     [IsFromFSC] [varchar](3) NOT NULL,&#xA;                                     [TermLemgth] [varchar](3) NULL,&#xA;                                     [GarageZip] [varchar](5) NULL,&#xA;                                     [GarageCounty] [varchar](50) NULL,&#xA;                                     [MailZip] [varchar](5) NULL,&#xA;                                     [MailCounty] [varchar](50) NULL,&#xA;                                     [DriverCount] [int] NOT NULL,&#xA;                                     [VehicleCount] [int] NOT NULL,&#xA;                                     [EffectiveUnderwritingTier] [varchar](4000) NULL,&#xA;                                     [CompZipTerritory] [varchar](4000) NULL,&#xA;                                     [ZipTerritory] [varchar](4000) NULL,&#xA;                                     [CampaignName] [varchar](50) NULL,&#xA;                                     [CampaignType] [varchar](200) NULL,&#xA;                                     [LeadSource] [varchar](200) NULL,&#xA;                                     [LeadSourceType] [varchar](100) NULL,&#xA;                                      [QuoteOriginID] int NULL&#xA;                                    ) ON [PRIMARY]   &#xA;                                    &#xA;                                    CREATE TABLE [Staging].[QuoteVehicleCoverage_DriverID](&#xA;                                     [QuoteVehicleCoverageId] [int] NOT NULL,&#xA;                                     [BK_DriverId] [int] NOT NULL,&#xA;                                     [SK_DriverID] [int] NOT NULL&#xA;                                    ) ON [PRIMARY]                                    &#xA;                                  &#xA;                                " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                        </SQLTask:SqlTaskData>
                      </DTS:ObjectData>
                    </DTS:Executable>
                    <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{C80C06F1-29F6-4DC8-8F84-77CF49D77CCA}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL Create DataMart Tables" DTS:refId="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Preparations for full update\SEQC Preparations for full update conditional\SQL Create DataMart Tables" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                      <DTS:ObjectData>
                        <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                  &#xA;                                    CREATE TABLE [DataMart].[dimPolicy] (&#xA;                                     [SK_PolicyID] [int] NOT NULL DEFAULT(- 1)&#xA;                                     ,[BK_EndorsementID] [int] NOT NULL DEFAULT(- 1)&#xA;                                     ,[BK_PolicyID] [int] NOT NULL DEFAULT(- 1)&#xA;                                     ,[BK_PolicyTermID] [int] NOT NULL DEFAULT(- 1)&#xA;                                     ,[BK_RenewalPolicyTermID] [int] NULL DEFAULT(- 1)&#xA;                                     ,[BK_ProducerID] [int] NOT NULL DEFAULT(- 1)&#xA;                                     ,[BK_PolicyNumber] [varchar](20) NOT NULL DEFAULT('Uds')&#xA;                                     ,[BK_ProgramGroupID] [int] NOT NULL DEFAULT(- 1)&#xA;                                     ,[EffectiveDate] [datetime] NULL&#xA;                                     ,[ExpirationDate] [datetime] NULL&#xA;                                     ,[Product] [nvarchar](MAX) NOT NULL DEFAULT(N'Uds')&#xA;                                     ,[ProductState] [varchar](50) NOT NULL DEFAULT('Uds')&#xA;                                     ,[IsRenewal] [varchar](3) NOT NULL DEFAULT('Uds')&#xA;                                     ,[IsNewBusiness] [varchar](3) NOT NULL DEFAULT('Uds')&#xA;                                     ,[PolicyTermDays] [varchar](7) NOT NULL DEFAULT('Uds')&#xA;                                     ,[PolicyTermInMonths] [varchar](7) NOT NULL DEFAULT('Uds')&#xA;                                     ,[Carrier] [nvarchar](MAX) NOT NULL DEFAULT(N'Uds')&#xA;                                     ,[PolicyZip] [varchar](30) NOT NULL DEFAULT('Uds')&#xA;                                     ,[LineOfBusiness] [varchar](40) NOT NULL DEFAULT('Uds')&#xA;                                     ,[PaymentPlan] [nvarchar](100) NOT NULL DEFAULT(N'Uds')&#xA;                                     ,[PaidInFull] [varchar](3) NOT NULL DEFAULT(N'Uds')&#xA;                                     ,[MultiCar_Discount] [varchar](3) NOT NULL DEFAULT('Uds')&#xA;                                     ,[EFT] [varchar](3) NOT NULL DEFAULT('Uds')&#xA;                                     ,[EFTType] [varchar](15) NOT NULL DEFAULT('Uds')&#xA;                                     ,[PayInFull_Discount] [varchar](3) NOT NULL DEFAULT('Uds')&#xA;                                     ,[AccidentAndViolationFree_Discount] [varchar](3) NOT NULL DEFAULT('Uds')&#xA;                                     ,[UnacceptableRisk_Surcharge] [varchar](3) NOT NULL DEFAULT('Uds')&#xA;                                     ,[RatingVersion] [varchar](166) NOT NULL DEFAULT('Uds')&#xA;                                     ,[BI_Limits] [varchar](15) NOT NULL DEFAULT('Uds')&#xA;                                     ,[PD_Limits] [varchar](7) NOT NULL DEFAULT('Uds')&#xA;                                     ,[MED_Limits] [varchar](7) NOT NULL DEFAULT('Uds')&#xA;                                     ,[UMBI_Limits] [varchar](15) NOT NULL DEFAULT('Uds')&#xA;                                     ,[UMPD_Limits] [varchar](7) NOT NULL DEFAULT('Uds')&#xA;                                     ,[HasClaims] [varchar](9) NOT NULL DEFAULT('Uds')&#xA;                                     ,[HasLapse] [varchar](3) NOT NULL DEFAULT('Uds')&#xA;                                     ,[MaxLapseLength] [varchar](14) NOT NULL DEFAULT('Uds')&#xA;                                     ,[LapseCount] [int] NOT NULL DEFAULT(0)&#xA;                                     ,[ExcludeFromPeriods] [int] NOT NULL DEFAULT(0)&#xA;                                     ,[BK_ProgramID] [int] NOT NULL DEFAULT(- 1)&#xA;                                     ,[EffectiveUnderwritingTier] [varchar](MAX) NOT NULL DEFAULT('Uds')&#xA;                                     ,[TripleDeductibleBuyBackOption] [varchar](3) NOT NULL DEFAULT('Uds')&#xA;                                     ,[EconomyPackageOption] [varchar](3) NOT NULL DEFAULT('Uds')&#xA;                                     ,[CompZipTerritory] [varchar](MAX) NOT NULL DEFAULT('Uds')&#xA;                                     ,[ZipTerritory] [varchar](MAX) NOT NULL DEFAULT('Uds')&#xA;                                     ,[Renewal_Discount] [varchar](6) NOT NULL DEFAULT('Uds')&#xA;                                     ,[Merit_Surcharge] [varchar](6) NOT NULL DEFAULT('Uds')&#xA;                                     ,[EarlySigning_Discount] [varchar](6) NOT NULL DEFAULT('Uds')&#xA;                                     ,[FirstResponder_Discount] [varchar](6) NOT NULL DEFAULT('Uds')&#xA;                                     ,[IsMultiPolicy] [varchar](6) NOT NULL DEFAULT('Uds')&#xA;                                     ,[HouseholdMemberDrivers] [varchar](6) NOT NULL DEFAULT('Uds')&#xA;                                     ,[ExcludedUnlicensedDrivers] [varchar](6) NOT NULL DEFAULT('Uds')&#xA;                                     ,[ExcludedLicensedDrivers] [varchar](6) NOT NULL DEFAULT('Uds')&#xA;                                     ,[MaybeFirstResponder_Discount] [varchar](6) NOT NULL DEFAULT('Uds')&#xA;                                     ,[PropertyDamageDropDown_Discount] [varchar](6) NOT NULL DEFAULT('Uds')&#xA;                                     ,[PreferredPolicy_Discount] [varchar](6) NOT NULL DEFAULT('Uds')&#xA;                                     ,[DiscountEDoc_Discount] [varchar](6) NOT NULL DEFAULT('Uds')&#xA;                                     ,[IsRoadsideMembershipEnrolled] [varchar](6) NOT NULL DEFAULT('Uds')&#xA;                                     ,[SafeDrivingLevel] [varchar](6) NOT NULL DEFAULT('Uds')&#xA;                                     ,[CreditTier] [varchar](6) NOT NULL DEFAULT('Uds')&#xA;                                     ,[EFTDiscount] [varchar](3) NOT NULL DEFAULT('Uds')&#xA;                                     ,[OnlineQuoteDiscount] [varchar](3) NOT NULL DEFAULT('Uds')&#xA;                                     ,[ResponsibleDriverDiscount] [varchar](3) NOT NULL DEFAULT('Uds')&#xA;                                     ,[AdvanceQuoteDiscount] [varchar](3) NOT NULL DEFAULT('Uds')&#xA;                                     ,[SafeDrivingDiscount] [varchar](3) NOT NULL DEFAULT('Uds')&#xA;                                     ,[ExcessVehicleDiscount] [varchar](3) NOT NULL DEFAULT('Uds')&#xA;                                     ,[SafeDrivingDiscountByTerm] [varchar](3) NOT NULL DEFAULT('Uds')&#xA;                                      ,[PermissiveUseEndorsement] [varchar](3) NOT NULL DEFAULT('Uds')&#xA;                                      ,[Completed] [varchar](3) NOT NULL DEFAULT('Uds')&#xA;                                      ,[PolicyCreated] [varchar](3) NOT NULL DEFAULT('Uds')&#xA;                                      ,[CampaignName] [varchar](50) NULL DEFAULT('Uds')&#xA;                                      ,[CampaignType] [varchar](200) NULL DEFAULT('Uds')&#xA;                                      ,[LeadSource] [varchar](200) NULL DEFAULT('Uds')&#xA;                                      ,[LeadSourceType] [varchar](100) NULL DEFAULT('Uds')&#xA;                                      ,[Origin] [varchar](50) NOT NULL DEFAULT('Uds')&#xA;                                      ,[ValidationStatus] [varchar](50) NOT NULL DEFAULT('Uds')                                  &#xA;                                     ) ON [PRIMARY];&#xA;                                  &#xA;                                    INSERT INTO [DataMart].[dimPolicy] DEFAULT VALUES;       &#xA;                                &#xA;                                    CREATE TABLE [DataMart].[dimEndorsement](&#xA;                                     [SK_EndorsementID] [int] NOT NULL,&#xA;                                     [BK_EndorsementID] [int] NOT NULL,&#xA;                                     [EndorsementType] [varchar](50) NOT NULL,&#xA;                                     [EndorsementTypeID] [int] NOT NULL,&#xA;                                     [IsFuture] [smallint] NOT NULL,&#xA;                                     [IsVoid] [smallint] NOT NULL&#xA;                                    ) ON [PRIMARY]         &#xA;                                &#xA;                                    INSERT INTO [DataMart].[dimEndorsement](SK_EndorsementID, BK_EndorsementID, EndorsementType, EndorsementTypeID, IsFuture, IsVoid)&#xA;                                    VALUES(-1, -1, 'Unknown', 0, 0, 0);                                &#xA;                                                                   &#xA;                                    CREATE TABLE [DataMart].[dimVehicle](&#xA;                                     [SK_VehicleID] [int] NOT NULL,&#xA;                                     [BK_EndorsementID] [int] NULL,&#xA;                                     [BK_EndorsementVehicleID] [int] NULL,&#xA;                                     [BK_EndorsementPolicyTermID] [int] NULL,&#xA;                                     [BK_DriverID] [int] NULL,&#xA;                                     [BK_VehicleID] [int] NOT NULL,&#xA;                                     [BK_PolicyTermID] [int] NULL,&#xA;                                     [VehicleYear] [varchar](4) NULL,&#xA;                                     [VehicleMake] [varchar](50) NULL,&#xA;                                     [VehicleModel] [varchar](50) NULL,&#xA;                                     [VehicleAge] [varchar](7) NULL,&#xA;                                     [BodyType] [varchar](50) NULL,&#xA;                                     [VIN] [varchar](50) NULL,&#xA;                                     [UsageType] [varchar](50) NULL,&#xA;                                     [CostNew] [varchar](25) NULL,&#xA;                                     [CostNew_OrderBy] [smallint] NULL,&#xA;                                     [ISOSymbol] [varchar](3) NULL,&#xA;                                     [OneWayMiles] [varchar](25) NULL,&#xA;                                     [OneWayMiles_OrderBy] [smallint] NULL,&#xA;                                     [OdometerMileage] [varchar](20) NOT NULL,&#xA;                                     [OdometerMileage_OrderBy] [smallint] NULL,&#xA;                                     [AnnualMileage] [varchar](25) NULL,&#xA;                                     [AnnualMileage_OrderBy] [smallint] NULL,&#xA;                                     [AnnualMileageCode2] [varchar](18) NOT NULL,&#xA;                                     [AntiTheftDevice] [varchar](3) NOT NULL,&#xA;                                     [AntiTheftDeviceType] [varchar](7) NOT NULL,&#xA;                                     [Restrain] [varchar](15) NOT NULL,&#xA;                                     [DaytimeRunningLights] [varchar](3) NOT NULL,&#xA;                                     [ABSInstalled] [varchar](3) NOT NULL,&#xA;                                     [Performance] [varchar](14) NOT NULL,&#xA;                                     [Salvaged] [varchar](3) NOT NULL,&#xA;                                     [Cylinders] [varchar](3) NULL,&#xA;                                     [Garaged] [varchar](3) NOT NULL,&#xA;                                     [GarageZip] [nvarchar](50) NULL,&#xA;                                     [GarageCounty] [varchar](50) NULL,&#xA;                                     [COLL_Deductible] [varchar](4) NOT NULL,&#xA;                                     [COMP_Deductible] [varchar](4) NOT NULL,&#xA;                                     [COMGL_Deductible] [varchar](4) NOT NULL,&#xA;                                     [RapaCompSymbol] [varchar](3) NULL,&#xA;                                     [RapaCollSymbol] [varchar](3) NULL,&#xA;                                     [BIPDLiabilitySymbol] [varchar](3) NULL,&#xA;                                     [Zone] [varchar](3) NOT NULL,&#xA;                                     [AnnualMileageActual] [varchar](6) NULL,&#xA;                                     [DisablingDevice] [varchar](50) NULL,&#xA;                                     [VinEtching] [varchar](6) NULL,&#xA;                                     [IsVan] [varchar](6) NULL,&#xA;                                     [IsPickup] [varchar](6) NULL,&#xA;                                     [IsLeased] [varchar](6) NULL,&#xA;                                     [IsNeedInspection] [varchar](6) NULL,&#xA;                                     [ElectronicStabilityControl] [varchar](6) NULL,&#xA;                                     [IsVerified] [varchar](6) NULL,&#xA;                                     [LessorLiability] [varchar](6) NULL&#xA;                                    ) ON [PRIMARY]  &#xA;                                &#xA;                                   INSERT INTO [DataMart].[dimVehicle]&#xA;                                   ([SK_VehicleID]&#xA;                                   ,[BK_EndorsementID]&#xA;                                   ,[BK_EndorsementVehicleID]&#xA;                                   ,[BK_EndorsementPolicyTermID]&#xA;                                   ,[BK_DriverID]&#xA;                                   ,[BK_VehicleID]&#xA;                                   ,[BK_PolicyTermID]&#xA;                                   ,[VehicleYear]&#xA;                                   ,[VehicleMake]&#xA;                                   ,[VehicleModel]&#xA;                                   ,[VehicleAge]&#xA;                                   ,[BodyType]&#xA;                                   ,[VIN]&#xA;                                   ,[UsageType]&#xA;                                   ,[CostNew]&#xA;                                   ,[CostNew_OrderBy]&#xA;                                   ,[ISOSymbol]&#xA;                                   ,[OneWayMiles]&#xA;                                   ,[OneWayMiles_OrderBy]&#xA;                                   ,[OdometerMileage]&#xA;                                   ,[OdometerMileage_OrderBy]&#xA;                                   ,[AnnualMileage]&#xA;                                   ,[AnnualMileage_OrderBy]&#xA;                                   ,[AnnualMileageCode2]&#xA;                                   ,[AntiTheftDevice]&#xA;                                   ,[AntiTheftDeviceType]&#xA;                                   ,[Restrain]&#xA;                                   ,[DaytimeRunningLights]&#xA;                                   ,[ABSInstalled]&#xA;                                   ,[Performance]&#xA;                                   ,[Salvaged]&#xA;                                   ,[Cylinders]&#xA;                                   ,[Garaged]&#xA;                                   ,[GarageZip]&#xA;                                   ,[GarageCounty]&#xA;                                   ,[COLL_Deductible]&#xA;                                   ,[COMP_Deductible]&#xA;                                   ,[COMGL_Deductible]&#xA;                                   ,[RapaCompSymbol]&#xA;                                   ,[RapaCollSymbol]&#xA;                                   ,[BIPDLiabilitySymbol]&#xA;                                   ,[Zone]           &#xA;                                   ,[AnnualMileageActual]&#xA;                                   ,[DisablingDevice]&#xA;                                   ,[VinEtching]&#xA;                                   ,[IsVan]&#xA;                                   ,[IsPickup]&#xA;                                   ,[IsLeased]&#xA;                                   ,[IsNeedInspection]&#xA;                                   ,[ElectronicStabilityControl]&#xA;                                   ,[IsVerified]&#xA;                                   ,[LessorLiability]           &#xA;                                   )&#xA;                             VALUES&#xA;                                   (-1--&lt;SK_VehicleID, int,&gt;&#xA;                                   ,-1--&lt;BK_EndorsementID, int,&gt;&#xA;                                   ,-1--&lt;BK_EndorsementVehicleID, int,&gt;&#xA;                                   ,-1--&lt;BK_EndorsementPolicyTermID, int,&gt;&#xA;                                   ,-1--&lt;BK_DriverID, int,&gt;&#xA;                                   ,-1--&lt;BK_VehicleID, int,&gt;&#xA;                                   ,-1--&lt;BK_PolicyTermID, int,&gt;&#xA;                                   ,'Uds'--&lt;VehicleYear, varchar(3),&gt;&#xA;                                   ,'Uds'--&lt;VehicleMake, varchar(50),&gt;&#xA;                                   ,'Uds'--&lt;VehicleModel, varchar(50),&gt;&#xA;                                   ,'Uds'--&lt;VehicleAge, varchar(7),&gt;&#xA;                                   ,'Uds'--&lt;BodyType, varchar(50),&gt;&#xA;                                   ,'Uds'--&lt;VIN, varchar(50),&gt;&#xA;                                   ,'Uds'--&lt;UsageType, varchar(50),&gt;&#xA;                                   ,'Uds'--&lt;CostNew, varchar(20),&gt;&#xA;                                   ,0--&lt;CostNew_OrderBy, smallint,&gt;&#xA;                                   ,'Uds'--&lt;ISOSymbol, varchar(3),&gt;&#xA;                                   ,'Uds'--&lt;OneWayMiles, varchar(9),&gt;&#xA;                                   ,0--&lt;OneWayMiles_OrderBy, smallint,&gt;&#xA;                                   ,'Uds'--&lt;OdometerMileage, varchar(20),&gt;&#xA;                                   ,0--&lt;OdometerMileage_OrderBy, smallint,&gt;&#xA;                                   ,'Uds'--&lt;AnnualMileage, varchar(18),&gt;&#xA;                                   ,0--&lt;AnnualMileage_OrderBy, smallint,&gt;&#xA;                                   ,'Uds'--&lt;AnnualMileageCode2, varchar(18),&gt;&#xA;                                   ,'Uds'--&lt;AntiTheftDevice, varchar(3),&gt;&#xA;                                   ,'Uds'--&lt;AntiTheftDeviceType, varchar(7),&gt;&#xA;                                   ,'Uds'--&lt;Restrain, varchar(15),&gt;&#xA;                                   ,'Uds'--&lt;DaytimeRunningLights, varchar(3),&gt;&#xA;                                   ,'Uds'--&lt;ABSInstalled, varchar(3),&gt;&#xA;                                   ,'Uds'--&lt;Performance, varchar(12),&gt;&#xA;                                   ,'Uds'--&lt;Salvaged, varchar(3),&gt;&#xA;                                   ,'Uds'--&lt;Cylinders, varchar(3),&gt;&#xA;                                   ,'Uds'--&lt;Garaged, varchar(3),&gt;&#xA;                                   ,'Uds'--&lt;GarageZip, nvarchar(50),&gt;&#xA;                                   ,'Uds'--&lt;GarageCounty, varchar(50),&gt;&#xA;                                   ,'Uds'--&lt;COLL_Deductible, varchar(4),&gt;&#xA;                                   ,'Uds'--&lt;COMP_Deductible, varchar(4),&gt;&#xA;                                   ,'Uds'--&lt;COMGL_Deductible, varchar(4),&gt;&#xA;                                   ,'Uds'--&lt;RapaCompSymbol, varchar(3),&gt;&#xA;                                   ,'Uds'--&lt;RapaCollSymbol, varchar(3),&gt;&#xA;                                   ,'Uds'--&lt;BIPDLiabilitySymbol, varchar(3),&gt;&#xA;                                   ,'Uds'--&lt;Zone, varchar(3),&gt;&#xA;                                   ,'Uds'--&lt;AnnualMileageActual, varchar(6),&gt;&#xA;                                   ,'Uds'--&lt;[DisablingDevice] varchar(6),&gt;&#xA;                                   ,'Uds'--&lt;[VinEtching] varchar(6),&gt;&#xA;                                   ,'Uds'--&lt;[IsVan] varchar(6),&gt;&#xA;                                   ,'Uds'--&lt;[IsPickup] varchar(6),&gt;&#xA;                                   ,'Uds'--&lt;[IsLeased] varchar(6),&gt;&#xA;                                   ,'Uds'--&lt;[IsNeedInspection] varchar(6),&gt;&#xA;                                   ,'Uds'--&lt;[ElectronicStabilityControl] varchar(6),&gt;&#xA;                                   ,'Uds'--&lt;[IsVerified] varchar(6),&gt;&#xA;                                   ,'Uds'--&lt;[LessorLiability] varchar(6),&gt;)&#xA;            )&#xA;&#xA;                                           &#xA;                                  CREATE TABLE [DataMart].[dimLienholder](&#xA;                                   [SK_LienholderID] [int] IDENTITY(1,1) NOT NULL,&#xA;                                   [Lienholder] [nvarchar](120) NOT NULL,&#xA;                                   [State] [varchar](50) NOT NULL &#xA;&#xA;                                  ) ON [PRIMARY]&#xA;                               &#xA;                                  SET IDENTITY_INSERT [DataMart].[dimLienholder] ON &#xA;                          INSERT INTO [DataMart].[dimLienholder](SK_LienholderID, Lienholder, State) VALUES(-1, 'Uds', 'Uds')&#xA;                          SET IDENTITY_INSERT [DataMart].[dimLienholder] OFF&#xA;                               &#xA;                             &#xA;                                  CREATE TABLE [DataMart].[factlessVehicleLienholder](&#xA;                                   [SK_VehicleID] [int] NOT NULL,&#xA;                                   [SK_LienholderID] [int] NOT NULL&#xA;                                  ) ON [PRIMARY] WITH (DATA_COMPRESSION = PAGE)         &#xA;&#xA;   &#xA;                              &#xA;                            CREATE TABLE [DataMart].[dimDriver](&#xA;                             [SK_DriverID] [int] NOT NULL,&#xA;                             [BK_EndorsementID] [int] NOT NULL,&#xA;                             [BK_EndorsementPolicyTermID] [int] NOT NULL,&#xA;                              [BK_EndorsementPopulationID] [int] NOT NULL,&#xA;                             [BK_DriverID] [int] NOT NULL,&#xA;                             [BK_PolicyTermID] [int] NOT NULL,&#xA;                             [LastName] [nvarchar](150) NULL,&#xA;                             [MiddleName] [nvarchar](150) NULL,&#xA;                             [FirstName] [nvarchar](150) NULL,&#xA;                             [DriverType] [varchar](8) NOT NULL,&#xA;                             [Sex] [varchar](7) NULL,&#xA;                             [MaritalStatus] [varchar](50) NULL,&#xA;                             [RelationToInsured] [varchar](50) NULL,&#xA;                             [Age] [varchar](7) NULL,&#xA;                             [AgeGroup] [varchar](7) NULL,&#xA;                             [YearsLicensedUS] [varchar](6) NULL,&#xA;                             [YearsLicensedForeign] [varchar](6) NULL,&#xA;                             [GoodDriver] [varchar](6) NULL,&#xA;                             [GoodStudent] [varchar](6) NULL,&#xA;                             [MatureDriver] [varchar](6) NULL,&#xA;                             [AlcoholEducationalProgram] [varchar](6) NULL,&#xA;                             [EmploymentCategory] [nvarchar](150) NULL,&#xA;                             [EmploymentSubcategory] [nvarchar](50) NULL,&#xA;                             [RequiresSR22] [varchar](6) NULL,&#xA;                             [HomeOwner] [nvarchar](50) NULL,&#xA;                             [PriorBILimit] [nvarchar](50) NULL,&#xA;                             [InternationallyLicensed] [varchar](6) NULL,&#xA;                             [EmploymentStatus] [varchar](50) NULL,&#xA;                             [LicenseStatus] [varchar](50) NULL,&#xA;                             [LicenseState] [varchar](50) NULL,&#xA;                             [SurchargePoints] [varchar](6) NULL,&#xA;                             [StudentAtSchool_Discount] [varchar](6) NULL,&#xA;                             [CreditScore] [varchar](6) NULL,&#xA;                             [CreditScoreGroup] [varchar](8) NULL,&#xA;                             [CreditScoreGroupOrderBy] [varchar](8) NULL,&#xA;                             [AccidentPreventionCourse_Discount] [varchar](6) NULL,&#xA;                             [InexperiencedDriver_Surcharge] [varchar](6) NULL,&#xA;                             [HasPersonalLicense] [varchar](6) NULL,&#xA;                             [DistantStudent] [varchar](6) NULL,&#xA;                             [TeenSafe] [varchar](6) NULL,&#xA;                             [FirstResponder_Discount] [varchar](6) NULL,&#xA;                             [ExtendedNonOwned] [varchar](6) NULL,&#xA;                             [ExtendedNonOwnedLawEnforcement] [varchar](6) NULL,&#xA;                             [FR44Filling] [varchar](6) NULL,&#xA;                             [CalculatedPriorDaysLapse] [varchar](6) NULL,&#xA;                             [CalculatedPriorDaysLapseGroup] [varchar](8) NULL,&#xA;                             [CalculatedPriorDaysLapseGroupOrderBy] [varchar](8) NULL,&#xA;                             [MvrObtainedWithoutLicense] [varchar](6) NULL,&#xA;                             [IsCoinsured] [varchar](6) NULL,&#xA;                             [MaybeTeenSafe] [varchar](6) NULL,&#xA;                             [MaybeFirstResponder] [varchar](6) NULL,&#xA;                             [MinorChild_Discount] [varchar](6) NULL,&#xA;                             [OccasionalOperator_Discount] [varchar](6) NULL&#xA;                            ) ON [PRIMARY]      &#xA;&#xA;            -- Add undefined driver&#xA;            INSERT INTO [DataMart].[dimDriver] (&#xA;             SK_DriverID,         &#xA;             BK_EndorsementID,&#xA;             BK_EndorsementPolicyTermID,&#xA;                      BK_EndorsementPopulationID,&#xA;             BK_DriverID,&#xA;             BK_PolicyTermID,&#xA;             LastName,&#xA;             MiddleName,&#xA;             FirstName,&#xA;             DriverType,&#xA;             Sex,&#xA;             MaritalStatus,&#xA;             RelationToInsured,&#xA;             Age,&#xA;             AgeGroup,&#xA;             YearsLicensedUS,&#xA;             YearsLicensedForeign,&#xA;             GoodDriver,&#xA;             GoodStudent,&#xA;             MatureDriver,&#xA;             AlcoholEducationalProgram,&#xA;             EmploymentCategory,&#xA;             EmploymentSubcategory,&#xA;             RequiresSR22,&#xA;             HomeOwner,&#xA;             PriorBILimit,&#xA;             InternationallyLicensed,&#xA;             EmploymentStatus,&#xA;             LicenseStatus,&#xA;             LicenseState,&#xA;             SurchargePoints,&#xA;                     StudentAtSchool_Discount,&#xA;                     CreditScore,&#xA;                     CreditScoreGroup,&#xA;                     CreditScoreGroupOrderBy,&#xA;                     AccidentPreventionCourse_Discount,&#xA;                     InexperiencedDriver_Surcharge,&#xA;                     HasPersonalLicense,&#xA;                     DistantStudent,&#xA;                     TeenSafe,&#xA;                     FirstResponder_Discount,&#xA;                     ExtendedNonOwned,&#xA;                     ExtendedNonOwnedLawEnforcement,&#xA;                     FR44Filling,&#xA;                     CalculatedPriorDaysLapse,&#xA;                     CalculatedPriorDaysLapseGroup,&#xA;                     CalculatedPriorDaysLapseGroupOrderBy,&#xA;                     MvrObtainedWithoutLicense,&#xA;                     IsCoinsured,&#xA;                     MaybeTeenSafe,&#xA;                     MaybeFirstResponder,&#xA;                     MinorChild_Discount,&#xA;                     OccasionalOperator_Discount                                                      &#xA;            ) VALUES ( &#xA;             /* SK_DriverID - int */ -1,         &#xA;             /* BK_EndorsementID - int */ -1,&#xA;             /* BK_EndorsementPolicyTermID - int */ -1,&#xA;                      /* BK_EndorsementPopulationID - int */ -1,&#xA;             /* BK_DriverID - int */ -1,&#xA;             /* BK_PolicyTermID - int */ -1,&#xA;             /* LastName - nvarchar(150) */ N'Uds',&#xA;             /* MiddleName - nvarchar(150) */ N'Uds',&#xA;             /* FirstName - nvarchar(150) */ N'Uds',&#xA;             /* DriverType - varchar(8) */ 'Uds',&#xA;             /* Sex - varchar(7) */ 'Uds',&#xA;             /* MaritalStatus - varchar(50) */ 'Uds',&#xA;             /* RelationToInsured - varchar(50) */ 'Uds',&#xA;             /* Age - varchar(7) */ 'Uds',&#xA;             /* AgeGroup - varchar(7) */ 'Uds',&#xA;             /* YearsLicensedUS - varchar(6) */ 'Uds',&#xA;             /* YearsLicensedForeign - varchar(6) */ 'Uds',&#xA;             /* GoodDriver - varchar(6) */ 'Uds',&#xA;             /* GoodStudent - varchar(6) */ 'Uds',&#xA;             /* MatureDriver - varchar(6) */ 'Uds',&#xA;             /* AlcoholEducationalProgram - varchar(6) */ 'Uds',&#xA;             /* EmploymentCategory - nvarchar(150) */ N'Uds',&#xA;             /* EmploymentSubcategory - nvarchar(50) */ N'Uds',&#xA;             /* RequiresSR22 - varchar(6) */ 'Uds',&#xA;             /* HomeOwner - nvarchar(50) */ N'Uds',&#xA;             /* PriorBILimit - nvarchar(50) */ N'Uds',&#xA;             /* InternationallyLicensed - varchar(6) */ 'Uds',&#xA;             /* EmploymentStatus - varchar(50) */ 'Uds',&#xA;             /* LicenseStatus - varchar(50) */ 'Uds',&#xA;             /* LicenseState - varchar(50) */ 'Uds' ,&#xA;             /* SurchargePoints - varchar(50) */ 'Uds',&#xA;                       /* StudentAtSchool_Discount - varchar (6)*/ 'Uds',&#xA;                       /* CreditScore - varchar (6)*/ 'Uds',&#xA;                       /* CreditScoreGroup - varchar (8)*/ 'Uds',&#xA;                       /* CreditScoreGroupOrderBy - varchar (8)*/ 'Uds',&#xA;                       /* AccidentPreventionCourse_Discount - varchar (6)*/ 'Uds',&#xA;                       /* InexperiencedDriver_Surcharge - varchar (6)*/ 'Uds',&#xA;                       /* HasPersonalLicense - varchar (6)*/ 'Uds',&#xA;                       /* DistantStudent - varchar (6)*/ 'Uds',&#xA;                       /* TeenSafe - varchar (6)*/ 'Uds',&#xA;                       /* FirstResponder_Discount - varchar (6)*/ 'Uds',&#xA;                       /* ExtendedNonOwned - varchar (6)*/ 'Uds',&#xA;                       /* ExtendedNonOwnedLawEnforcement - varchar (6)*/ 'Uds',&#xA;                       /* FR44Filling - varchar (6)*/ 'Uds',&#xA;                       /* CalculatedPriorDaysLapse - varchar (6)*/ 'Uds',&#xA;                       /* CalculatedPriorDaysLapseGroup - varchar (8)*/ 'Uds',&#xA;                       /* CalculatedPriorDaysLapseGroupOrderBy - varchar (8)*/ 'Uds',&#xA;                       /* MvrObtainedWithoutLicense - varchar (6)*/ 'Uds',&#xA;                       /* IsCoinsured - varchar (6)*/ 'Uds',&#xA;                       /* MaybeTeenSafe - varchar (6)*/ 'Uds',&#xA;                       /* MaybeFirstResponder - varchar (6)*/ 'Uds',&#xA;                       /* MinorChild_Discount - varchar (6)*/ 'Uds',&#xA;                       /* OccasionalOperator_Discount - varchar (6)*/ 'Uds'                                    &#xA;                      )&#xA;&#xA;            -- Add excess driver&#xA;            INSERT INTO [DataMart].[dimDriver] (&#xA;             SK_DriverID,         &#xA;             BK_EndorsementID,&#xA;             BK_EndorsementPolicyTermID,&#xA;                      BK_EndorsementPopulationID,&#xA;             BK_DriverID,&#xA;             BK_PolicyTermID,&#xA;             LastName,&#xA;             MiddleName,&#xA;             FirstName,&#xA;             DriverType,&#xA;             Sex,&#xA;             MaritalStatus,&#xA;             RelationToInsured,&#xA;             Age,&#xA;             AgeGroup,&#xA;             YearsLicensedUS,&#xA;             YearsLicensedForeign,&#xA;             GoodDriver,&#xA;             GoodStudent,&#xA;             MatureDriver,&#xA;             AlcoholEducationalProgram,&#xA;             EmploymentCategory,&#xA;             EmploymentSubcategory,&#xA;             RequiresSR22,&#xA;             HomeOwner,&#xA;             PriorBILimit,&#xA;             InternationallyLicensed,&#xA;             EmploymentStatus,&#xA;             LicenseStatus,&#xA;             LicenseState,&#xA;             SurchargePoints,&#xA;                     StudentAtSchool_Discount,&#xA;                     CreditScore,&#xA;                     CreditScoreGroup,&#xA;                     CreditScoreGroupOrderBy,&#xA;                     AccidentPreventionCourse_Discount,&#xA;                     InexperiencedDriver_Surcharge,&#xA;                     HasPersonalLicense,&#xA;                     DistantStudent,&#xA;                     TeenSafe,&#xA;                     FirstResponder_Discount,&#xA;                     ExtendedNonOwned,&#xA;                     ExtendedNonOwnedLawEnforcement,&#xA;                     FR44Filling,&#xA;                     CalculatedPriorDaysLapse,&#xA;                     CalculatedPriorDaysLapseGroup,&#xA;                     CalculatedPriorDaysLapseGroupOrderBy,&#xA;                     MvrObtainedWithoutLicense,&#xA;                     IsCoinsured,&#xA;                     MaybeTeenSafe,&#xA;                     MaybeFirstResponder,&#xA;                     MinorChild_Discount,&#xA;                     OccasionalOperator_Discount                                    &#xA;            ) VALUES ( &#xA;             /* SK_DriverID - int */ -2,         &#xA;             /* BK_EndorsementID - int */ -1,&#xA;             /* BK_EndorsementPolicyTermID - int */ -1,&#xA;                      /* BK_EndorsementPopulationID - int */ -1,&#xA;             /* BK_DriverID - int */ -1,&#xA;             /* BK_PolicyTermID - int */ -1,&#xA;             /* LastName - nvarchar(150) */ N'Excess',&#xA;             /* MiddleName - nvarchar(150) */ N'Excess',&#xA;             /* FirstName - nvarchar(150) */ N'Excess',&#xA;             /* DriverType - varchar(8) */ 'Excess',&#xA;             /* Sex - varchar(7) */ 'Excess',&#xA;             /* MaritalStatus - varchar(50) */ 'Excess',&#xA;             /* RelationToInsured - varchar(50) */ 'Excess',&#xA;             /* Age - varchar(7) */ 'Excess',&#xA;             /* AgeGroup - varchar(7) */ 'Excess',&#xA;             /* YearsLicensedUS - varchar(6) */ 'Excess',&#xA;             /* YearsLicensedForeign - varchar(6) */ 'Excess',&#xA;             /* GoodDriver - varchar(6) */ 'Excess',&#xA;             /* GoodStudent - varchar(6) */ 'Excess',&#xA;             /* MatureDriver - varchar(6) */ 'Excess',&#xA;             /* AlcoholEducationalProgram - varchar(6) */ 'Excess',&#xA;             /* EmploymentCategory - nvarchar(150) */ N'Excess',&#xA;             /* EmploymentSubcategory - nvarchar(50) */ N'Excess',&#xA;             /* RequiresSR22 - varchar(6) */ 'Excess',&#xA;             /* HomeOwner - nvarchar(50) */ N'Excess',&#xA;             /* PriorBILimit - nvarchar(50) */ N'Excess',&#xA;             /* InternationallyLicensed - varchar(6) */ 'Excess',&#xA;             /* EmploymentStatus - varchar(50) */ 'Excess',&#xA;             /* LicenseStatus - varchar(50) */ 'Excess',&#xA;             /* LicenseState - varchar(50) */ 'Excess',&#xA;             /* SurchargePoints - varchar(50) */ 'Excess',&#xA;                     /* StudentAtSchool_Discount - varchar (6)*/ 'Excess',&#xA;                     /* CreditScore - varchar (6)*/ 'Excess',&#xA;                     /* CreditScoreGroup - varchar (8)*/ 'Excess',&#xA;                     /* CreditScoreGroupOrderBy - varchar (8)*/ 'Excess',&#xA;                     /* AccidentPreventionCourse_Discount - varchar (6)*/ 'Excess',&#xA;                     /* InexperiencedDriver_Surcharge - varchar (6)*/ 'Excess',&#xA;                     /* HasPersonalLicense - varchar (6)*/ 'Excess',&#xA;                     /* DistantStudent - varchar (6)*/ 'Excess',&#xA;                     /* TeenSafe - varchar (6)*/ 'Excess',&#xA;                     /* FirstResponder_Discount - varchar (6)*/ 'Excess',&#xA;                     /* ExtendedNonOwned - varchar (6)*/ 'Excess',&#xA;                     /* ExtendedNonOwnedLawEnforcement - varchar (6)*/ 'Excess',&#xA;                     /* FR44Filling - varchar (6)*/ 'Excess',&#xA;                     /* CalculatedPriorDaysLapse - varchar (6)*/ 'Excess',&#xA;                     /* CalculatedPriorDaysLapseGroup - varchar (8)*/ 'Excess',&#xA;                     /* CalculatedPriorDaysLapseGroupOrderBy - varchar (8)*/ 'Excess',&#xA;                     /* MvrObtainedWithoutLicense - varchar (6)*/ 'Excess',&#xA;                     /* IsCoinsured - varchar (6)*/ 'Excess',&#xA;                     /* MaybeTeenSafe - varchar (6)*/ 'Excess',&#xA;                     /* MaybeFirstResponder - varchar (6)*/ 'Excess',&#xA;                     /* MinorChild_Discount - varchar (6)*/ 'Excess',&#xA;                     /* OccasionalOperator_Discount - varchar (6)*/ 'Excess'                  &#xA;                      )&#xA;&#xA;                &#xA;                    CREATE TABLE [DataMart].[dimDrivers](&#xA;                     [SK_DriversID] [int] NOT NULL&#xA;                    ) ON [PRIMARY]&#xA;                &#xA;                     CREATE TABLE [DataMart].[factlessDrivers](&#xA;                     [SK_DriversID] [int] NOT NULL,&#xA;                     [SK_DriverID] [int] NOT NULL,&#xA;                     [BK_DriverID] [int] NOT NULL&#xA;                    ) ON [PRIMARY]&#xA;                    &#xA;                &#xA;                    CREATE TABLE [DataMart].[factEndorsementTransaction](&#xA;                     [SK_EndorsementTransactionDateID] [int] NOT NULL,&#xA;                     [SK_EndorsementTransactionMonthID] [int] NOT NULL,&#xA;                     [SK_VehicleID] [int] NOT NULL,&#xA;                     [SK_PolicyID] [int] NOT NULL,&#xA;                     [SK_RatedDriverID] [int] NOT NULL,&#xA;                     [SK_DriversID] [int] NOT NULL,&#xA;                     [SK_CoverageID] [int] NOT NULL,&#xA;                     [SK_EndorsementID] [int] NOT NULL,&#xA;                     [SK_ProducerID] [int] NOT NULL,&#xA;                     [BK_TriggeringEndorsementID] [int] NOT NULL,&#xA;                     [SK_CarrierID] [int] NOT NULL,&#xA;                     [SK_ProgramID] [int] NOT NULL&#xA;                    ) ON [PRIMARY]                &#xA;        &#xA;                    CREATE TABLE [DataMart].[factInforcePremiumTransactional](&#xA;                     [SK_TransactionDateID] [int] NOT NULL,&#xA;                     [SK_VehicleID] [int] NOT NULL,&#xA;                     [SK_PolicyID] [int] NOT NULL,&#xA;                     [SK_RatedDriverID] [int] NOT NULL,&#xA;                     [SK_DriversID] [int] NOT NULL,&#xA;                     [SK_CoverageID] [int] NOT NULL,&#xA;                     [SK_EndorsementID] [int] NOT NULL,&#xA;                     [SK_ProducerID] [int] NOT NULL,&#xA;                     [BK_TriggeringEndorsementID] [int] NULL,&#xA;                     [SK_CarrierID] [int] NULL,&#xA;                     [SK_ProgramID] [int] NOT NULL,&#xA;                     [SK_ProgramGroupID] [int] NOT NULL,&#xA;                     [BK_PolicyTermID] [int] NULL,&#xA;                     [SK_AgencyOfficeID] [int] NOT NULL,&#xA;                     [WP] [decimal](38, 12) NULL,&#xA;                     [WE] [int] NULL&#xA;                    ) ON [PRIMARY]&#xA;        &#xA;                    CREATE TABLE [DataMart].[factPIFVIFDIFTransaction](&#xA;                     [SK_TransactionDateID] [int] NULL,&#xA;                     [SK_VehicleID] [int] NULL,&#xA;                     [SK_PolicyID] [int] NULL,&#xA;                     [SK_RatedDriverID] [int] NULL,&#xA;                     [SK_CoverageID] [int] NULL,&#xA;                     [SK_EndorsementID] [int] NULL,&#xA;                     [SK_ProducerID] [int] NULL,&#xA;                     [SK_CarrierID] [int] NULL,&#xA;                     [BK_PolicyID] [int] NULL,&#xA;                     [BK_VehicleID] [int] NULL,&#xA;                     [BK_DriverID] [int] NULL,&#xA;                     [NoValidDriver] [int] NULL,&#xA;                     [SK_ProgramID] [int] NOT NULL,&#xA;                     [SK_ProgramGroupID] [int] NOT NULL,&#xA;                     [SK_AgencyOfficeID] [int] NULL&#xA;                    ) ON [PRIMARY]       &#xA;                &#xA;                    CREATE TABLE [DataMart].[factPremiumsTransactional](&#xA;                     [SK_TransactionDateID] [int] NULL,&#xA;                     [SK_VehicleID] [int] NULL,&#xA;                     [SK_PolicyID] [int] NULL,&#xA;                     [SK_RatedDriverID] [int] NULL,&#xA;                     [SK_DriversID] [int] NULL,&#xA;                     [SK_CoverageID] [int] NULL,&#xA;                     [SK_EndorsementID] [int] NULL,&#xA;                     [SK_ProducerID] [int] NULL,&#xA;                     [BK_TriggeringEndorsementID] [int] NULL,&#xA;                     [SK_CarrierID] [int] NULL,&#xA;                     [SK_ProgramID] [int] NOT NULL,&#xA;                     [SK_ProgramGroupID] [int] NOT NULL,&#xA;                     [BK_PolicyTermID] [int] NULL,&#xA;                     [SK_AgencyOfficeID] [int] NULL,&#xA;                     [EP] [decimal](38, 13) NULL,&#xA;                     [EE] [int] NULL,&#xA;                     [WP] [decimal](38, 12) NULL,&#xA;                     [WE] [int] NULL&#xA;                    ) ON [PRIMARY]                &#xA;                &#xA;                    CREATE TABLE [DataMart].[factPremiumChangingEndorsement](&#xA;                     [SK_TransactionDateID] [int] NOT NULL,&#xA;                     [BK_TriggeringEndorsementID] [int] NOT NULL,&#xA;                     [SK_CarrierID] [int] NOT NULL,&#xA;                     [EndorsementBusinessTypeID] [int] NOT NULL&#xA;                    ) ON [PRIMARY]        &#xA;                &#xA;                    CREATE TABLE [DataMart].[factPremiumsTransactionalMonthly](&#xA;                     [SK_TransactionMonthID] [int] NULL,&#xA;                     [SK_VehicleID] [int] NULL,&#xA;                     [SK_PolicyID] [int] NULL,&#xA;                     [SK_RatedDriverID] [int] NULL,&#xA;                     [SK_DriversID] [int] NULL,&#xA;                     [SK_CoverageID] [int] NULL,&#xA;                     [SK_EndorsementID] [int] NULL,&#xA;                     [SK_ProducerID] [int] NULL,&#xA;                     [BK_TriggeringEndorsementID] [int] NULL,&#xA;                     [SK_CarrierID] [int] NULL,&#xA;                     [SK_ProgramID] [int] NOT NULL,&#xA;                     [BK_PolicyTermID] [int] NULL,&#xA;                     [SK_AgencyOfficeID] [int] NULL,&#xA;                     [EP] [decimal](38, 13) NULL,&#xA;                     [EE] [int] NULL,&#xA;                     [WP] [decimal](38, 12) NULL,&#xA;                     [WE] [int] NULL&#xA;                    ) ON [PRIMARY]                &#xA;                &#xA;                    CREATE TABLE [DataMart].[factSoFarPremiumTransactionalMonthly](&#xA;                     [SK_TransactionMonthID] [int] NOT NULL,&#xA;                     [SK_VehicleID] [int] NULL,&#xA;                     [SK_PolicyID] [int] NULL,&#xA;                     [SK_RatedDriverID] [int] NULL,&#xA;                     [SK_DriversID] [int] NULL,&#xA;                     [SK_CoverageID] [int] NULL,&#xA;                     [SK_ProducerID] [int] NULL,&#xA;                     [SK_CarrierID] [int] NULL,&#xA;                     [SK_ProgramID] [int] NULL,&#xA;                     [SoFarWP] [decimal](38, 12) NOT NULL,&#xA;                     [SoFarEP] [decimal](38, 13) NOT NULL&#xA;                    )     &#xA;                         &#xA;                    CREATE TABLE [DataMart].[factInforcePremiumTransactionalMonthly](&#xA;                     [SK_TransactionMonthID] [int] NULL,&#xA;                     [SK_VehicleID] [int] NULL,&#xA;                     [SK_PolicyID] [int] NULL,&#xA;                     [SK_RatedDriverID] [int] NULL,&#xA;                     [SK_DriversID] [int] NULL,&#xA;                     [SK_CoverageID] [int] NULL,&#xA;                     [SK_ProducerID] [int] NULL,&#xA;                     [SK_CarrierID] [int] NULL,&#xA;                     [SK_ProgramID] [int] NULL,&#xA;                     [InforceWP] [decimal](38, 12) NOT NULL                                         &#xA;                    )    &#xA;                &#xA;                    CREATE TABLE [DataMart].[factPIFVIFDIFTransactionMonthly](&#xA;                     [SK_TransactionMonthID] [int] NULL,&#xA;                     [SK_VehicleID] [int] NULL,&#xA;                     [SK_PolicyID] [int] NULL,&#xA;                     [SK_RatedDriverID] [int] NOT NULL,&#xA;                     [SK_CoverageID] [int] NULL,&#xA;                     [SK_EndorsementID] [int] NULL,&#xA;                     [SK_ProducerID] [int] NULL,&#xA;                     [SK_CarrierID] [int] NULL,&#xA;                     [BK_PolicyID] [int] NULL,&#xA;                     [BK_VehicleID] [int] NULL,&#xA;                     [BK_DriverID] [int] NULL,&#xA;                     [NoValidDriver] [int] NULL,&#xA;                     [SK_ProgramID] [int] NOT NULL,&#xA;                     [SK_ProgramGroupID] [int] NOT NULL,&#xA;                     [SK_AgencyOfficeID] [int] NOT NULL&#xA;                    ) ON [PRIMARY]      &#xA;                         &#xA;                                    CREATE TABLE [DataMart].[dimQuoteDriver](&#xA;                                     [SK_DriverID] [int] NOT NULL CONSTRAINT DF_SK_QuoteDriverID DEFAULT NEXT VALUE FOR dbo.DriverSequence,&#xA;                                     [BK_EndorsementID] [int] NOT NULL,&#xA;                                     [BK_QuotePolicyTermId] [int] NOT NULL,&#xA;                                     [BK_DriverID] [int] NOT NULL,&#xA;                                     [BK_PolicyTermID] [int] NOT NULL,&#xA;                                     [LastName] [nvarchar](MAX) NULL,&#xA;                                     [MiddleName] [nvarchar](MAX) NULL,&#xA;                                     [FirstName] [nvarchar](MAX) NULL,&#xA;                                     [DriverType] [varchar](8) NULL,&#xA;                                     [Sex] [varchar](7) NULL,&#xA;                                     [MaritalStatus] [nvarchar](MAX) NULL,&#xA;                                     [RelationToInsured] [varchar](50) NULL,&#xA;                                     [Age] [varchar](7) NULL,&#xA;                                     [AgeGroup] [varchar](7) NULL,&#xA;                                     [YearsLicensedUS] [varchar](6) NULL,&#xA;                                     [YearsLicensedForeign] [varchar](6) NULL,&#xA;                                     [GoodDriver] [varchar](6) NULL,&#xA;                                     [GoodStudent] [varchar](6) NULL,&#xA;                                     [MatureDriver] [varchar](6) NULL,&#xA;                                     [AlcoholEducationalProgram] [varchar](6) NULL,&#xA;                                     [EmploymentCategory] [nvarchar](150) NULL,&#xA;                                     [EmploymentSubcategory] [nvarchar](50) NULL,&#xA;                                     [RequiresSR22] [varchar](6) NULL,&#xA;                                     [HomeOwner] [nvarchar](MAX) NULL,&#xA;                                     [PriorBILimit] [nvarchar](MAX) NULL,&#xA;                                     [InternationallyLicensed] [varchar](6) NULL,&#xA;                                     [EmploymentStatus] [varchar](50) NULL,&#xA;                                     [LicenseStatus] [varchar](50) NULL,&#xA;                                     [LicenseState] [varchar](50) NULL,&#xA;                                     [SurchargePoints] [varchar](6) NULL,&#xA;                                     [StudentAtSchool_Discount] [varchar](6) NULL,&#xA;                                     [CreditScore] [varchar](6) NULL,&#xA;                                     [CreditScoreGroup] [varchar](20) NULL,&#xA;                                     [CreditScoreGroupOrderBy] [varchar](8) NULL,&#xA;                                     [AccidentPreventionCourse_Discount] [varchar](6) NULL,&#xA;                                     [InexperiencedDriver_Surcharge] [varchar](6) NULL,&#xA;                                     [HasPersonalLicense] [varchar](6) NULL,&#xA;                                     [DistantStudent] [varchar](6) NULL,&#xA;                                     [TeenSafe] [varchar](6) NULL,&#xA;                                     [FirstResponder_Discount] [varchar](6) NULL,&#xA;                                     [ExtendedNonOwned] [varchar](6) NULL,&#xA;                                     [ExtendedNonOwnedLawEnforcement] [varchar](6) NULL,&#xA;                                     [FR44Filling] [varchar](6) NULL,&#xA;                                     [CalculatedPriorDaysLapse] [varchar](6) NULL,&#xA;                                     [CalculatedPriorDaysLapseGroup] [varchar](20) NULL,&#xA;                                     [CalculatedPriorDaysLapseGroupOrderBy] [varchar](8) NULL,&#xA;                                     [MvrObtainedWithoutLicense] [varchar](6) NULL,&#xA;                                     [IsCoinsured] [varchar](6) NULL,&#xA;                                     [MaybeTeenSafe] [varchar](6) NULL,&#xA;                                     [MaybeFirstResponder] [varchar](6) NULL,&#xA;                                     [MinorChild_Discount] [varchar](6) NULL,&#xA;                                     [OccasionalOperator_Discount] [varchar](6) NULL&#xA;                                    );                              &#xA;                                &#xA;                                &#xA;&#xA;                                &#xA;                           CREATE TABLE [DataMart].[dimQuoteVehicle](&#xA;                                     [SK_VehicleID] [int] NOT NULL CONSTRAINT DF_SK_QuoteVehicleID DEFAULT NEXT VALUE FOR dbo.VehicleSequence,&#xA;                                     [BK_EndorsementID] [int] NOT NULL,&#xA;                                     [BK_QuoteVehicleId] [int] NOT NULL,&#xA;                                     [BK_QuotePolicyTermId] [int] NOT NULL,&#xA;                                     [BK_DriverID] [int] NOT NULL,&#xA;                                     [BK_VehicleID] [int] NOT NULL,&#xA;                                     [BK_PolicyTermID] [int] NOT NULL,&#xA;                                     [VehicleYear] [varchar](4) NULL,&#xA;                                     [VehicleMake] [varchar](50) NULL,&#xA;                                     [VehicleModel] [varchar](50) NULL,&#xA;                                     [VehicleAge] [varchar](7) NULL,&#xA;                                     [BodyType] [varchar](50) NULL,&#xA;                                     [VIN] [nvarchar](MAX) NULL,&#xA;                                     [UsageType] [varchar](50) NULL,&#xA;                                     [CostNew] [varchar](20) NULL,&#xA;                                     [CostNew_OrderBy] [int] NOT NULL,&#xA;                                     [ISOSymbol] [varchar](3) NULL,&#xA;                                     [OneWayMiles] [varchar](20) NULL,&#xA;                                     [OneWayMiles_OrderBy] [int] NOT NULL,&#xA;                                     [OdometerMileage] [varchar](20) NULL,&#xA;                                     [OdometerMileage_OrderBy] [int] NOT NULL,&#xA;                                     [AnnualMileage] [varchar](20) NULL,&#xA;                                     [AnnualMileage_OrderBy] [int] NOT NULL,&#xA;                                     [AnnualMileageCode2] [varchar](18) NULL,&#xA;                                     [AntiTheftDevice] [varchar](3) NULL,&#xA;                                     [AntiTheftDeviceType] [nvarchar](MAX) NULL,&#xA;                                     [Restrain] [varchar](15) NULL,&#xA;                                     [DaytimeRunningLights] [varchar](3) NULL,&#xA;                                     [ABSInstalled] [varchar](3) NULL,&#xA;                                     [Performance] [varchar](14) NULL,&#xA;                                     [Salvaged] [varchar](3) NULL,&#xA;                                     [Cylinders] [varchar](3) NULL,&#xA;                                     [Garaged] [varchar](3) NULL,&#xA;                                     [GarageZip] [varchar](5) NULL,&#xA;                                     [GarageCounty] [varchar](50) NULL,&#xA;                                     [COLL_Deductible] [varchar](4) NULL,&#xA;                                     [COMP_Deductible] [varchar](4) NULL,&#xA;                                     [COMGL_Deductible] [varchar](4) NULL,&#xA;                                     [RapaCompSymbol] [nvarchar](MAX) NULL,&#xA;                                     [RapaCollSymbol] [nvarchar](MAX) NULL,&#xA;                                     [BIPDLiabilitySymbol] [varchar](3) NULL,&#xA;                                     [Zone] [varchar](3) NULL,&#xA;                                     [AnnualMileageActual] [varchar](6) NULL,&#xA;                                     [DisablingDevice] [varchar](50) NULL,&#xA;                                     [VinEtching] [varchar](6) NULL,&#xA;                                     [IsVan] [varchar](6) NULL,&#xA;                                     [IsPickup] [varchar](6) NULL,&#xA;                                     [IsLeased] [varchar](6) NULL,&#xA;                                     [IsNeedInspection] [varchar](6) NULL,&#xA;                                     [ElectronicStabilityControl] [varchar](6) NULL,&#xA;                                     [IsVerified] [varchar](6) NULL,&#xA;                                     [LessorLiability] [varchar](6) NULL&#xA;                                    ) ON [PRIMARY]    &#xA;                                &#xA;                                    CREATE TABLE [DataMart].[dimQuotePolicyTerm](&#xA;                                     [SK_PolicyId] [int] NOT NULL CONSTRAINT DF_SK_QuotePolicyTermID DEFAULT NEXT VALUE FOR dbo.PolicyTermSequence,&#xA;                                     [BK_EndorsementID] [int] NOT NULL,&#xA;                                     [BK_PolicyId] [int] NOT NULL,&#xA;                                     [BK_QuoteID] [int] NOT NULL,&#xA;                                     [BK_RenewalPolicyTermID] [int] NOT NULL,&#xA;                                     [BK_ProducerID] [int] NULL,&#xA;                                     [BK_PolicyNumber] [varchar](10) NULL,&#xA;                                     [BK_ProgramGroupId] [int] NOT NULL,&#xA;                                     [EffectiveDate] [datetime2](7) NULL,&#xA;                                     [ExpirationDate] [datetime2](7) NULL,&#xA;                                     [Product] [nvarchar](max) NULL,&#xA;                                     [ProductState] [varchar](50) NULL,&#xA;                                     [IsRenewal] [varchar](3) NULL,&#xA;                                     [IsNewBusiness] [varchar](3) NULL,&#xA;                                     [PolicyTermDays] [varchar](7) NULL,&#xA;                                     [PolicyTermInMonths] [varchar](7) NULL,&#xA;                                     [Carrier] [nvarchar](max) NULL,&#xA;                                     [PolicyZip] [varchar](5) NULL,&#xA;                                     [LineOfBusiness] [varchar](40) NULL,&#xA;                                     [PaymentPlan] [nvarchar](100) NULL,&#xA;                                     [PaidInFull] [varchar](3) NULL,&#xA;                                     [MultiCar_Discount] [varchar](3) NULL,&#xA;                                     [EFT] [varchar](3) NULL,&#xA;                                     [EFTType] [varchar](50) NULL,&#xA;                                     [PayInFull_Discount] [varchar](3) NULL,&#xA;                                     [AccidentAndViolationFree_Discount] [varchar](3) NULL,&#xA;                                     [UnacceptableRisk_Surcharge] [varchar](3) NULL,&#xA;                                     [RatingVersion] [varchar](166) NOT NULL,&#xA;                                     [BI_Limits] [varchar](15) NULL,&#xA;                                     [PD_Limits] [varchar](7) NULL,&#xA;                                     [MED_Limits] [varchar](7) NULL,&#xA;                                     [UMBI_Limits] [varchar](15) NULL,&#xA;                                     [UMPD_Limits] [varchar](7) NULL,&#xA;                                     [HasClaims] [varchar](10) NULL,&#xA;                                     [HasLapse] [varchar](3) NULL,&#xA;                                     [MaxLapseLength] [varchar](10) NULL,&#xA;                                     [LapseCount] [int] NOT NULL,&#xA;                                     [BK_ProgramID] [int] NOT NULL,&#xA;                                     [EffectiveUnderwritingTier] [varchar](MAX) NULL,&#xA;                                     [TripleDeductibleBuyBackOption] [varchar](3) NULL,&#xA;                                     [EconomyPackageOption] [varchar](3) NULL,&#xA;                                     [CompZipTerritory] [varchar](MAX) NULL,&#xA;                                     [ZipTerritory] [varchar](MAX) NULL,&#xA;                                     [Renewal_Discount] [varchar](3) NULL,&#xA;                                     [Merit_Surcharge] [varchar](3) NULL,&#xA;                                     [EarlySigning_Discount] [varchar](3) NULL,&#xA;                                     [FirstResponder_Discount] [varchar](3) NULL,&#xA;                                     [IsMultiPolicy] [varchar](3) NULL,&#xA;                                     [HouseholdMemberDrivers] [varchar](6) NULL,&#xA;                                     [ExcludedUnlicensedDrivers] [varchar](6) NULL,&#xA;                                     [ExcludedLicensedDrivers] [varchar](6) NULL,&#xA;                                     [MaybeFirstResponder_Discount] [varchar](3) NULL,&#xA;                                     [PropertyDamageDropDown_Discount] [varchar](3) NULL,&#xA;                                     [PreferredPolicy_Discount] [varchar](3) NULL,&#xA;                                     [DiscountEDoc_Discount] [varchar](3) NULL,&#xA;                                     [IsRoadsideMembershipEnrolled] [varchar](3) NULL,&#xA;                                     [SafeDrivingLevel] [varchar](6) NULL,&#xA;                                     [CreditTier] [varchar](6) NULL,&#xA;                                     [EFTDiscount] [varchar](3) NULL,&#xA;                                     [OnlineQuoteDiscount] [varchar](3) NULL,&#xA;                                     [ResponsibleDriverDiscount] [varchar](3) NULL,&#xA;                                     [AdvanceQuoteDiscount] [varchar](3) NULL,&#xA;                                     [SafeDrivingDiscount] [varchar](3) NULL,&#xA;                                     [ExcessVehicleDiscount] [varchar](3) NULL,&#xA;                                     [SafeDrivingDiscountByTerm] [varchar](3) NULL,&#xA;                                     [PermissiveUseEndorsement] [varchar](3) NULL,&#xA;                                     [Completed] [varchar](3) NOT NULL,&#xA;                                     [PolicyCreated] [varchar](3) NOT NULL,&#xA;                                     [CampaignName] [varchar](50) NULL,&#xA;                                     [CampaignType] [varchar](200) NULL,&#xA;                                     [LeadSource] [varchar](200) NULL,&#xA;                                     [LeadSourceType] [varchar](100) NULL,&#xA;                                     [Origin] [varchar](50) NOT NULL,&#xA;                                     [ValidationStatus] [varchar](50) NOT NULL,&#xA;                                     [IsFromFSC] [varchar](3) NOT NULL &#xA;                                    ) &#xA;                                    &#xA;                                    CREATE TABLE [DataMart].[dimPaymentTransaction](&#xA;                                     [SK_PaymentTransactionID] [int] IDENTITY(1,1) NOT NULL,&#xA;                                     [BK_PaymentTransactionID] [int] NOT NULL,&#xA;                                     [PaymentVoided] [varchar](3) NOT NULL,&#xA;                                     [PaymentType] [varchar](50) NULL,&#xA;                                     [BK_PolicyTermID] [int] NOT NULL&#xA;                                    ) ON [PRIMARY]  &#xA;                                    &#xA;                                    CREATE TABLE [DataMart].[factPaymentTransaction](&#xA;                                     [SK_TransactionDateID] [int] NULL,&#xA;                                     [SK_TransactionMonthID] [int] NULL,&#xA;                                     [SK_PaymentTransactionID] [int] NULL,&#xA;                                     [SK_PolicyID] [int] NULL,&#xA;                                     [SK_EndorsementID] [int] NULL,&#xA;                                     [SK_ProducerID] [int] NOT NULL,&#xA;                                     [SK_CarrierID] [int] NULL,&#xA;                                     [SK_ProgramID] [int] NOT NULL,&#xA;                                     [BK_PaymentTransactionID] [int] NOT NULL,&#xA;                                     [Amount] [decimal](28, 14) NULL&#xA;                                    ) ON [PRIMARY]                     &#xA;                                    &#xA;                                    CREATE TABLE [DataMart].[factCashAppliedTransaction](&#xA;                                     [SK_AppliedDateID] [int] NULL,&#xA;                                     [SK_AppliedMonthID] [int] NULL,&#xA;                                     [SK_PolicyID] [int] NULL,&#xA;                                     [SK_EndorsementID] [int] NULL,&#xA;                                     [SK_ProducerID] [int] NOT NULL,&#xA;                                     [SK_CarrierID] [int] NOT NULL,&#xA;                                     [SK_ProgramID] [int] NOT NULL,&#xA;                                     [Premium] [decimal](38, 14) NOT NULL,&#xA;                                     [UndefinedFee] [decimal](38, 14) NOT NULL,&#xA;                                     [UserDefinedFee] [decimal](38, 14) NOT NULL,&#xA;                                     [InstallmentFee] [decimal](38, 14) NOT NULL,&#xA;                                     [EndorsementFee] [decimal](38, 14) NOT NULL,&#xA;                                     [ShortPaymentFee] [decimal](38, 14) NOT NULL,&#xA;                                     [CancellationFee] [decimal](38, 14) NOT NULL,&#xA;                                     [ReinstatementFee] [decimal](38, 14) NOT NULL,&#xA;                                     [SR22ReinstatementFee] [decimal](38, 14) NOT NULL,&#xA;                                     [SR22Fee] [decimal](38, 14) NOT NULL,&#xA;                                     [ReturnItemFee] [decimal](38, 14) NOT NULL,&#xA;                                     [FraudFee] [decimal](38, 14) NOT NULL,&#xA;                                     [PolicyFee] [decimal](38, 14) NOT NULL,&#xA;                                     [InstallmentEFTFee] [decimal](38, 14) NOT NULL,&#xA;                                     [ReinstatementGoodDriverFee] [decimal](38, 14) NOT NULL,&#xA;                                     [LateFee] [decimal](38, 14) NOT NULL,&#xA;                                     [MVRFee] [decimal](38, 14) NOT NULL,&#xA;                                     [ReturnMailFee] [decimal](38, 14) NOT NULL,&#xA;                                     [RegistrationFee] [decimal](38, 14) NOT NULL,&#xA;                                     [RewriteFee] [decimal](38, 14) NOT NULL,&#xA;                                     [InstallmentRCCPFee] [decimal](38, 14) NOT NULL,&#xA;                                     [MotorVehicleLawEnforcementFee] [decimal](38, 14) NOT NULL,&#xA;                                     [PolicyFeeGoodDriver] [decimal](38, 14) NOT NULL,&#xA;                                     [NSDFee] [decimal](38, 14) NOT NULL,&#xA;                                     [FR44Fee] [decimal](38, 14) NOT NULL,&#xA;                                     [FR44ReinstatementFee] [decimal](38, 14) NOT NULL,&#xA;                                     [MGAFee] [decimal](38, 14) NOT NULL,&#xA;                                     [FloridaHurricaneCatastropheFee] [decimal](38, 14) NOT NULL,&#xA;                                     [ServiceFee] [decimal](38, 14) NOT NULL,&#xA;                                     [RoadsideMembershipFee] [decimal](38, 14) NOT NULL,&#xA;                                     [EFTReturnItemFee] [decimal](38, 14) NOT NULL,&#xA;                                     [DeclinedPaymentFee] [decimal](38, 14) NOT NULL,&#xA;                                     [CancellationFeeforNonPayment] [decimal](38, 14) NOT NULL,&#xA;                                     [EndorsementFeeforGoodDriver] [decimal](38, 14) NOT NULL,&#xA;                                     [PaperDocumentFee] [decimal](38, 14) NOT NULL,&#xA;                                     [RenewalPolicyFee] [decimal](38, 14) NOT NULL,&#xA;                                     [RenewalPolicyFeeforCaliforniaGoodDriver] [decimal](38, 14) NOT NULL,&#xA;                                     [EFTReturnItemFeeforGoodDriver] [decimal](38, 14) NOT NULL,&#xA;                                     [DeclinedPaymentFeeforGoodDriver] [decimal](38, 14) NOT NULL,&#xA;                                     [CheckReturnItemFeeforGoodDriver] [decimal](38, 14) NOT NULL,&#xA;                                     [CheckReturnItemFee] [decimal](38, 14) NOT NULL&#xA;                                    ) ON [PRIMARY]            &#xA;                                    &#xA;                                    CREATE TABLE [DataMart].[factQuotePremium](&#xA;                                     [SK_CoverageID] [int] NULL,&#xA;                                     [SK_TransactionDateID] [int] NULL,&#xA;                                     [SK_TransactionMonthID] [int] NULL,&#xA;                                     [SK_PolicyId] [int] NULL,&#xA;                                     [SK_VehicleID] [int] NULL,&#xA;                                     [SK_CarrierID] [int] NOT NULL,&#xA;                                     [SK_ProgramId] [int] NULL,&#xA;                                     [BK_QuoteID] [int] NOT NULL,&#xA;                                     [SK_RatedDriverID] [int] NULL,&#xA;                                     [SK_ProducerID] [int] NOT NULL,&#xA;                                     [Premium] [money] NOT NULL,&#xA;                                     [DriverCount] [int] NOT NULL,&#xA;                                     [Completed] [int] NOT NULL,&#xA;                                     [PolicyCreated] [int] NOT NULL&#xA;                                    ) ON [PRIMARY]                                    &#xA;&#xA;                    CREATE TABLE [DataMart].[dimSecurityUser](&#xA;                     [SK_UserID] [int] IDENTITY(1,1) NOT NULL,&#xA;                     [BK_UserID] [int] NOT NULL,&#xA;                     [FirstName] [nvarchar](50) NOT NULL,&#xA;                     [LastName] [nvarchar](50) NOT NULL,&#xA;                     CONSTRAINT [PK_SK_UserID] PRIMARY KEY CLUSTERED &#xA;                    (&#xA;                     [SK_UserID] ASC&#xA;                    )&#xA;                    ) ON [PRIMARY]&#xA;&#xA;                    SET IDENTITY_INSERT  [DataMart].[dimSecurityUser] ON&#xA;                    INSERT INTO [DataMart].[dimSecurityUser] (SK_UserID, BK_UserID, FirstName, LastName) VALUES(-1, -1, 'N/A', 'N/A')&#xA;                    SET IDENTITY_INSERT  [DataMart].[dimSecurityUser] OFF&#xA;                    &#xA;                                    --Staging&#xA;         CREATE CLUSTERED INDEX CLUST_IX_EndoID ON [Staging].[PolicyID] (BK_EndorsementID) WITH (DATA_COMPRESSION = PAGE)&#xA;&#xA;         ALTER TABLE [Staging].[EndorsementID] ADD CONSTRAINT  PK_SK_EndorsementID PRIMARY KEY  (SK_EndorsementID) WITH (DATA_COMPRESSION = PAGE)&#xA;         &#xA;                                    CREATE CLUSTERED INDEX IX_EndorsementPeriodID ON [Staging].[VehicleID](BK_EndorsementID) WITH (DATA_COMPRESSION = PAGE)       &#xA;         &#xA;                                    CREATE CLUSTERED INDEX IX_EndorsementPeriodID ON [Staging].[DriverID](BK_EndorsementID) WITH (DATA_COMPRESSION = PAGE) &#xA;&#xA;                                    CREATE CLUSTERED INDEX IX_EndorsementPeriodID ON [Staging].[DriversID](BK_EndorsementID) WITH (DATA_COMPRESSION = PAGE)                            &#xA;         &#xA;                                    CREATE CLUSTERED INDEX CLUST_IX_EDEED ON [Staging].[Periods](SK_EndorsementDateID, SK_EndorsementEndDateID) WITH (DATA_COMPRESSION = PAGE)&#xA;                                    &#xA;                                CREATE INDEX IX_QuoteVehicleCoverage_DriverID ON [Staging].[QuoteVehicleCoverage_DriverID](QuoteVehicleCoverageId) &#xA;                                  WITH ( DATA_COMPRESSION = PAGE )                                   &#xA;&#xA;         --DataMart&#xA;                  CREATE CLUSTERED INDEX QuotePremiumCLUST_IX ON [DataMart].[factQuotePremium](SK_TransactionDateId, SK_PolicyID) WITH (DATA_COMPRESSION = PAGE)                  &#xA;                  &#xA;         ALTER TABLE [DataMart].[dimEndorsement] ADD CONSTRAINT  PK_SK_EndorsementID PRIMARY KEY (SK_EndorsementID) WITH (DATA_COMPRESSION = PAGE)                                      &#xA;         &#xA;            ALTER TABLE [DataMart].[dimVehicle] ADD CONSTRAINT  PK_ID_Vehicle PRIMARY KEY (SK_VehicleID) WITH (DATA_COMPRESSION = PAGE)&#xA;                    &#xA;                    CREATE NONCLUSTERED INDEX [IX_dimVehicle_BK_EndorsementVehicleID] ON [DataMart].[dimVehicle]                    &#xA;                      (&#xA;                        [BK_EndorsementVehicleID] ASC&#xA;                      )&#xA;                      WITH ( DATA_COMPRESSION = PAGE ) &#xA;        &#xA;                    ALTER TABLE [DataMart].[dimLienholder] ADD CONSTRAINT  PK_ID_Lienholder PRIMARY KEY  (SK_LienholderID) WITH (DATA_COMPRESSION = PAGE)                            &#xA;&#xA;                    ALTER TABLE [DataMart].[dimDriver] ADD CONSTRAINT  PK_SK_DriverID PRIMARY KEY (SK_DriverID) WITH (DATA_COMPRESSION = PAGE)&#xA;&#xA;                    CREATE INDEX IX_DIDEID ON [DataMart].[dimDriver](BK_EndorsementID, BK_DriverID) WITH (DATA_COMPRESSION = PAGE)&#xA;                    &#xA;                    ALTER TABLE [DataMart].[dimDrivers] ADD CONSTRAINT  PK_SK_DriversID PRIMARY KEY (SK_DriversID) WITH (DATA_COMPRESSION = PAGE)&#xA;     &#xA;                    ALTER TABLE DataMart.dimPolicy ADD CONSTRAINT PK_SK_PolicyID PRIMARY KEY (SK_PolicyID) WITH (DATA_COMPRESSION = PAGE)&#xA;                                &#xA;                    ALTER TABLE DataMart.dimQuotePolicyTerm ADD CONSTRAINT PK_SK_PolicyID_Quote PRIMARY KEY (SK_PolicyID) WITH (DATA_COMPRESSION = PAGE)                               &#xA;                      &#xA;                    ALTER TABLE [DataMart].[dimQuoteVehicle] ADD CONSTRAINT  PK_ID_QuoteVehicle PRIMARY KEY (SK_VehicleID) WITH (DATA_COMPRESSION = PAGE)&#xA;                &#xA;                    ALTER TABLE [DataMart].[dimQuoteDriver] ADD CONSTRAINT PK_SK_QuoteDriverID PRIMARY KEY (SK_DriverID) WITH (DATA_COMPRESSION = PAGE)     &#xA;                    &#xA;                    ALTER TABLE [DataMart].[dimPaymentTransaction] ADD CONSTRAINT  PK_SK_PaymentTransactionID PRIMARY KEY (SK_PaymentTransactionID) WITH (DATA_COMPRESSION = PAGE)&#xA;                         &#xA;                    ALTER TABLE [DataMart].[factPremiumChangingEndorsement] ADD CONSTRAINT [PK_factPremiumChangingEndorsement] &#xA;              PRIMARY KEY CLUSTERED ([BK_TriggeringEndorsementID], [SK_TransactionDateID]) WITH (DATA_COMPRESSION = PAGE) ON [PRIMARY]                       &#xA;&#xA;                    ALTER TABLE [DataMart].[factlessVehicleLienholder] ADD CONSTRAINT FK_factlessVehicleLienholder_SK_VehicleID FOREIGN KEY (SK_VehicleID)&#xA;                    REFERENCES [DataMart].[dimVehicle](SK_VehicleID)&#xA;        &#xA;                    ALTER TABLE [DataMart].[factlessVehicleLienholder] ADD CONSTRAINT FK_factlessVehicleLienholder_SK_LienholderID FOREIGN KEY (SK_LienholderID)&#xA;                    REFERENCES [DataMart].[dimLienholder](SK_LienholderID)    &#xA;                        &#xA;                    --) Create FKs for factlessDrivers table&#xA;                    ALTER TABLE [DataMart].[factlessDrivers] ADD CONSTRAINT FK_factlessDrivers_SK_DriverID FOREIGN KEY (SK_DriverID) REFERENCES [DataMart].[dimDriver](SK_DriverID)&#xA;                        &#xA;                    &#xA;                                " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                        </SQLTask:SqlTaskData>
                      </DTS:ObjectData>
                    </DTS:Executable>
                    <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{540A2004-176C-4EC8-84BC-2217B965E3D1}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL Create dimDate Table" DTS:refId="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Preparations for full update\SEQC Preparations for full update conditional\SQL Create dimDate Table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                      <DTS:ObjectData>
                        <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                  &#xA;                        CREATE TABLE [DataMart].[dimDate](&#xA;                        [SK_DateID] [int] NOT NULL&#xA;                        ,[SK_MonthID] [int] NOT NULL&#xA;                        , [Date] [datetime]  NOT NULL&#xA;                        , [Day] [char](2) NOT NULL&#xA;                        , [DaySuffix] [varchar](4) NOT NULL&#xA;                        , [DayOfWeek] [varchar](9) NOT NULL&#xA;                        , [DOWInMonth] [smallint] NOT NULL&#xA;                        , [DayOfYear] [smallint] NOT NULL&#xA;                        , [WeekOfYear] [smallint] NOT NULL&#xA;                        , [WeekOfMonth] [smallint] NOT NULL&#xA;                        , [Month] [char](2) NOT NULL&#xA;                        , [MonthName] [varchar](9) NOT NULL&#xA;                        , [Quarter] [smallint] NOT NULL&#xA;                        , [QuarterName] [varchar](6) NOT NULL&#xA;                        , [Year] [char](4) NOT NULL&#xA;                        , [StandardDate] [varchar](10) NULL&#xA;                        , [HolidayText] [varchar](50) NULL DEFAULT ''&#xA;                        CONSTRAINT [PK_dimDate] PRIMARY KEY CLUSTERED&#xA;                        (&#xA;                        [SK_DateID] ASC&#xA;                        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, DATA_COMPRESSION = PAGE) ON [PRIMARY]&#xA;                        ) ON [PRIMARY]&#xA;&#xA;                        --[DataMart].[dimDate] indexes---------------------------------------------------------------------------------------------&#xA;                        CREATE UNIQUE NONCLUSTERED INDEX [IDX_dimDate_Date] ON [DataMart].[dimDate]&#xA;                        (&#xA;                        [Date] ASC&#xA;                        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, DATA_COMPRESSION = PAGE) ON [PRIMARY]&#xA;&#xA;                        CREATE NONCLUSTERED INDEX [IDX_dimDate_Day] ON [DataMart].[dimDate]&#xA;                        (&#xA;                        [Day] ASC&#xA;                        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, DATA_COMPRESSION = PAGE) ON [PRIMARY]&#xA;&#xA;                        CREATE NONCLUSTERED INDEX [IDX_dimDate_DayOfWeek] ON [DataMart].[dimDate]&#xA;                        (&#xA;                        [DayOfWeek] ASC&#xA;                        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, DATA_COMPRESSION = PAGE) ON [PRIMARY]&#xA;&#xA;                        CREATE NONCLUSTERED INDEX [IDX_dimDate_DOWInMonth] ON [DataMart].[dimDate]&#xA;                        (&#xA;                        [DOWInMonth] ASC&#xA;                        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, DATA_COMPRESSION = PAGE) ON [PRIMARY]&#xA;&#xA;                        CREATE NONCLUSTERED INDEX [IDX_dimDate_DayOfYear] ON [DataMart].[dimDate]&#xA;                        (&#xA;                        [DayOfYear] ASC&#xA;                        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, DATA_COMPRESSION = PAGE) ON [PRIMARY]&#xA;&#xA;                        CREATE NONCLUSTERED INDEX [IDX_dimDate_WeekOfYear] ON [DataMart].[dimDate]&#xA;                        (&#xA;                        [WeekOfYear] ASC&#xA;                        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, DATA_COMPRESSION = PAGE) ON [PRIMARY]&#xA;&#xA;                        CREATE NONCLUSTERED INDEX [IDX_dimDate_WeekOfMonth] ON [DataMart].[dimDate]&#xA;                        (&#xA;                        [WeekOfMonth] ASC&#xA;                        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, DATA_COMPRESSION = PAGE) ON [PRIMARY]&#xA;&#xA;                        CREATE NONCLUSTERED INDEX [IDX_dimDate_Month] ON [DataMart].[dimDate]&#xA;                        (&#xA;                        [Month] ASC&#xA;                        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, DATA_COMPRESSION = PAGE) ON [PRIMARY]&#xA;&#xA;                        CREATE NONCLUSTERED INDEX [IDX_dimDate_MonthName] ON [DataMart].[dimDate]&#xA;                        (&#xA;                        [MonthName] ASC&#xA;                        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, DATA_COMPRESSION = PAGE) ON [PRIMARY]&#xA;&#xA;                        CREATE NONCLUSTERED INDEX [IDX_dimDate_Quarter] ON [DataMart].[dimDate]&#xA;                        (&#xA;                        [Quarter] ASC&#xA;                        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, DATA_COMPRESSION = PAGE) ON [PRIMARY]&#xA;&#xA;                        CREATE NONCLUSTERED INDEX [IDX_dimDate_QuarterName] ON [DataMart].[dimDate]&#xA;                        (&#xA;                        [QuarterName] ASC&#xA;                        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, DATA_COMPRESSION = PAGE) ON [PRIMARY]&#xA;&#xA;                        CREATE NONCLUSTERED INDEX [IDX_dimDate_Year] ON [DataMart].[dimDate]&#xA;                        (&#xA;                        [Year] ASC&#xA;                        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, DATA_COMPRESSION = PAGE) ON [PRIMARY]&#xA;&#xA;                        CREATE NONCLUSTERED INDEX [IDX_dim_Time_HolidayText] ON [DataMart].[dimDate]&#xA;                        (&#xA;                        [HolidayText] ASC&#xA;                        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, DATA_COMPRESSION = PAGE) ON [PRIMARY]&#xA;                              &#xA;                            &#xA;                                " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                        </SQLTask:SqlTaskData>
                      </DTS:ObjectData>
                    </DTS:Executable>
                    <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{3D5E189C-2E43-44DA-9EA9-FFD95658DE2F}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL Create dimMonth Table" DTS:refId="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Preparations for full update\SEQC Preparations for full update conditional\SQL Create dimMonth Table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                      <DTS:ObjectData>
                        <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                  &#xA;                                      CREATE TABLE [DataMart].[dimMonth](&#xA;                                       [SK_MonthID] [int] NOT NULL,&#xA;                                       [Month] [char](2) NOT NULL,&#xA;                                       [MonthName] [varchar](9) NOT NULL,&#xA;                                       [Quarter] [smallint] NOT NULL,&#xA;                                       [QuarterName] [varchar](6) NOT NULL,&#xA;                                       [Year] [char](4) NOT NULL,&#xA;                                       [StartDate] [datetime] NULL,&#xA;                                       [EndDate] [datetime] NULL&#xA;                                      ) ON [PRIMARY]&#xA;&#xA;                                      ALTER TABLE [DataMart].[dimMonth] ADD CONSTRAINT  PK_SK_MonthID PRIMARY KEY  (SK_MonthID) WITH (DATA_COMPRESSION = PAGE)&#xA;&#xA;                                      CREATE INDEX IX_StartDate_EndDate_ID_Month ON [DataMart].[dimMonth](StartDate, EndDate, SK_MonthID) WITH (DATA_COMPRESSION = PAGE)                             &#xA;                            &#xA;                                " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                        </SQLTask:SqlTaskData>
                      </DTS:ObjectData>
                    </DTS:Executable>
                  </DTS:Executables>
                  <DTS:PrecedenceConstraints>
                    <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{24536A79-D14A-4568-8616-CAA2E9D74174}" DTS:From="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Preparations for full update\SEQC Preparations for full update conditional\SQL Cleanup DB Full Update Only" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL Cleanup DB Full Update Only_To_SQL Create sequences" DTS:refId="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Preparations for full update\SEQC Preparations for full update conditional.PrecedenceConstraints[Constraint_SQL Cleanup DB Full Update Only_To_SQL Create sequences]" DTS:To="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Preparations for full update\SEQC Preparations for full update conditional\SQL Create sequences">
                    </DTS:PrecedenceConstraint>
                    <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{B68FB136-C88B-42C8-9B9D-152A78F15777}" DTS:From="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Preparations for full update\SEQC Preparations for full update conditional\SQL Create sequences" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL Create sequences_To_SQL Create Staging Tables" DTS:refId="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Preparations for full update\SEQC Preparations for full update conditional.PrecedenceConstraints[Constraint_SQL Create sequences_To_SQL Create Staging Tables]" DTS:To="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Preparations for full update\SEQC Preparations for full update conditional\SQL Create Staging Tables">
                    </DTS:PrecedenceConstraint>
                    <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{74B1D6FB-C838-4D0F-B1E7-F1FA3399BACC}" DTS:From="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Preparations for full update\SEQC Preparations for full update conditional\SQL Create Staging Tables" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL Create Staging Tables_To_SQL Create DataMart Tables" DTS:refId="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Preparations for full update\SEQC Preparations for full update conditional.PrecedenceConstraints[Constraint_SQL Create Staging Tables_To_SQL Create DataMart Tables]" DTS:To="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Preparations for full update\SEQC Preparations for full update conditional\SQL Create DataMart Tables">
                    </DTS:PrecedenceConstraint>
                    <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{56319311-01E0-497D-857C-2AD22A6D2541}" DTS:From="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Preparations for full update\SEQC Preparations for full update conditional\SQL Create DataMart Tables" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL Create DataMart Tables_To_SQL Create dimDate Table" DTS:refId="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Preparations for full update\SEQC Preparations for full update conditional.PrecedenceConstraints[Constraint_SQL Create DataMart Tables_To_SQL Create dimDate Table]" DTS:To="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Preparations for full update\SEQC Preparations for full update conditional\SQL Create dimDate Table">
                    </DTS:PrecedenceConstraint>
                    <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{BC818010-5FCB-429D-9096-7A665C1C0AD5}" DTS:From="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Preparations for full update\SEQC Preparations for full update conditional\SQL Create dimDate Table" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL Create dimDate Table_To_SQL Create dimMonth Table" DTS:refId="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Preparations for full update\SEQC Preparations for full update conditional.PrecedenceConstraints[Constraint_SQL Create dimDate Table_To_SQL Create dimMonth Table]" DTS:To="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Preparations for full update\SEQC Preparations for full update conditional\SQL Create dimMonth Table">
                    </DTS:PrecedenceConstraint>
                  </DTS:PrecedenceConstraints>
                </DTS:Executable>
              </DTS:Executables>
              <DTS:PrecedenceConstraints>
                <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{FE86E2CD-7F7C-44A1-A6A7-372BB9BF323B}" DTS:EvalOp="3" DTS:Expression="@[User::IsIncremental]==0" DTS:From="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Preparations for full update\SEQC fake container for full updates" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SEQC fake container for full updates_To_SEQC Preparations for full update conditional" DTS:refId="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Preparations for full update.PrecedenceConstraints[Constraint_SEQC fake container for full updates_To_SEQC Preparations for full update conditional]" DTS:To="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Preparations for full update\SEQC Preparations for full update conditional">
                </DTS:PrecedenceConstraint>
              </DTS:PrecedenceConstraints>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:PrecedenceConstraints>
            <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{2536A51D-21B1-4131-9FF8-872D70774141}" DTS:From="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Preparations for any updates" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SEQC Preparations for any updates_To_SEQC Read incremental parameters" DTS:refId="Package\SEQC Package Logic\SEQC Prepare Database.PrecedenceConstraints[Constraint_SEQC Preparations for any updates_To_SEQC Read incremental parameters]" DTS:To="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Read incremental parameters">
            </DTS:PrecedenceConstraint>
            <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{FF31C119-3600-476C-8BFB-7AFA4389D816}" DTS:From="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Read incremental parameters" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SEQC Read incremental parameters_To_SEQC Preparations for Ratemaking processing" DTS:refId="Package\SEQC Package Logic\SEQC Prepare Database.PrecedenceConstraints[Constraint_SEQC Read incremental parameters_To_SEQC Preparations for Ratemaking processing]" DTS:To="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Preparations for Ratemaking processing">
            </DTS:PrecedenceConstraint>
            <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{794D73F7-E909-4436-BACE-151A3E984CB4}" DTS:From="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Preparations for Ratemaking processing" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SEQC Preparations for Ratemaking processing_To_SEQC Preparations for full update" DTS:refId="Package\SEQC Package Logic\SEQC Prepare Database.PrecedenceConstraints[Constraint_SEQC Preparations for Ratemaking processing_To_SEQC Preparations for full update]" DTS:To="Package\SEQC Package Logic\SEQC Prepare Database\SEQC Preparations for full update">
            </DTS:PrecedenceConstraint>
          </DTS:PrecedenceConstraints>
        </DTS:Executable>
        <DTS:Executable DTS:CreationName="STOCK:SEQUENCE" DTS:DTSID="{4E78DA5B-9D63-4711-BACF-5E89FD18B039}" DTS:ExecutableType="STOCK:SEQUENCE" DTS:LocaleID="-1" DTS:ObjectName="SEQC Create facts and dimensions" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions">
          <DTS:Executables>
            <DTS:Executable DTS:CreationName="STOCK:SEQUENCE" DTS:DTSID="{4A870177-D165-46D1-AA13-48C09C14DEC9}" DTS:ExecutableType="STOCK:SEQUENCE" DTS:LocaleID="-1" DTS:ObjectName="SEQC Create dimensions" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions">
              <DTS:Executables>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{D729BECE-0BF8-4B31-B63C-855B6CC2F45F}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create dimDate" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create dimDate" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                                  DECLARE @IsIncremental INT = ?;&#xA;                                  DECLARE @UpdateDate DATETIME2 = ?;&#xA;&#xA;                                  --Populate Date dimension&#xA;                    &#xA;                                  CREATE TABLE #DateTable(&#xA;                                   [SK_DateID] [int] NOT NULL,&#xA;                                   [SK_MonthID] [int] NOT NULL,&#xA;                                   [Date] [datetime] NOT NULL,&#xA;                                   [Day] [char](2) NOT NULL,&#xA;                                   [DaySuffix] [varchar](4) NOT NULL,&#xA;                                   [DayOfWeek] [varchar](9) NOT NULL,&#xA;                                   [DOWInMonth] [smallint] NOT NULL,&#xA;                                   [DayOfYear] [smallint] NOT NULL,&#xA;                                   [WeekOfYear] [smallint] NOT NULL,&#xA;                                   [WeekOfMonth] [smallint] NOT NULL,&#xA;                                   [Month] [char](2) NOT NULL,&#xA;                                   [MonthName] [varchar](9) NOT NULL,&#xA;                                   [Quarter] [smallint] NOT NULL,&#xA;                                   [QuarterName] [varchar](6) NOT NULL,&#xA;                                   [Year] [char](4) NOT NULL,&#xA;                                   [StandardDate] [varchar](10) NULL,&#xA;                                   [HolidayText] [varchar](50) NULL,&#xA;                                   CONSTRAINT [PK_temp_dimDate] PRIMARY KEY CLUSTERED &#xA;                                  (&#xA;                                   [SK_DateID] ASC&#xA;                                  )&#xA;                                  ) &#xA;&#xA;                                  --IF YOU ARE USING THE YYYYMMDD format for the primary key then you need to comment out this line.&#xA;                                  --DBCC CHECKIDENT (dimDate, RESEED, 60000) --In case you need to add earlier dates later.&#xA;&#xA;                                  DECLARE @tmpDOW TABLE (DOW INT, Cntr INT)--Table for counting DOW occurance in a month&#xA;                                  INSERT INTO @tmpDOW(DOW, Cntr) VALUES(1,0)--Used in the loop below&#xA;                                  INSERT INTO @tmpDOW(DOW, Cntr) VALUES(2,0)&#xA;                                  INSERT INTO @tmpDOW(DOW, Cntr) VALUES(3,0)&#xA;                                  INSERT INTO @tmpDOW(DOW, Cntr) VALUES(4,0)&#xA;                                  INSERT INTO @tmpDOW(DOW, Cntr) VALUES(5,0)&#xA;                                  INSERT INTO @tmpDOW(DOW, Cntr) VALUES(6,0)&#xA;                                  INSERT INTO @tmpDOW(DOW, Cntr) VALUES(7,0)&#xA;&#xA;                                  DECLARE @StartDate datetime&#xA;                                  , @EndDate datetime&#xA;                                  , @Date datetime&#xA;                                  , @minPolicyPeriodDates datetime&#xA;                                  , @WDofMonth INT&#xA;                                  , @CurrentMonth INT&#xA;&#xA;                                  SELECT @minPolicyPeriodDates = min(PPDate) FROM&#xA;                                  (&#xA;                                   SELECT MIN(EndorsementPeriodStartDate) AS PPDate FROM [Extract].[P1_EndorsementPeriod]&#xA;                                   UNION&#xA;                                   SELECT MIN(EndorsementPeriodEndDate) AS PPDate FROM [Extract].[P1_EndorsementPeriod]&#xA;                                   UNION&#xA;                                   SELECT MIN(EffectiveDate) AS PPDate FROM [Extract].[P1_PolicyTerm]     &#xA;                                    UNION&#xA;                                   SELECT MIN(Created) AS PPDate FROM [Extract].[P1_Quote]&#xA;                                  ) AS a&#xA;&#xA;&#xA;                                  SET @StartDate = @minPolicyPeriodDates;     &#xA;            &#xA;&#xA;                                  SET @minPolicyPeriodDates = CAST(CAST(YEAR(@minPolicyPeriodDates) AS VARCHAR(4)) + '/' + CAST(MONTH(@minPolicyPeriodDates) AS VARCHAR(2)) + '/01' AS DATETIME)&#xA;        &#xA;                                  SELECT @EndDate = MAX(ed.EndDate)&#xA;                                  FROM&#xA;                                  ( &#xA;                                   SELECT MAX(PeriodActiveStartDate) AS EndDate &#xA;                                    FROM [Extract].[P1_Period] AS p &#xA;                                    LEFT JOIN [Extract].[P1_PolicyTerm] AS pt&#xA;                                     ON p.PolicyTermId = pt.PolicyTermID &#xA;                                    WHERE pt.PolicyTermID IS NOT NULL&#xA;                                   UNION&#xA;                                   SELECT GETDATE() AS EndDate&#xA;                                  ) as ed&#xA;                    &#xA;                                  SET @CurrentMonth = 1 --Counter used in loop below.&#xA;&#xA;                                  SELECT @Date = CAST(CAST(Year(@StartDate) AS VARCHAR(4)) + '-01-01' AS DateTime)&#xA;&#xA;                                  IF @IsIncremental = 1&#xA;                                  BEGIN&#xA;                                   SET @Date = CAST(@UpdateDate AS date);&#xA;                                  END&#xA;                                  ELSE&#xA;                                  BEGIN&#xA;                                   SELECT @Date = CAST(CAST(Year(@StartDate) AS VARCHAR(4)) + '-01-01' AS DateTime)&#xA;                                  END&#xA;&#xA;                                  print @Date&#xA;&#xA;                                  WHILE @Date &lt;= @EndDate&#xA;                                  BEGIN&#xA;&#xA;                                  IF DATEPART(MONTH,@Date) &lt;&gt; @CurrentMonth&#xA;                                  BEGIN&#xA;                                  SELECT @CurrentMonth = DATEPART(MONTH,@Date)&#xA;                                  UPDATE @tmpDOW SET Cntr = 0&#xA;                                  END&#xA;&#xA;                                  UPDATE @tmpDOW&#xA;                                  SET Cntr = Cntr + 1&#xA;                                  WHERE DOW = DATEPART(DW,@DATE)&#xA;&#xA;                                  SELECT @WDofMonth = Cntr&#xA;                                  FROM @tmpDOW&#xA;                                  WHERE DOW = DATEPART(DW,@DATE)&#xA;&#xA;                                  INSERT INTO #DateTable&#xA;                                  (&#xA;                                  [SK_DateID]--TO MAKE THE ID THE YYYYMMDD FORMAT UNCOMMENT THIS LINE... Comment for autoincrementing.&#xA;                                  ,[SK_MonthID]&#xA;                                  ,[Date]&#xA;                                  , [Day]&#xA;                                  , [DaySuffix]&#xA;                                  , [DayOfWeek]&#xA;                                  , [DOWInMonth]&#xA;                                  , [DayOfYear]&#xA;                                  , [WeekOfYear]&#xA;                                  , [WeekOfMonth]&#xA;                                  , [Month]&#xA;                                  , [MonthName]&#xA;                                  , [Quarter]&#xA;                                  , [QuarterName]&#xA;                                  , [Year]&#xA;                                  )&#xA;                                  SELECT CONVERT(VARCHAR,@Date,112), --TO MAKE THE ID THE YYYYMMDD FORMAT UNCOMMENT THIS LINE COMMENT FOR AUTOINCREMENT&#xA;                                  CAST(Convert(VARCHAR(6), @Date, 112) AS Int)&#xA;                                  ,@Date [Date]&#xA;                                  , DATEPART(DAY,@DATE) [Day]&#xA;                                  , CASE&#xA;                                  WHEN DATEPART(DAY,@DATE) IN (11,12,13) THEN CAST(DATEPART(DAY,@DATE) AS VARCHAR) + 'th'&#xA;                                  WHEN RIGHT(DATEPART(DAY,@DATE),1) = 1 THEN CAST(DATEPART(DAY,@DATE) AS VARCHAR) + 'st'&#xA;                                  WHEN RIGHT(DATEPART(DAY,@DATE),1) = 2 THEN CAST(DATEPART(DAY,@DATE) AS VARCHAR) + 'nd'&#xA;                                  WHEN RIGHT(DATEPART(DAY,@DATE),1) = 3 THEN CAST(DATEPART(DAY,@DATE) AS VARCHAR) + 'rd'&#xA;                                  ELSE CAST(DATEPART(DAY,@DATE) AS VARCHAR) + 'th'&#xA;                                  END AS [DaySuffix]&#xA;                                  , CASE DATEPART(DW, @DATE)&#xA;                                  WHEN 1 THEN 'Sunday'&#xA;                                  WHEN 2 THEN 'Monday'&#xA;                                  WHEN 3 THEN 'Tuesday'&#xA;                                  WHEN 4 THEN 'Wednesday'&#xA;                                  WHEN 5 THEN 'Thursday'&#xA;                                  WHEN 6 THEN 'Friday'&#xA;                                  WHEN 7 THEN 'Saturday'&#xA;                                  END AS [DayOfWeek]&#xA;                                  , @WDofMonth [DOWInMonth]--Occurance of this day in this month. If Third Monday then 3 and DOW would be Monday.&#xA;                                  , DATEPART(dy,@Date) [DayOfYear]--Day of the year. 0 - 365/366&#xA;                                  , DATEPART(ww,@Date) [WeekOfYear]--0-52/53&#xA;                                  , DATEPART(ww,@Date) + 1 -&#xA;                                  DATEPART(ww,CAST(DATEPART(mm,@Date) AS VARCHAR) + '/1/' + CAST(DATEPART(yy,@Date) AS VARCHAR)) [WeekOfMonth]&#xA;                                  , DATEPART(MONTH,@DATE) [Month]--To be converted with leading zero later.&#xA;                                  , DATENAME(MONTH,@DATE) [MonthName]&#xA;                                  , DATEPART(qq,@DATE) [Quarter]--Calendar quarter&#xA;                                  , CASE DATEPART(qq,@DATE)&#xA;                                  WHEN 1 THEN 'First'&#xA;                                  WHEN 2 THEN 'Second'&#xA;                                  WHEN 3 THEN 'Third'&#xA;                                  WHEN 4 THEN 'Fourth'&#xA;                                  END AS [QuarterName]&#xA;                                  , DATEPART(YEAR,@Date) [Year]&#xA;&#xA;                                  SELECT @Date = DATEADD(dd,1,@Date)&#xA;                                  END&#xA;&#xA;                                  --You can replace this code by editing the insert using my functions dbo.DBA_fnAddLeadingZeros&#xA;                                  UPDATE #DateTable&#xA;                                  SET [DAY] = '0' + [DAY]&#xA;                                  WHERE LEN([DAY]) = 1&#xA;&#xA;                                  UPDATE #DateTable&#xA;                                  SET [MONTH] = '0' + [MONTH]&#xA;                                  WHERE LEN([MONTH]) = 1&#xA;&#xA;                                  UPDATE #DateTable&#xA;                                  SET STANDARDDATE = [MONTH] + '/' + [DAY] + '/' + [YEAR]&#xA;&#xA;                                  --Add HOLIDAYS --------------------------------------------------------------------------------------------------------------&#xA;                                  --THANKSGIVING --------------------------------------------------------------------------------------------------------------&#xA;                                  --Fourth THURSDAY in November.&#xA;                                  UPDATE #DateTable&#xA;                                  SET HolidayText = 'Thanksgiving Day'&#xA;                                  WHERE [MONTH] = 11&#xA;                                  AND [DAYOFWEEK] = 'Thursday'&#xA;                                  AND [DOWInMonth] = 4&#xA;&#xA;&#xA;                                  --CHRISTMAS -------------------------------------------------------------------------------------------&#xA;                                  UPDATE #DateTable&#xA;                                  SET HolidayText = 'Christmas Day'&#xA;                                  WHERE [MONTH] = 12 AND [DAY] = 25&#xA;&#xA;                                  --4th of July ---------------------------------------------------------------------------------------------&#xA;                                  UPDATE #DateTable&#xA;                                  SET HolidayText = 'Independance Day'&#xA;                                  WHERE [MONTH] = 7 AND [DAY] = 4&#xA;&#xA;                                  -- New Years Day ---------------------------------------------------------------------------------------------&#xA;                                  UPDATE #DateTable&#xA;                                  SET HolidayText = 'New Year''s Day'&#xA;                                  WHERE [MONTH] = 1 AND [DAY] = 1&#xA;&#xA;                                  --Memorial Day ----------------------------------------------------------------------------------------&#xA;                                  --Last Monday in May&#xA;                                  UPDATE #DateTable&#xA;                                  SET HolidayText = 'Memorial Day'&#xA;                                  FROM #DateTable&#xA;                                  WHERE SK_DateID IN&#xA;                                  (&#xA;                                  SELECT MAX([SK_DateID])&#xA;                                  FROM #DateTable&#xA;                                  WHERE [MonthName] = 'May'&#xA;                                  AND [DayOfWeek] = 'Monday'&#xA;                                  GROUP BY [YEAR], [MONTH]&#xA;                                  )&#xA;                                  --Labor Day -------------------------------------------------------------------------------------------&#xA;                                  --First Monday in September&#xA;                                  UPDATE #DateTable&#xA;                                  SET HolidayText = 'Labor Day'&#xA;                                  FROM #DateTable&#xA;                                  WHERE SK_DateID IN&#xA;                                  (&#xA;                                  SELECT MIN([SK_DateID])&#xA;                                  FROM #DateTable&#xA;                                  WHERE [MonthName] = 'September'&#xA;                                  AND [DayOfWeek] = 'Monday'&#xA;                                  GROUP BY [YEAR], [MONTH]&#xA;                                  )&#xA;&#xA;                                  -- Valentine's Day ---------------------------------------------------------------------------------------------&#xA;                                  UPDATE #DateTable&#xA;                                  SET HolidayText = 'Valentine''s Day'&#xA;                                  WHERE [MONTH] = 2 AND [DAY] = 14&#xA;&#xA;                                  -- Saint Patrick's Day -----------------------------------------------------------------------------------------&#xA;                                  UPDATE #DateTable&#xA;                                  SET HolidayText = 'Saint Patrick''s Day'&#xA;                                  WHERE [MONTH] = 3 AND [DAY] = 17&#xA;&#xA;                                  --Martin Luthor King Day ---------------------------------------------------------------------------------------&#xA;                                  --Third Monday in January starting in 1983&#xA;                                  UPDATE #DateTable&#xA;                                  SET HolidayText = 'Martin Luthor King Jr Day'&#xA;                                  WHERE [MONTH] = 1--January&#xA;                                  AND [Dayofweek] = 'Monday'&#xA;                                  AND [YEAR] &gt;= 1983--When holiday was official&#xA;                                  AND [DOWInMonth] = 3--Third X day of current month.&#xA;&#xA;                                  --President's Day ---------------------------------------------------------------------------------------&#xA;                                  --Third Monday in February.&#xA;                                  UPDATE #DateTable&#xA;                                  SET HolidayText = 'President''s Day'--select * from #DateTable&#xA;                                  WHERE [MONTH] = 2--February&#xA;                                  AND [Dayofweek] = 'Monday'&#xA;                                  AND [DOWInMonth] = 3--Third occurance of a monday in this month.&#xA;&#xA;                                  --Mother's Day ---------------------------------------------------------------------------------------&#xA;                                  --Second Sunday of May&#xA;                                  UPDATE #DateTable&#xA;                                  SET HolidayText = 'Mother''s Day'--select * from #DateTable&#xA;                                  WHERE [MONTH] = 5--May&#xA;                                  AND [Dayofweek] = 'Sunday'&#xA;                                  AND [DOWInMonth] = 2--Second occurance of a monday in this month.&#xA;&#xA;                                  --Father's Day ---------------------------------------------------------------------------------------&#xA;                                  --Third Sunday of June&#xA;                                  UPDATE #DateTable&#xA;                                  SET HolidayText = 'Father''s Day'--select * from #DateTable&#xA;                                  WHERE [MONTH] = 6--June&#xA;                                  AND [Dayofweek] = 'Sunday'&#xA;                                  AND [DOWInMonth] = 3--Third occurance of a monday in this month.&#xA;&#xA;                                  --Halloween 10/31 ----------------------------------------------------------------------------------&#xA;                                  UPDATE #DateTable&#xA;                                  SET HolidayText = 'Halloween'&#xA;                                  WHERE [MONTH] = 10 AND [DAY] = 31&#xA;                                  --Election Day--------------------------------------------------------------------------------------&#xA;                                  --The first Tuesday after the first Monday in November.&#xA;     &#xA;                                  IF OBJECT_ID('tempdb..#tmpHoliday') IS NOT NULL DROP TABLE #tmpHoliday&#xA;                    &#xA;                                  CREATE TABLE #tmpHoliday(ID INT IDENTITY(1,1), DateID int, Week TINYINT, YEAR CHAR(4), DAY CHAR(2))&#xA;&#xA;                                  INSERT INTO #tmpHoliday(DateID, [YEAR],[DAY])&#xA;                                  SELECT [SK_DateID], [YEAR], [DAY]&#xA;                                  FROM #DateTable&#xA;                                  WHERE [MONTH] = 11&#xA;                                  AND [Dayofweek] = 'Monday'&#xA;                                  ORDER BY YEAR, DAY&#xA;&#xA;                                  DECLARE @CNTR INT, @POS INT, @STARTYEAR INT, @ENDYEAR INT, @CURRENTYEAR INT, @MINDAY INT&#xA;&#xA;                                  SELECT @CURRENTYEAR = MIN([YEAR])&#xA;                                  , @STARTYEAR = MIN([YEAR])&#xA;                                  , @ENDYEAR = MAX([YEAR])&#xA;                                  FROM #tmpHoliday&#xA;&#xA;                                  WHILE @CURRENTYEAR &lt;= @ENDYEAR&#xA;                                  BEGIN&#xA;                                  SELECT @CNTR = COUNT([YEAR])&#xA;                                  FROM #tmpHoliday&#xA;                                  WHERE [YEAR] = @CURRENTYEAR&#xA;&#xA;                                  SET @POS = 1&#xA;&#xA;                                  WHILE @POS &lt;= @CNTR&#xA;                                  BEGIN&#xA;                                  SELECT @MINDAY = MIN(DAY)&#xA;                                  FROM #tmpHoliday&#xA;                                  WHERE [YEAR] = @CURRENTYEAR&#xA;                                  AND [WEEK] IS NULL&#xA;&#xA;                                  UPDATE #tmpHoliday&#xA;                                  SET [WEEK] = @POS&#xA;                                  WHERE [YEAR] = @CURRENTYEAR&#xA;                                  AND [DAY] = @MINDAY&#xA;&#xA;                                  SELECT @POS = @POS + 1&#xA;                                  END&#xA;&#xA;                                  SELECT @CURRENTYEAR = @CURRENTYEAR + 1&#xA;                                  END&#xA;&#xA;                                  UPDATE DT&#xA;                                  SET HolidayText = 'Election Day'&#xA;                                  FROM #DateTable DT&#xA;                                  JOIN #tmpHoliday HL&#xA;                                  ON (HL.DateID + 1) = DT.SK_DateID&#xA;                                  WHERE [WEEK] = 1&#xA;&#xA;                                  DROP TABLE #tmpHoliday&#xA;&#xA;&#xA;                                  MERGE [DataMart].[dimDate] AS TGT&#xA;                                  USING (&#xA;                                   select * from #DateTable&#xA;                                  )&#xA;                                  as dates&#xA;                                   ON dates.SK_DateID = TGT.SK_DateID&#xA;                                  WHEN NOT MATCHED THEN&#xA;                                  INSERT&#xA;                                   ([SK_DateID]&#xA;                                    ,[SK_MonthID]&#xA;                                    ,[Date]&#xA;                                    ,[Day]&#xA;                                    ,[DaySuffix]&#xA;                                    ,[DayOfWeek]&#xA;                                    ,[DOWInMonth]&#xA;                                    ,[DayOfYear]&#xA;                                    ,[WeekOfYear]&#xA;                                    ,[WeekOfMonth]&#xA;                                    ,[Month]&#xA;                                    ,[MonthName]&#xA;                                    ,[Quarter]&#xA;                                    ,[QuarterName]&#xA;                                    ,[Year]&#xA;                                    ,[StandardDate]&#xA;                                    ,[HolidayText])&#xA;                                  VALUES&#xA;                                   ([SK_DateID]&#xA;                                    ,[SK_MonthID]&#xA;                                    ,[Date]&#xA;                                    ,[Day]&#xA;                                    ,[DaySuffix]&#xA;                                    ,[DayOfWeek]&#xA;                                    ,[DOWInMonth]&#xA;                                    ,[DayOfYear]&#xA;                                    ,[WeekOfYear]&#xA;                                    ,[WeekOfMonth]&#xA;                                    ,[Month]&#xA;                                    ,[MonthName]&#xA;                                    ,[Quarter]&#xA;                                    ,[QuarterName]&#xA;                                    ,[Year]&#xA;                                    ,[StandardDate]&#xA;                                    ,[HolidayText]);&#xA;&#xA;                                  SELECT      &#xA;                                    ISNULL(CAST(Convert(VARCHAR(6), [Date], 112) AS INT), -1) AS SK_MonthID&#xA;                                    , [Month]&#xA;                                    , [MonthName]&#xA;                                    , [Quarter]&#xA;                                    , [QuarterName]&#xA;                                    , [Year]&#xA;                                    , MIN(Date) AS StartDate&#xA;                                    , MAX(Date) AS EndDate&#xA;                                  INTO #MonthTable&#xA;                                  FROM #DateTable&#xA;                                  GROUP BY&#xA;                                    ISNULL(CAST(Convert(VARCHAR(6), [Date], 112) AS INT), -1)&#xA;                                    , [Month]&#xA;                                    , [MonthName]&#xA;                                    , [Quarter]&#xA;                                    , [QuarterName]&#xA;                                    , [Year]&#xA;&#xA;&#xA;                                  MERGE [DataMart].[dimMonth] AS TGT&#xA;                                  USING (&#xA;                                   select * from #MonthTable&#xA;                                  )&#xA;                                  as months&#xA;                                   ON months.SK_MonthID = TGT.SK_MonthID&#xA;                                  WHEN NOT MATCHED THEN&#xA;                                  INSERT&#xA;                                  (  SK_MonthID&#xA;                                    , [Month]&#xA;                                    , [MonthName]&#xA;                                    , [Quarter]&#xA;                                    , [QuarterName]&#xA;                                    , [Year]&#xA;                                      , [StartDate]&#xA;                                      , [EndDate]&#xA;                                  )&#xA;                                  VALUES&#xA;                                  (  SK_MonthID&#xA;                                    , [Month]&#xA;                                    , [MonthName]&#xA;                                    , [Quarter]&#xA;                                    , [QuarterName]&#xA;                                    , [Year]&#xA;                                      , [StartDate]&#xA;                                      , [EndDate]                                      &#xA;                                  );&#xA;&#xA;&#xA;&#xA;&#xA;                                  DROP TABLE #DateTable&#xA;                                  DROP TABLE #MonthTable&#xA;                         &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                      <SQLTask:ParameterBinding SQLTask:DataType="17" SQLTask:DtsVariableName="User::IsIncremental" SQLTask:ParameterDirection="Input" SQLTask:ParameterName="0" SQLTask:ParameterSize="0">
                      </SQLTask:ParameterBinding>
                      <SQLTask:ParameterBinding SQLTask:DataType="7" SQLTask:DtsVariableName="User::IncrementalStartDate" SQLTask:ParameterDirection="Input" SQLTask:ParameterName="1" SQLTask:ParameterSize="0">
                      </SQLTask:ParameterBinding>
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{CA43FE22-66F0-441A-9FDB-DC99EFF91CF2}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create dimProducer" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create dimProducer" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                                MERGE [DataMart].[dimProducer] AS TGT&#xA;                                USING&#xA;                                (&#xA;                                    SELECT &#xA;                                     producer.ProducerID AS BK_ProducerID&#xA;                                     ,producer.ProducerCode&#xA;                                     ,usr.FirstName&#xA;                                     ,usr.LastName&#xA;                                     ,usr.IsActive&#xA;                                     ,a.AgencyID AS BK_AgencyID&#xA;                                     ,CASE &#xA;                                      WHEN isnull(a.NAME, '') &lt;&gt; ''&#xA;                                       THEN a.NAME&#xA;                                      ELSE 'N/A'&#xA;                                      END AS AgencyName&#xA;                                     ,CASE &#xA;                                      WHEN isnull(a.Code, '') &lt;&gt; ''&#xA;                                       THEN a.Code&#xA;                                      ELSE 'N/A'&#xA;                                      END AS AgencyCode&#xA;                                     ,CASE &#xA;                                      WHEN isnull(aaddr.City, '') &lt;&gt; ''&#xA;                                       THEN aaddr.City&#xA;                                      ELSE 'N/A'&#xA;                                      END AS AgencyCity&#xA;                                     ,CASE &#xA;                                      WHEN isnull(ast.StateCodeName, '') &lt;&gt; ''&#xA;                                       THEN ast.StateCodeName&#xA;                                      ELSE 'N/A'&#xA;                                      END AS AgencyState&#xA;                                     ,CASE &#xA;                                      WHEN isnull(aaddr.Zip, '') &lt;&gt; ''&#xA;                                       THEN aaddr.Zip&#xA;                                      ELSE 'N/A'&#xA;                                      END AS AgencyZip&#xA;                                     ,ao.AgencyOfficeID AS BK_OfficeID&#xA;                                     ,CASE &#xA;                                      WHEN isnull(ao.NAME, '') &lt;&gt; ''&#xA;                                       THEN ao.NAME&#xA;                                      ELSE 'N/A'&#xA;                                      END AS OfficeName&#xA;                                     ,CASE &#xA;                                      WHEN isnull(ao.Code, '') &lt;&gt; ''&#xA;                                       THEN ao.Code&#xA;                                      ELSE 'N/A'&#xA;                                      END AS OfficeCode&#xA;                                     ,CASE &#xA;                                      WHEN isnull(aoPhysAddr.City, '') &lt;&gt; ''&#xA;                                       THEN aoPhysAddr.City&#xA;                                      ELSE 'N/A'&#xA;                                      END AS OfficeCity&#xA;                                     ,CASE &#xA;                                      WHEN isnull(aost.StateCodeName, '') &lt;&gt; ''&#xA;                                       THEN aost.StateCodeName&#xA;                                      ELSE 'N/A'&#xA;                                      END AS OfficeState&#xA;                                     ,CASE &#xA;                                      WHEN isnull(aoPhysAddr.Zip, '') &lt;&gt; ''&#xA;                                       THEN aoPhysAddr.Zip&#xA;                                      ELSE 'N/A'&#xA;                                      END AS OfficeZip             &#xA;    &#xA;                                    FROM (&#xA;                                     (&#xA;                                      (&#xA;                                       SELECT DISTINCT ProducerID&#xA;                                       FROM [Extract].[P1_EndorsementPolicyTerm]&#xA;                                       )&#xA;  &#xA;                                      UNION&#xA;  &#xA;                                      (&#xA;                                       SELECT DISTINCT ProducerID&#xA;                                       FROM [Extract].[P1_Producer]&#xA;                                       )&#xA;                                      )&#xA;                                     ) AS ept&#xA;                                    LEFT JOIN [Extract].[P1_Producer] AS producer ON producer.ProducerID = ept.ProducerID&#xA;                                    LEFT JOIN [Extract].[P1_User] AS usr ON usr.UserID = producer.UserID&#xA;                                    LEFT JOIN [Extract].[P1_AgencyOffice] AS ao ON ao.AgencyOfficeID = producer.AgencyOfficeID&#xA;                                    LEFT JOIN [Extract].[P1_Agency] AS a ON a.AgencyID = ao.AgencyID&#xA;                                    LEFT JOIN [Extract].[P1_Address] AS aaddr ON a.MailAddressID = aaddr.AddressID&#xA;                                    LEFT JOIN [Extract].[P1_StateCode] AS ast ON aaddr.STATE = ast.StateCodeID&#xA;                                    LEFT JOIN [Extract].[P1_Address] AS aoPhysAddr ON ao.ContactAddressID = aoPhysAddr.AddressID&#xA;                                    LEFT JOIN [Extract].[P1_StateCode] AS aost ON aoPhysAddr.STATE = aost.StateCodeID&#xA;                                ) as producers&#xA;                                 ON producers.BK_ProducerID = TGT.BK_ProducerID&#xA;                                WHEN MATCHED THEN UPDATE&#xA;                                SET &#xA;                                 TGT.ProducerCode = producers.ProducerCode,&#xA;                                 TGT.FirstName = producers.FirstName,&#xA;                                 TGT.LastName = producers.LastName,&#xA;                                 TGT.IsActive = producers.IsActive,&#xA;                                 TGT.BK_AgencyID = producers.BK_AgencyID,&#xA;                                 TGT.AgencyName = producers.AgencyName,&#xA;                                 TGT.AgencyCode = producers.AgencyCode,&#xA;                                 TGT.AgencyCity = producers.AgencyCity,&#xA;                                 TGT.AgencyState = producers.AgencyState,&#xA;                                 TGT.AgencyZip = producers.AgencyZip,&#xA;                                 TGT.BK_OfficeID = producers.BK_OfficeID,&#xA;                                 TGT.OfficeName = producers.OfficeName,&#xA;                                 TGT.OfficeCode = producers.OfficeCode,&#xA;                                 TGT.OfficeCity = producers.OfficeCity,&#xA;                                 TGT.OfficeState = producers.OfficeState,&#xA;                                 TGT.OfficeZip = producers.OfficeZip&#xA;                                WHEN NOT MATCHED THEN&#xA;                                INSERT&#xA;                                    ([BK_ProducerID]&#xA;                                    ,[ProducerCode]&#xA;                                    ,[FirstName]&#xA;                                    ,[LastName]&#xA;                                    ,[IsActive]&#xA;                                    ,[BK_AgencyID]&#xA;                                    ,[AgencyName]&#xA;                                    ,[AgencyCode]&#xA;                                    ,[AgencyCity]&#xA;                                    ,[AgencyState]&#xA;                                    ,[AgencyZip]&#xA;                                    ,[BK_OfficeID]&#xA;                                    ,[OfficeName]&#xA;                                    ,[OfficeCode]&#xA;                                    ,[OfficeCity]&#xA;                                    ,[OfficeState]&#xA;                                    ,[OfficeZip])&#xA;                                VALUES&#xA;                                    ([BK_ProducerID]&#xA;                                    ,[ProducerCode]&#xA;                                    ,[FirstName]&#xA;                                    ,[LastName]&#xA;                                    ,[IsActive]&#xA;                                    ,[BK_AgencyID]&#xA;                                    ,[AgencyName]&#xA;                                    ,[AgencyCode]&#xA;                                    ,[AgencyCity]&#xA;                                    ,[AgencyState]&#xA;                                    ,[AgencyZip]&#xA;                                    ,[BK_OfficeID]&#xA;                                    ,[OfficeName]&#xA;                                    ,[OfficeCode]&#xA;                                    ,[OfficeCity]&#xA;                                    ,[OfficeState]&#xA;                                    ,[OfficeZip]);  &#xA;                        &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{798387C0-A5B7-447B-ABCE-944ADF8F75AD}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create dimAgency" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create dimAgency" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                                MERGE [DataMart].[dimAgency] AS TGT&#xA;                                USING &#xA;                                ( SELECT&#xA;                                   pa.AgencyID AS BK_AgencyID&#xA;                                   ,pa.Name AS AgencyName&#xA;                                   ,pa.Code AS AgencyCode&#xA;                                 FROM    Extract.P1_Agency AS pa &#xA; &#xA;                                ) as agencies&#xA;                                 ON agencies.BK_AgencyID = TGT.BK_AgencyID&#xA;                                WHEN MATCHED THEN UPDATE&#xA;                                SET &#xA;                                 TGT.AgencyName = agencies.AgencyName,&#xA;                                 TGT.AgencyCode = agencies.AgencyCode&#xA;                                WHEN NOT MATCHED THEN&#xA;                                INSERT&#xA;                                (&#xA;                                 BK_AgencyID,&#xA;                                 AgencyName,&#xA;                                 AgencyCode&#xA;                                )&#xA;                                VALUES&#xA;                                (&#xA;                                 BK_AgencyID,&#xA;                                 AgencyName,&#xA;                                 AgencyCode&#xA;                                );&#xA;               &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{71951739-C6F9-4E9B-A38E-BF4BAB1C40EE}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create dimAgencyOffice" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create dimAgencyOffice" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                                  MERGE [DataMart].[dimAgencyOffice] AS TGT&#xA;                                  USING (&#xA;                                   SELECT  ISNULL(CAST(ROW_NUMBER() OVER ( ORDER BY pao.AgencyOfficeID ) AS INT),&#xA;                                       0) AS SK_AgencyOfficeID&#xA;                                     ,pao.AgencyOfficeID AS BK_AgencyOfficeID&#xA;                                     ,pao.Name AS OfficeName&#xA;                                     ,pao.Code AS OfficeCode&#xA;                                   FROM    Extract.P1_AgencyOffice AS pao&#xA;                                  ) &#xA;                                  as agencyOffices&#xA;                                   ON agencyOffices.BK_AgencyOfficeID = TGT.BK_AgencyOfficeID&#xA;                                  WHEN MATCHED THEN UPDATE&#xA;                                  SET &#xA;                                   TGT.OfficeName = agencyOffices.OfficeName,&#xA;                                   TGT.OfficeCode = agencyOffices.OfficeCode&#xA;                                  WHEN NOT MATCHED THEN&#xA;                                  INSERT&#xA;                                  (&#xA;                                   BK_AgencyOfficeID,&#xA;                                   OfficeName,&#xA;                                   OfficeCode&#xA;                                  )&#xA;                                  VALUES&#xA;                                  (&#xA;                                   BK_AgencyOfficeID,&#xA;                                   OfficeName,&#xA;                                   OfficeCode&#xA;                                  );&#xA;                &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{9D8F43D0-EFB6-44CD-AD41-377B72CC0A97}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create dimEndorsementBusinessType" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create dimEndorsementBusinessType" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                SELECT  et.EndorsementTypeID AS BK_EndorsementTypeID&#xA;                  ,ISNULL(CASE WHEN et.EndorsementTypeID IN ( 1 ) THEN 1&#xA;                     WHEN et.EndorsementTypeID IN ( 2 ) THEN 2&#xA;                     WHEN et.EndorsementTypeID IN ( 3, 4, 12, 13, 14, 15, 17 )&#xA;                     THEN 3&#xA;                     WHEN et.EndorsementTypeID IN ( 6, 16 ) THEN 4&#xA;                     WHEN et.EndorsementTypeID IN ( 7 ) THEN 5&#xA;                     WHEN et.EndorsementTypeID IN ( 8 ) THEN 6&#xA;                     WHEN et.EndorsementTypeID IN ( 9, 10 ) THEN 7&#xA;                    END, -2) AS EndorsementBusinessTypeID&#xA;                  ,et.EndorsementType&#xA;                  ,ISNULL(CASE WHEN et.EndorsementTypeID IN ( 1 ) THEN 'New Business'&#xA;                     WHEN et.EndorsementTypeID IN ( 2 ) THEN 'Renewal'&#xA;                     WHEN et.EndorsementTypeID IN ( 3, 4, 12, 13, 14, 15, 17 )&#xA;                     THEN 'Cancellation'&#xA;                     WHEN et.EndorsementTypeID IN ( 6, 16 ) THEN 'Reinstatment'&#xA;                     WHEN et.EndorsementTypeID IN ( 7 ) THEN 'Endo Plus'&#xA;                     WHEN et.EndorsementTypeID IN ( 8 ) THEN 'Endo Minus'&#xA;                     WHEN et.EndorsementTypeID IN ( 9, 10 ) THEN 'Endo Zero'&#xA;                    END, 'N/A') AS EndorsementBusinessType&#xA;                INTO    DataMart.dimEndorsementBusinessType&#xA;                FROM    [Extract].[P1_EndorsementType] et&#xA;                WHERE   et.EndorsementTypeID NOT IN ( 0, 5, 11, 18 )&#xA;                UNION ALL&#xA;                SELECT  *&#xA;                FROM    ( VALUES ( -1, -1, 'Uds', 'Uds') ) AS t ( EndorsementTypeID, EndorsementBusinessTypeID, EndorsementType, EndorsementBusinessType )                &#xA;                ALTER TABLE [DataMart].[dimEndorsementBusinessType] ADD CONSTRAINT PK_BK_EndorsementTypeID PRIMARY KEY (BK_EndorsementTypeID) WITH (DATA_COMPRESSION = PAGE)&#xA;                &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{0B718944-3EB6-4D82-A6A4-B6CCA88B07CF}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create dimQuotePolicyTerm" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create dimQuotePolicyTerm" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                &#xA;                                  DECLARE @Yes INT = 1;&#xA;                                  DECLARE @No INT = 0;&#xA;                                  DECLARE @YesStr VARCHAR(3) = 'Yes';&#xA;                                  DECLARE @NoStr VARCHAR(3) = 'No';&#xA;                                  DECLARE @NotApplicable VARCHAR(3) = 'N/A';&#xA;                                  DECLARE @True VARCHAR(4) = 'True';&#xA;                                  DECLARE @BI VARCHAR(4) = 'BI';&#xA;                                  DECLARE @PD VARCHAR(4) = 'PD';&#xA;                                  DECLARE @Med VARCHAR(4) = 'MP';&#xA;                                  DECLARE @UMBI VARCHAR(4) = 'UMBI';&#xA;                                  DECLARE @UMPD VARCHAR(4) = 'UMPD';&#xA;                                  DECLARE @ClaimsValue VARCHAR(10) = 'No Claims';&#xA;                                  DECLARE @ZeroDays VARCHAR(10) = '0 Days';&#xA;                                  DECLARE @CreditTier VARCHAR(10) = 'CreditTier';&#xA;                                  DECLARE @EmptyString VARCHAR(10) = '';&#xA;                                  DECLARE @DefaultLOB VARCHAR(25) = 'Personal Auto';&#xA;                                  DECLARE @AutoPayNoEFT INT = 1;&#xA;                                  DECLARE @AutoPayEFT INT = 2;&#xA;                                  DECLARE @AutoPayRCCP INT = 3;&#xA;&#xA;                                  IF OBJECT_ID('tempdb..#QuoteDiscounts') IS NOT NULL&#xA;                                   DROP TABLE #QuoteDiscounts;&#xA;&#xA;                                  WITH QuoteDiscounts&#xA;                                  AS (&#xA;                                   SELECT DISTINCT qpa.QuotePolicyTermID&#xA;                                    ,pat.PremiumAdjustmentTypeName&#xA;                                    ,@YesStr AS Yes&#xA;                                   FROM Extract.P1_QuotePremiumAdjustment qpa&#xA;                                   JOIN [Extract].[P1_PremiumAdjustmentType] pat ON pat.[PremiumAdjustmentTypeID] = qpa.[PremiumAdjustmentType]&#xA;                                   )&#xA;                                  SELECT QuotePolicyTermID&#xA;                                   ,ISNULL(EFTDiscount, @NoStr) AS EFTDiscount&#xA;                                   ,ISNULL(OnlineQuoteDiscount, @NoStr) AS OnlineQuoteDiscount&#xA;                                   ,ISNULL(ResponsibleDriverDiscount, @NoStr) AS ResponsibleDriverDiscount&#xA;                                   ,ISNULL(SafeDrivingDiscount, @NoStr) AS SafeDrivingDiscount&#xA;                                   ,ISNULL(AdvanceQuoteDiscount, @NoStr) AS AdvanceQuoteDiscount&#xA;                                   ,ISNULL(ExcessVehicleDiscount, @NoStr) AS ExcessVehicleDiscount&#xA;                                   ,ISNULL(SafeDrivingDiscountByTerm, @NoStr) AS SafeDrivingDiscountByTerm&#xA;                                   ,ISNULL(PermissiveUseEndorsement, @NoStr) AS PermissiveUseEndorsement&#xA;                                   ,ISNULL(MultiPolicyDiscount, @NoStr) AS MultiPolicyDiscount&#xA;                                   ,ISNULL(MultiCarDiscount, @NoStr) AS MultiCarDiscount&#xA;                                   ,ISNULL(EarlySigningDiscount, @NoStr) AS EarlySigningDiscount&#xA;                                   ,ISNULL(RenewalDiscount, @NoStr) AS RenewalDiscount&#xA;                                   ,ISNULL(PreferredPolicyDiscount, @NoStr) AS PreferredPolicyDiscount&#xA;                                   ,ISNULL(FirstResponderDiscount, @NoStr) AS FirstResponderDiscount&#xA;                                   ,ISNULL(PayInFullDiscount, @NoStr) AS PayInFullDiscount&#xA;                                   ,ISNULL(TripleDeductibleDiscount, @NoStr) AS TripleDeductibleDiscount&#xA;                                   ,ISNULL(EconomyPackageDiscount, @NoStr) AS EconomyPackageDiscount&#xA;                                   ,ISNULL(MeritSurcharge, @NoStr) AS MeritSurcharge&#xA;                                  INTO #QuoteDiscounts&#xA;                                  FROM QuoteDiscounts&#xA;                                  PIVOT(MAX(Yes) FOR PremiumAdjustmentTypeName IN (&#xA;                                     EFTDiscount&#xA;                                     ,OnlineQuoteDiscount&#xA;                                     ,ResponsibleDriverDiscount&#xA;                                     ,SafeDrivingDiscount&#xA;                                     ,AdvanceQuoteDiscount&#xA;                                     ,ExcessVehicleDiscount&#xA;                                     ,SafeDrivingDiscountByTerm&#xA;                                     ,PermissiveUseEndorsement&#xA;                                     ,MultiPolicyDiscount&#xA;                                     ,MultiCarDiscount&#xA;                                     ,EarlySigningDiscount&#xA;                                     ,RenewalDiscount&#xA;                                     ,PreferredPolicyDiscount&#xA;                                     ,FirstResponderDiscount&#xA;                                     ,PayInFullDiscount&#xA;                                     ,TripleDeductibleDiscount&#xA;                                     ,EconomyPackageDiscount&#xA;                                     ,MeritSurcharge&#xA;                                     )) AS Discounts;&#xA;&#xA;                                  IF OBJECT_ID('tempdb..#QuoteCoverageLimits') IS NOT NULL&#xA;                                   DROP TABLE #QuoteCoverageLimits&#xA;&#xA;                                  SELECT qpt.QuotePolicyTermId&#xA;                                   ,ct.CoverageTypeCode&#xA;                                   ,MAX(pc.LimitPerPerson) AS LimitPerPerson&#xA;                                   ,MAX(pc.LimitPerAccident) AS LimitPerAccident&#xA;                                   ,MAX(pc.LimitTotal) AS LimitTotal&#xA;                                   ,MAX(pc.Deductible) AS Deductible&#xA;                                  INTO #QuoteCoverageLimits&#xA;                                  FROM Extract.P1_QuotePolicyTerm qpt&#xA;                                  JOIN Extract.P1_QuoteVehicle qv ON qpt.QuotePolicyTermId = qv.QuotePolicyTermId&#xA;                                  JOIN Extract.P1_QuoteVehicleCoverage qvc ON qvc.QuoteVehicleId = qv.QuoteVehicleId&#xA;                                  JOIN Extract.P1_ProgramCoverage pc ON qvc.ProgramCoverageID = pc.ProgramCoverageID&#xA;                                  JOIN Extract.P1_CoverageType ct ON pc.CoverageTypeID = ct.CoverageTypeID&#xA;                                  WHERE ct.CoverageTypeCode IN (&#xA;                                    @BI&#xA;                                    ,@PD&#xA;                                    ,@Med&#xA;                                    ,@UMBI&#xA;                                    ,@UMPD&#xA;                                    )&#xA;                                  GROUP BY qpt.QuotePolicyTermId&#xA;                                   ,ct.CoverageTypeCode;&#xA;&#xA;                                  ;WITH QuotePolicyTermsData&#xA;                                  AS&#xA;                                  (&#xA;                                   SELECT  &#xA;                                   - 1 AS BK_EndorsementID&#xA;                                   ,qpt.QuotePolicyTermId AS BK_PolicyId&#xA;                                   ,qpt.QuoteId AS BK_QuoteID&#xA;                                   ,- 1 AS BK_RenewalPolicyTermID&#xA;                                   ,Producer.ProducerId AS BK_ProducerID&#xA;                                   ,@EmptyString AS BK_PolicyNumber&#xA;                                   ,ISNULL(prg.ProgramGroupID, - 1) AS BK_ProgramGroupId&#xA;                                   ,qpt.EffectiveDate&#xA;                                   ,DATEADD(m, q.TermLength, qpt.EffectiveDate) AS ExpirationDate&#xA;                                   ,CASE &#xA;                                    WHEN ISNULL(prg_grp.ProgramGroupName, @EmptyString) &lt;&gt; @EmptyString&#xA;                                     THEN dbo.Proper(prg_grp.ProgramGroupName)&#xA;                                    ELSE @NotApplicable&#xA;                                    END AS Product&#xA;                                   ,ISNULL(UPPER(sc.StateCodeName), @NotApplicable) AS ProductState&#xA;                                   ,IIF(q.IsRenewal = @True, @YesStr, @NoStr) AS IsRenewal&#xA;                                   ,IIF(q.IsRenewal = @True, @NoStr, @YesStr) AS IsNewBusiness&#xA;                                   ,CASE &#xA;                                    WHEN q.TermLength &gt; 0&#xA;                                     THEN CAST(DATEDIFF(d, qpt.EffectiveDate, DATEADD(m, q.TermLength, qpt.EffectiveDate)) AS VARCHAR(7))&#xA;                                    ELSE @NotApplicable&#xA;                                    END AS PolicyTermDays&#xA;                                   ,CASE &#xA;                                    WHEN q.TermLength &gt; 0&#xA;                                     THEN CAST(q.TermLength AS VARCHAR(7))&#xA;                                    ELSE @NotApplicable&#xA;                                    END AS PolicyTermInMonths&#xA;                                   ,CASE &#xA;                                    WHEN ISNULL(c.NAME, @EmptyString) &lt;&gt; @EmptyString&#xA;                                     THEN dbo.Proper(c.NAME)&#xA;                                    ELSE @NotApplicable&#xA;                                    END AS Carrier&#xA;                                   ,stg_q.MailZip AS PolicyZip&#xA;                                   ,CAST(@DefaultLOB AS VARCHAR(40)) AS LineOfBusiness&#xA;                                   ,ISNULL(pp.NAME, @NotApplicable) AS PaymentPlan&#xA;                                   ,CASE pp.IsPayInFull&#xA;                                    WHEN @Yes&#xA;                                     THEN @YesStr&#xA;                                    WHEN @No&#xA;                                     THEN @NoStr&#xA;                                    ELSE @NotApplicable&#xA;                                    END AS PaidInFull&#xA;                                   ,ISNULL(discs.MultiCarDiscount, @NoStr) AS MultiCar_Discount&#xA;                                   ,CASE &#xA;                                    WHEN qpt.AutoPayStatusId = @AutoPayNoEFT&#xA;                                     THEN @NoStr&#xA;                                    WHEN qpt.AutoPayStatusId IN (&#xA;                                      @AutoPayEFT&#xA;                                      ,@AutoPayRCCP&#xA;                                      )&#xA;                                     THEN @YesStr&#xA;                                    ELSE @NotApplicable&#xA;                                    END AS EFT&#xA;                                   ,ISNULL(aps.EnumStringValue, @NotApplicable) AS EFTType&#xA;                                   ,ISNULL(discs.PayInFullDiscount, @NoStr) AS PayInFull_Discount&#xA;                                   ,CASE qpt.AccidentAndViolationFreeDiscount&#xA;                                    WHEN @Yes&#xA;                                     THEN @YesStr&#xA;                                    WHEN @No&#xA;                                     THEN @NoStr&#xA;                                    ELSE @NotApplicable&#xA;                                    END AS AccidentAndViolationFree_Discount&#xA;                                   ,CASE qpt.UnacceptableRiskSurcharge&#xA;                                    WHEN @Yes&#xA;                                     THEN @YesStr&#xA;                                    WHEN @No&#xA;                                     THEN @NoStr&#xA;                                    ELSE @NotApplicable&#xA;                                    END AS UnacceptableRisk_Surcharge&#xA;                                   ,CONCAT (&#xA;                                    prg.ProgramName&#xA;                                    ,'-'&#xA;                                    ,CAST(prg.ProgramGroupID AS VARCHAR(7))&#xA;                                    ,'.'&#xA;                                    ,CAST(prg.ProgramID AS VARCHAR(7))&#xA;                                    ) AS RatingVersion&#xA;                                   ,CASE &#xA;                                    WHEN limit_bi.LimitPerPerson &gt; 0&#xA;                                     OR limit_bi.LimitPerAccident &gt; 0&#xA;                                     THEN CAST(limit_bi.LimitPerPerson AS VARCHAR(7)) + '/' + CAST(limit_bi.LimitPerAccident AS VARCHAR(7))&#xA;                                    ELSE @NotApplicable&#xA;                                    END AS BI_Limits&#xA;                                   ,CASE &#xA;                                    WHEN limit_pd.LimitTotal &gt; 0&#xA;                                     THEN CAST(limit_pd.LimitTotal AS VARCHAR(7))&#xA;                                    ELSE @NotApplicable&#xA;                                    END AS PD_Limits&#xA;                                   ,CASE &#xA;                                    WHEN limit_med.LimitTotal &gt; 0&#xA;                                     THEN CAST(limit_med.LimitTotal AS VARCHAR(7))&#xA;                                    ELSE @NotApplicable&#xA;                                    END AS MED_Limits&#xA;                                   ,CASE &#xA;                                    WHEN limit_umbi.LimitPerPerson &gt; 0&#xA;                                     OR limit_umbi.LimitPerAccident &gt; 0&#xA;                                     THEN CAST(limit_umbi.LimitPerPerson AS VARCHAR(7)) + '/' + CAST(limit_umbi.LimitPerAccident AS VARCHAR(7))&#xA;                                    ELSE @NotApplicable&#xA;                                    END AS UMBI_Limits&#xA;                                   ,CASE &#xA;                                    WHEN limit_umpd.LimitTotal &gt; 0&#xA;                                     THEN CAST(limit_umpd.LimitTotal AS VARCHAR(7))&#xA;                                    ELSE @NotApplicable&#xA;                                    END AS UMPD_Limits&#xA;                                   ,@ClaimsValue AS HasClaims&#xA;                                   ,@NoStr AS HasLapse&#xA;                                   ,@ZeroDays AS MaxLapseLength&#xA;                                   ,0 AS LapseCount&#xA;                                   ,ISNULL(prg.ProgramID, - 1) AS BK_ProgramID&#xA;                                   ,stg_q.EffectiveUnderwritingTier AS EffectiveUnderwritingTier&#xA;                                   ,ISNULL(discs.TripleDeductibleDiscount, @NoStr) AS TripleDeductibleBuyBackOption&#xA;                                   ,ISNULL(discs.EconomyPackageDiscount, @NoStr) AS EconomyPackageOption&#xA;                                   ,stg_q.CompZipTerritory AS CompZipTerritory&#xA;                                   ,stg_q.ZipTerritory AS ZipTerritory&#xA;                                   ,ISNULL(discs.RenewalDiscount, @NoStr) AS Renewal_Discount&#xA;                                   ,ISNULL(discs.MeritSurcharge, @NoStr) AS Merit_Surcharge&#xA;                                   ,ISNULL(discs.EarlySigningDiscount, @NoStr) AS EarlySigning_Discount&#xA;                                   ,ISNULL(discs.FirstResponderDiscount, @NoStr) AS FirstResponder_Discount&#xA;                                   ,ISNULL(discs.MultiPolicyDiscount, @NoStr) AS IsMultiPolicy&#xA;                                   ,CAST(CASE &#xA;                                     WHEN qpt.HouseholdMemberDrivers &gt;= 0&#xA;                                      THEN CAST(qpt.HouseholdMemberDrivers AS VARCHAR(6))&#xA;                                     ELSE @NotApplicable&#xA;                                     END AS VARCHAR(6)) AS HouseholdMemberDrivers&#xA;                                   ,CAST(CASE &#xA;                                     WHEN qpt.ExcludedUnlicensedDrivers &gt;= 0&#xA;                                      THEN CAST(qpt.ExcludedUnlicensedDrivers AS VARCHAR(6))&#xA;                                     ELSE @NotApplicable&#xA;                                     END AS VARCHAR(6)) AS ExcludedUnlicensedDrivers&#xA;                                   ,CAST(CASE &#xA;                                     WHEN qpt.ExcludedLicensedDrivers &gt;= 0&#xA;                                      THEN CAST(qpt.ExcludedLicensedDrivers AS VARCHAR(6))&#xA;                                     ELSE @NotApplicable&#xA;                                     END AS VARCHAR(6)) AS ExcludedLicensedDrivers&#xA;                                   ,CASE qpt.MaybeFirstResponderDiscount&#xA;                                    WHEN @Yes&#xA;                                     THEN @YesStr&#xA;                                    WHEN @No&#xA;                                     THEN @NoStr&#xA;                                    ELSE @NotApplicable&#xA;                                    END AS MaybeFirstResponder_Discount&#xA;                                   ,CASE qpt.PropertyDamageDropDownDiscount&#xA;                                    WHEN @Yes&#xA;                                     THEN @YesStr&#xA;                                    WHEN @No&#xA;                                     THEN @NoStr&#xA;                                    ELSE @NotApplicable&#xA;                                    END AS PropertyDamageDropDown_Discount&#xA;                                   ,ISNULL(discs.PreferredPolicyDiscount, @NoStr) AS PreferredPolicy_Discount&#xA;                                   ,CASE qpt.DiscountEDoc&#xA;                                    WHEN @Yes&#xA;                                     THEN @YesStr&#xA;                                    WHEN @No&#xA;                                     THEN @NoStr&#xA;                                    ELSE @NotApplicable&#xA;                                    END AS DiscountEDoc_Discount&#xA;                                   ,CASE qpt.IsRoadsideMembershipEnrolled&#xA;                                    WHEN @Yes&#xA;                                     THEN @YesStr&#xA;                                    WHEN @No&#xA;                                     THEN @NoStr&#xA;                                    ELSE @NotApplicable&#xA;                                    END AS IsRoadsideMembershipEnrolled&#xA;                                   ,CAST(CASE &#xA;                                     WHEN ISNULL(qpt.SafeDrivingLevel, @EmptyString) = @EmptyString&#xA;                                      THEN @NotApplicable&#xA;                                     ELSE qpt.SafeDrivingLevel&#xA;                                     END AS VARCHAR(6)) AS SafeDrivingLevel&#xA;                                   ,CAST(CASE &#xA;                                     WHEN ISNULL(qpt_credittier.CreditTier, @EmptyString) = @EmptyString&#xA;                                      THEN @NotApplicable&#xA;                                     ELSE qpt_credittier.CreditTier&#xA;                                     END AS VARCHAR(6)) AS CreditTier&#xA;                                   ,ISNULL(discs.EFTDiscount, @NoStr) AS EFTDiscount&#xA;                                   ,ISNULL(discs.OnlineQuoteDiscount, @NoStr) AS OnlineQuoteDiscount&#xA;                                   ,ISNULL(discs.ResponsibleDriverDiscount, @NoStr) AS ResponsibleDriverDiscount&#xA;                                   ,ISNULL(discs.AdvanceQuoteDiscount, @NoStr) AS AdvanceQuoteDiscount&#xA;                                   ,ISNULL(discs.SafeDrivingDiscount, @NoStr) AS SafeDrivingDiscount&#xA;                                   ,ISNULL(discs.ExcessVehicleDiscount, @NoStr) AS ExcessVehicleDiscount&#xA;                                   ,ISNULL(discs.SafeDrivingDiscountByTerm, @NoStr) AS SafeDrivingDiscountByTerm&#xA;                                   ,ISNULL(discs.PermissiveUseEndorsement, @NoStr) AS PermissiveUseEndorsement&#xA;                                   ,stg_q.Completed AS Completed&#xA;                                   ,stg_q.PolicyCreated AS PolicyCreated&#xA;                                   ,stg_q.CampaignName AS CampaignName&#xA;                                   ,stg_q.CampaignType AS CampaignType&#xA;                                   ,stg_q.LeadSource AS LeadSource&#xA;                                   ,stg_q.LeadSourceType AS LeadSourceType&#xA;                                   ,stg_q.QuoteOrigin AS Origin&#xA;                                   ,stg_q.QuoteValidationStatus AS ValidationStatus&#xA;                                   ,stg_q.IsFromFSC                                &#xA;                                  FROM Extract.P1_QuotePolicyTerm qpt&#xA;                                  JOIN Extract.P1_Quote q ON qpt.QuoteId = q.QuoteID&#xA;                                  JOIN Staging.Quote stg_q ON q.QuoteID = stg_q.BK_QuoteID&#xA;                                  JOIN Extract.P1_AutoPayStatus aps ON qpt.AutoPayStatusId = aps.AutoPayStatusId&#xA;                                      OUTER APPLY (SELECT TOP 1&#xA;                                         pqp.ProducerID&#xA;                                       FROM   [Extract].P1_QuoteProducer AS pqp&#xA;                                       WHERE  pqp.QuoteID = q.QuoteID&#xA;                                       ORDER BY pqp.Created DESC&#xA;                                       ) AS Producer                                &#xA;                                  LEFT JOIN Extract.P1_Program prg ON qpt.ProgramID = prg.ProgramID&#xA;                                  LEFT JOIN Extract.P1_ProgramGroup prg_grp ON prg_grp.ProgramGroupID = prg.ProgramGroupID&#xA;                                  LEFT JOIN Extract.P1_StateCode sc ON prg_grp.StateCodeID = sc.StateCodeID&#xA;                                  LEFT JOIN Extract.P1_Carrier c ON c.CarrierID = prg.CarrierID&#xA;                                  LEFT JOIN [Extract].[P1_PayPlan] pp ON qpt.PayPlanID = pp.PayPlanID&#xA;                                  LEFT JOIN #QuoteCoverageLimits AS limit_bi ON limit_bi.QuotePolicyTermId = qpt.QuotePolicyTermId&#xA;                                   AND limit_bi.CoverageTypeCode = @BI&#xA;                                  LEFT JOIN #QuoteCoverageLimits AS limit_pd ON limit_pd.QuotePolicyTermId = qpt.QuotePolicyTermId&#xA;                                   AND limit_pd.CoverageTypeCode = @PD&#xA;                                  LEFT JOIN #QuoteCoverageLimits AS limit_med ON limit_med.QuotePolicyTermId = qpt.QuotePolicyTermId&#xA;                                   AND limit_med.CoverageTypeCode = @Med&#xA;                                  LEFT JOIN #QuoteCoverageLimits AS limit_umbi ON limit_umbi.QuotePolicyTermId = qpt.QuotePolicyTermId&#xA;                                   AND limit_umbi.CoverageTypeCode = @UMBI&#xA;                                  LEFT JOIN #QuoteCoverageLimits AS limit_umpd ON limit_umpd.QuotePolicyTermId = qpt.QuotePolicyTermId&#xA;                                   AND limit_umpd.CoverageTypeCode = @UMPD&#xA;                                  LEFT JOIN #QuoteDiscounts discs ON qpt.QuotePolicyTermId = discs.QuotePolicyTermId&#xA;                                  LEFT JOIN (&#xA;                                   SELECT QuoteID&#xA;                                    ,max(Value) AS CreditTier&#xA;                                   FROM Extract.P1_QuoteCustomProperty&#xA;                                   WHERE NAME = @CreditTier&#xA;                                   GROUP BY QuoteID&#xA;                                   ) AS qpt_credittier ON qpt_credittier.QuoteID = qpt.QuoteID&#xA;                                  )&#xA;                                  MERGE [DataMart].[dimQuotePolicyTerm] AS TGT&#xA;                                  USING (SELECT * FROM QuotePolicyTermsData)&#xA;                                  AS QuotePolicyTerms&#xA;                                   ON QuotePolicyTerms.BK_PolicyId = TGT.BK_PolicyId&#xA;                                  WHEN MATCHED THEN UPDATE&#xA;                                  SET &#xA;                                   TGT.[BK_EndorsementID] = QuotePolicyTerms.[BK_EndorsementID], &#xA;                                   TGT.[BK_QuoteID] = QuotePolicyTerms.[BK_QuoteID],&#xA;                                   TGT.[BK_RenewalPolicyTermID] = QuotePolicyTerms.[BK_RenewalPolicyTermID],&#xA;                                   TGT.[BK_ProducerID] = QuotePolicyTerms.[BK_ProducerID],&#xA;                                   TGT.[BK_PolicyNumber] = QuotePolicyTerms.[BK_PolicyNumber],&#xA;                                   TGT.[BK_ProgramGroupId] = QuotePolicyTerms.[BK_ProgramGroupId],&#xA;                                   TGT.[EffectiveDate] = QuotePolicyTerms.[EffectiveDate],&#xA;                                   TGT.[ExpirationDate] = QuotePolicyTerms.[ExpirationDate],&#xA;                                   TGT.[Product] = QuotePolicyTerms.[Product],&#xA;                                   TGT.[ProductState] = QuotePolicyTerms.[ProductState],&#xA;                                   TGT.[IsRenewal] = QuotePolicyTerms.[IsRenewal],&#xA;                                   TGT.[IsNewBusiness] = QuotePolicyTerms.[IsNewBusiness],&#xA;                                   TGT.[PolicyTermDays] = QuotePolicyTerms.[PolicyTermDays],&#xA;                                   TGT.[PolicyTermInMonths] = QuotePolicyTerms.[PolicyTermInMonths],&#xA;                                   TGT.[Carrier] = QuotePolicyTerms.[Carrier],&#xA;                                   TGT.[PolicyZip] = QuotePolicyTerms.[PolicyZip],&#xA;                                   TGT.[LineOfBusiness] = QuotePolicyTerms.[LineOfBusiness],&#xA;                                   TGT.[PaymentPlan] = QuotePolicyTerms.[PaymentPlan],&#xA;                                   TGT.[PaidInFull] = QuotePolicyTerms.[PaidInFull],&#xA;                                   TGT.[MultiCar_Discount] = QuotePolicyTerms.[MultiCar_Discount],&#xA;                                   TGT.[EFT] = QuotePolicyTerms.[EFT],&#xA;                                   TGT.[EFTType] = QuotePolicyTerms.[EFTType],&#xA;                                   TGT.[PayInFull_Discount] = QuotePolicyTerms.[PayInFull_Discount],&#xA;                                   TGT.[AccidentAndViolationFree_Discount] = QuotePolicyTerms.[AccidentAndViolationFree_Discount],&#xA;                                   TGT.[UnacceptableRisk_Surcharge] = QuotePolicyTerms.[UnacceptableRisk_Surcharge],&#xA;                                   TGT.[RatingVersion] = QuotePolicyTerms.[RatingVersion],&#xA;                                   TGT.[BI_Limits] = QuotePolicyTerms.[BI_Limits],&#xA;                                   TGT.[PD_Limits] = QuotePolicyTerms.[PD_Limits],&#xA;                                   TGT.[MED_Limits] = QuotePolicyTerms.[MED_Limits],&#xA;                                   TGT.[UMBI_Limits] = QuotePolicyTerms.[UMBI_Limits],&#xA;                                   TGT.[UMPD_Limits] = QuotePolicyTerms.[UMPD_Limits],&#xA;                                   TGT.[HasClaims] = QuotePolicyTerms.[HasClaims],&#xA;                                   TGT.[HasLapse] = QuotePolicyTerms.[HasLapse],&#xA;                                   TGT.[MaxLapseLength] = QuotePolicyTerms.[MaxLapseLength],&#xA;                                   TGT.[LapseCount] = QuotePolicyTerms.[LapseCount],&#xA;                                   TGT.[BK_ProgramID] = QuotePolicyTerms.[BK_ProgramID],&#xA;                                   TGT.[EffectiveUnderwritingTier] = QuotePolicyTerms.[EffectiveUnderwritingTier],&#xA;                                   TGT.[TripleDeductibleBuyBackOption] = QuotePolicyTerms.[TripleDeductibleBuyBackOption],&#xA;                                   TGT.[EconomyPackageOption] = QuotePolicyTerms.[EconomyPackageOption],&#xA;                                   TGT.[CompZipTerritory] = QuotePolicyTerms.[CompZipTerritory],&#xA;                                   TGT.[ZipTerritory] = QuotePolicyTerms.[ZipTerritory],&#xA;                                   TGT.[Renewal_Discount] = QuotePolicyTerms.[Renewal_Discount],&#xA;                                   TGT.[Merit_Surcharge] = QuotePolicyTerms.[Merit_Surcharge],&#xA;                                   TGT.[EarlySigning_Discount] = QuotePolicyTerms.[EarlySigning_Discount],&#xA;                                   TGT.[FirstResponder_Discount] = QuotePolicyTerms.[FirstResponder_Discount],&#xA;                                   TGT.[IsMultiPolicy] = QuotePolicyTerms.[IsMultiPolicy],&#xA;                                   TGT.[HouseholdMemberDrivers] = QuotePolicyTerms.[HouseholdMemberDrivers],&#xA;                                   TGT.[ExcludedUnlicensedDrivers] = QuotePolicyTerms.[ExcludedUnlicensedDrivers],&#xA;                                   TGT.[ExcludedLicensedDrivers] = QuotePolicyTerms.[ExcludedLicensedDrivers],&#xA;                                   TGT.[MaybeFirstResponder_Discount] = QuotePolicyTerms.[MaybeFirstResponder_Discount],&#xA;                                   TGT.[PropertyDamageDropDown_Discount] = QuotePolicyTerms.[PropertyDamageDropDown_Discount],&#xA;                                   TGT.[PreferredPolicy_Discount] = QuotePolicyTerms.[PreferredPolicy_Discount],&#xA;                                   TGT.[DiscountEDoc_Discount] = QuotePolicyTerms.[DiscountEDoc_Discount],&#xA;                                   TGT.[IsRoadsideMembershipEnrolled] = QuotePolicyTerms.[IsRoadsideMembershipEnrolled],&#xA;                                   TGT.[SafeDrivingLevel] = QuotePolicyTerms.[SafeDrivingLevel],&#xA;                                   TGT.[CreditTier] = QuotePolicyTerms.[CreditTier],&#xA;                                   TGT.[EFTDiscount] = QuotePolicyTerms.[EFTDiscount],&#xA;                                   TGT.[OnlineQuoteDiscount] = QuotePolicyTerms.[OnlineQuoteDiscount],&#xA;                                   TGT.[ResponsibleDriverDiscount] = QuotePolicyTerms.[ResponsibleDriverDiscount],&#xA;                                   TGT.[AdvanceQuoteDiscount] = QuotePolicyTerms.[AdvanceQuoteDiscount],&#xA;                                   TGT.[SafeDrivingDiscount] = QuotePolicyTerms.[SafeDrivingDiscount],&#xA;                                   TGT.[ExcessVehicleDiscount] = QuotePolicyTerms.[ExcessVehicleDiscount],&#xA;                                   TGT.[SafeDrivingDiscountByTerm] = QuotePolicyTerms.[SafeDrivingDiscountByTerm],&#xA;                                   TGT.[PermissiveUseEndorsement] = QuotePolicyTerms.[PermissiveUseEndorsement],&#xA;                                   TGT.[Completed] = QuotePolicyTerms.[Completed],&#xA;                                   TGT.[PolicyCreated] = QuotePolicyTerms.[PolicyCreated],&#xA;                                   TGT.[CampaignName] = QuotePolicyTerms.[CampaignName],&#xA;                                   TGT.[CampaignType] = QuotePolicyTerms.[CampaignType],&#xA;                                   TGT.[LeadSource] = QuotePolicyTerms.[LeadSource],&#xA;                                   TGT.[LeadSourceType] = QuotePolicyTerms.[LeadSourceType],&#xA;                                   TGT.[Origin] = QuotePolicyTerms.[Origin],&#xA;                                   TGT.[ValidationStatus] = QuotePolicyTerms.[ValidationStatus],&#xA;                                   TGT.[IsFromFSC] = QuotePolicyTerms.[IsFromFSC]&#xA;                                  WHEN NOT MATCHED THEN&#xA;                                  INSERT&#xA;                                  (&#xA;                                   [BK_EndorsementID],&#xA;                                   [BK_PolicyId],&#xA;                                   [BK_QuoteID],&#xA;                                   [BK_RenewalPolicyTermID],&#xA;                                   [BK_ProducerID],&#xA;                                   [BK_PolicyNumber],&#xA;                                   [BK_ProgramGroupId],&#xA;                                   [EffectiveDate],&#xA;                                   [ExpirationDate],&#xA;                                   [Product],&#xA;                                   [ProductState],&#xA;                                   [IsRenewal],&#xA;                                   [IsNewBusiness],&#xA;                                   [PolicyTermDays],&#xA;                                   [PolicyTermInMonths],&#xA;                                   [Carrier],&#xA;                                   [PolicyZip],&#xA;                                   [LineOfBusiness],&#xA;                                   [PaymentPlan],&#xA;                                   [PaidInFull],&#xA;                                   [MultiCar_Discount],&#xA;                                   [EFT],&#xA;                                   [EFTType],&#xA;                                   [PayInFull_Discount],&#xA;                                   [AccidentAndViolationFree_Discount],&#xA;                                   [UnacceptableRisk_Surcharge],&#xA;                                   [RatingVersion],&#xA;                                   [BI_Limits],&#xA;                                   [PD_Limits],&#xA;                                   [MED_Limits],&#xA;                                   [UMBI_Limits],&#xA;                                   [UMPD_Limits],&#xA;                                   [HasClaims],&#xA;                                   [HasLapse],&#xA;                                   [MaxLapseLength],&#xA;                                   [LapseCount],&#xA;                                   [BK_ProgramID],&#xA;                                   [EffectiveUnderwritingTier],&#xA;                                   [TripleDeductibleBuyBackOption],&#xA;                                   [EconomyPackageOption],&#xA;                                   [CompZipTerritory],&#xA;                                   [ZipTerritory],&#xA;                                   [Renewal_Discount],&#xA;                                   [Merit_Surcharge],&#xA;                                   [EarlySigning_Discount],&#xA;                                   [FirstResponder_Discount],&#xA;                                   [IsMultiPolicy],&#xA;                                   [HouseholdMemberDrivers],&#xA;                                   [ExcludedUnlicensedDrivers],&#xA;                                   [ExcludedLicensedDrivers],&#xA;                                   [MaybeFirstResponder_Discount],&#xA;                                   [PropertyDamageDropDown_Discount],&#xA;                                   [PreferredPolicy_Discount],&#xA;                                   [DiscountEDoc_Discount],&#xA;                                   [IsRoadsideMembershipEnrolled],&#xA;                                   [SafeDrivingLevel],&#xA;                                   [CreditTier],&#xA;                                   [EFTDiscount],&#xA;                                   [OnlineQuoteDiscount],&#xA;                                   [ResponsibleDriverDiscount],&#xA;                                   [AdvanceQuoteDiscount],&#xA;                                   [SafeDrivingDiscount],&#xA;                                   [ExcessVehicleDiscount],&#xA;                                   [SafeDrivingDiscountByTerm],&#xA;                                   [PermissiveUseEndorsement],&#xA;                                   [Completed],&#xA;                                   [PolicyCreated],&#xA;                                   [CampaignName],&#xA;                                   [CampaignType],&#xA;                                   [LeadSource],&#xA;                                   [LeadSourceType],&#xA;                                   [Origin],&#xA;                                   [ValidationStatus],&#xA;                                   [IsFromFSC]&#xA;                                  )&#xA;                                  VALUES&#xA;                                  (&#xA;                                   [BK_EndorsementID],&#xA;                                   [BK_PolicyId],&#xA;                                   [BK_QuoteID],&#xA;                                   [BK_RenewalPolicyTermID],&#xA;                                   [BK_ProducerID],&#xA;                                   [BK_PolicyNumber],&#xA;                                   [BK_ProgramGroupId],&#xA;                                   [EffectiveDate],&#xA;                                   [ExpirationDate],&#xA;                                   [Product],&#xA;                                   [ProductState],&#xA;                                   [IsRenewal],&#xA;                                   [IsNewBusiness],&#xA;                                   [PolicyTermDays],&#xA;                                   [PolicyTermInMonths],&#xA;                                   [Carrier],&#xA;                                   [PolicyZip],&#xA;                                   [LineOfBusiness],&#xA;                                   [PaymentPlan],&#xA;                                   [PaidInFull],&#xA;                                   [MultiCar_Discount],&#xA;                                   [EFT],&#xA;                                   [EFTType],&#xA;                                   [PayInFull_Discount],&#xA;                                   [AccidentAndViolationFree_Discount],&#xA;                                   [UnacceptableRisk_Surcharge],&#xA;                                   [RatingVersion],&#xA;                                   [BI_Limits],&#xA;                                   [PD_Limits],&#xA;                                   [MED_Limits],&#xA;                                   [UMBI_Limits],&#xA;                                   [UMPD_Limits],&#xA;                                   [HasClaims],&#xA;                                   [HasLapse],&#xA;                                   [MaxLapseLength],&#xA;                                   [LapseCount],&#xA;                                   [BK_ProgramID],&#xA;                                   [EffectiveUnderwritingTier],&#xA;                                   [TripleDeductibleBuyBackOption],&#xA;                                   [EconomyPackageOption],&#xA;                                   [CompZipTerritory],&#xA;                                   [ZipTerritory],&#xA;                                   [Renewal_Discount],&#xA;                                   [Merit_Surcharge],&#xA;                                   [EarlySigning_Discount],&#xA;                                   [FirstResponder_Discount],&#xA;                                   [IsMultiPolicy],&#xA;                                   [HouseholdMemberDrivers],&#xA;                                   [ExcludedUnlicensedDrivers],&#xA;                                   [ExcludedLicensedDrivers],&#xA;                                   [MaybeFirstResponder_Discount],&#xA;                                   [PropertyDamageDropDown_Discount],&#xA;                                   [PreferredPolicy_Discount],&#xA;                                   [DiscountEDoc_Discount],&#xA;                                   [IsRoadsideMembershipEnrolled],&#xA;                                   [SafeDrivingLevel],&#xA;                                   [CreditTier],&#xA;                                   [EFTDiscount],&#xA;                                   [OnlineQuoteDiscount],&#xA;                                   [ResponsibleDriverDiscount],&#xA;                                   [AdvanceQuoteDiscount],&#xA;                                   [SafeDrivingDiscount],&#xA;                                   [ExcessVehicleDiscount],&#xA;                                   [SafeDrivingDiscountByTerm],&#xA;                                   [PermissiveUseEndorsement],&#xA;                                   [Completed],&#xA;                                   [PolicyCreated],&#xA;                                   [CampaignName],&#xA;                                   [CampaignType],&#xA;                                   [LeadSource],&#xA;                                   [LeadSourceType],&#xA;                                   [Origin],&#xA;                                   [ValidationStatus],&#xA;                                   [IsFromFSC]&#xA;                                  );&#xA;                              &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{184D2300-870A-4DEC-92AF-256994B76184}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create dimPolicy" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create dimPolicy" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;        DECLARE @IsInc int;&#xA;&#xA;        SET @IsInc=?;&#xA;&#xA;        DECLARE @NotApplicable VARCHAR(3) = 'N/A';&#xA;                                DECLARE @EmptyString VARCHAR(10) = '';&#xA;                                DECLARE @DefaultLOB VARCHAR(25) = 'Personal Auto';&#xA;                                DECLARE @AutoPayNoEFT INT = 1;&#xA;                                DECLARE @AutoPayEFT INT = 2;&#xA;                                DECLARE @AutoPayRCCP INT = 3;&#xA;        DECLARE @No INT = 0;&#xA;        DECLARE @Yes INT = 1;&#xA;                                DECLARE @NoStr VARCHAR(3) = 'No';&#xA;                                DECLARE @YesStr VARCHAR(3) = 'Yes';&#xA;        DECLARE @Uds INT = -1;&#xA;        DECLARE @True VARCHAR(4) = 'True';&#xA;&#xA;                    &#xA;                                IF OBJECT_ID('tempdb..#PolicyPeriods_length') IS NOT NULL&#xA;                                 DROP TABLE #PolicyPeriods_length&#xA;                                  &#xA;                                SELECT ept.PolicyTermID&#xA;                                 ,dbo.fFloorDateTime(dbo.fGetDateFromUTCDate(ep.EndorsementPeriodStartDate, proggrp.TimeZone)) AS EndorsementPeriodStartDate&#xA;                                 ,dbo.fFloorDateTime(dbo.fGetDateFromUTCDate(ep.EndorsementPeriodEndDate, proggrp.TimeZone)) AS EndorsementPeriodEndDate&#xA;                                 ,DATEDIFF(dd, CASE &#xA;                                   WHEN dbo.fFloorDateTime(dbo.fGetDateFromUTCDate(ep.EndorsementPeriodStartDate, proggrp.TimeZone)) &gt; GETDATE()&#xA;                                    THEN GETDATE()&#xA;                                   ELSE dbo.fFloorDateTime(dbo.fGetDateFromUTCDate(ep.EndorsementPeriodStartDate, proggrp.TimeZone))&#xA;                                   END, CASE &#xA;                                   WHEN dbo.fFloorDateTime(dbo.fGetDateFromUTCDate(ep.EndorsementPeriodEndDate, proggrp.TimeZone)) &gt; GETDATE()&#xA;                                    THEN GETDATE()&#xA;                                   ELSE dbo.fFloorDateTime(dbo.fGetDateFromUTCDate(ep.EndorsementPeriodEndDate, proggrp.TimeZone))&#xA;                                   END) PeriodLength&#xA;                                 ,ep.PolicyActive&#xA;                                INTO #PolicyPeriods_length&#xA;                                FROM Extract.P1_EndorsementPeriod AS ep&#xA;                                LEFT JOIN Extract.P1_EndorsementPolicyTerm AS ept ON ept.EndorsementID = ep.EndorsementID&#xA;                                LEFT JOIN [Extract].[P1_PolicyTerm] AS pt ON pt.PolicyTermID = ept.PolicyTermID&#xA;                                LEFT JOIN [Extract].[P1_Program] AS prog ON prog.ProgramID = pt.ProgramID&#xA;                                LEFT JOIN [Extract].[P1_ProgramGroup] AS proggrp ON prog.ProgramGroupID = proggrp.ProgramGroupID                                  &#xA;    &#xA;                                IF OBJECT_ID('tempdb..#PolicyMaxActive_Period') IS NOT NULL&#xA;                                 DROP TABLE #PolicyMaxActive_Period&#xA;                                  &#xA;                                SELECT PolicyTermID&#xA;                                 ,MAX(EndorsementPeriodStartDate) AS MaxActiveStartDate&#xA;                                INTO #PolicyMaxActive_Period&#xA;                                FROM #PolicyPeriods_length&#xA;                                WHERE PolicyActive = 1&#xA;                                 AND PeriodLength &gt; 0&#xA;                                GROUP BY PolicyTermID       &#xA;                                &#xA;                                CREATE CLUSTERED INDEX CLUST_IX_Tmp_pp_max_active ON #PolicyMaxActive_Period (PolicyTermID)    &#xA;                                &#xA;                                IF OBJECT_ID('tempdb..#PolicyLapse') IS NOT NULL&#xA;                                 DROP TABLE #PolicyLapse&#xA;&#xA;                                SELECT PolicyTermID&#xA;                                 ,COUNT(*) AS LapseCount&#xA;                                 ,MAX(LessThen30Days) AS LessThen30Days&#xA;                                 ,MAX(From30to60Days) AS From30to60Days&#xA;                                 ,MAX(MoreThen60Days) AS MoreThen60Days&#xA;                                INTO #PolicyLapse&#xA;                                FROM (&#xA;                                 SELECT PolicyTermID&#xA;                                  ,CASE &#xA;                                   WHEN LapseLength &lt; 30&#xA;                                    THEN 1&#xA;                                   ELSE 0&#xA;                                   END AS LessThen30Days&#xA;                                  ,CASE &#xA;                                   WHEN LapseLength &gt;= 30&#xA;                                    AND LapseLength &lt; 60&#xA;                                    THEN 1&#xA;                                   ELSE 0&#xA;                                   END AS From30to60Days&#xA;                                  ,CASE &#xA;                                   WHEN LapseLength &gt;= 60&#xA;                                    THEN 1&#xA;                                   ELSE 0&#xA;                                   END AS MoreThen60Days&#xA;                                 FROM (&#xA;                                  SELECT ppl.PolicyTermID&#xA;                                   ,ppl.PeriodLength AS LapseLength&#xA;                                  FROM #PolicyPeriods_length AS ppl&#xA;                                  LEFT JOIN #PolicyMaxActive_Period AS pmp ON ppl.PolicyTermID = pmp.PolicyTermID&#xA;                                  WHERE ppl.PolicyActive = 0&#xA;                                   AND (&#xA;                                    pmp.MaxActiveStartDate &gt; EndorsementPeriodEndDate&#xA;                                    AND pmp.MaxActiveStartDate IS NOT NULL&#xA;                                    )&#xA;                                   AND PeriodLength &gt; 0&#xA;                                  ) AS a&#xA;                                 WHERE a.LapseLength &gt; 0&#xA;                                 ) AS b&#xA;                                GROUP BY PolicyTermID&#xA;&#xA;                                CREATE CLUSTERED INDEX CLUST_IX_Tmp_pol_lapse ON #PolicyLapse (PolicyTermID)&#xA;                                &#xA;                                --) Get list of renewal/new business policies&#xA;                                IF OBJECT_ID('tempdb..#RenewalNewBusiness') IS NOT NULL&#xA;                                 DROP TABLE #RenewalNewBusiness                                &#xA;                                &#xA;                                SELECT PolicyTermID&#xA;                                 ,MAX(IsRenewal) AS IsRenewal&#xA;                                 ,MAX(IsNewBusiness) AS IsNewBusiness&#xA;                                INTO #RenewalNewBusiness&#xA;                                FROM (&#xA;                                 SELECT PolicyTermID&#xA;                                  ,1 AS IsRenewal&#xA;                                  ,0 AS IsNewBusiness&#xA;                                 FROM [Extract].[P1_Endorsement]&#xA;                                 WHERE EndorsementTypeID = 2&#xA; &#xA;                                 UNION ALL&#xA; &#xA;                                 SELECT PolicyTermID&#xA;                                  ,0 AS IsRenewal&#xA;                                  ,1 AS IsNewBusiness&#xA;                                 FROM [Extract].[P1_Endorsement]&#xA;                                 WHERE EndorsementTypeID = 1&#xA;                                 ) AS rn&#xA;                                GROUP BY PolicyTermID&#xA;&#xA;                                CREATE CLUSTERED INDEX CLUST_IX_NR ON #RenewalNewBusiness (PolicyTermID)&#xA;&#xA;                                INSERT INTO [Staging].[PolicyID]&#xA;                                           ([SK_PolicyID]&#xA;                                           ,[BK_EndorsementID])                                &#xA;                                SELECT  NEXT VALUE FOR dbo.PolicyTermSequence AS SK_PolicyID&#xA;                                 ,EndorsementID AS BK_EndorsementID                                &#xA;                                FROM [Extract].[P1_EndorsementPeriod]&#xA;                        WHERE EndorsementID NOT IN (SELECT [BK_EndorsementID] FROM [Staging].[PolicyID])&#xA;                                GROUP BY EndorsementID                       &#xA;                    &#xA;                                --)Prepare Coverage Limits -- !!! Optimize !!!&#xA;                                IF OBJECT_ID('tempdb..#CoverageLimits') IS NOT NULL&#xA;                                 DROP TABLE #CoverageLimits&#xA;&#xA;                                SELECT stg_pid.SK_PolicyID&#xA;                                 ,ct.CoverageTypeCode&#xA;                                 ,MAX(LimitPerPerson) AS LimitPerPerson&#xA;                                 ,MAX(LimitPerAccident) AS LimitPerAccident&#xA;                                 ,MAX(LimitTotal) AS LimitTotal&#xA;                                 ,MAX(Deductible) AS Deductible&#xA;                                INTO #CoverageLimits&#xA;                                FROM [Extract].[P1_EndorsementPeriod] AS ep&#xA;                                LEFT JOIN [Extract].[P1_EndorsementPolicyTerm] AS ept ON ep.EndorsementID = ept.EndorsementID&#xA;                                LEFT JOIN [Extract].[P1_EndorsementVehicle] AS ev ON ev.EndorsementPolicyTermID = ept.EndorsementPolicyTermID&#xA;                                LEFT JOIN [Extract].[P1_EndorsementVehicleCoverage] AS evc ON ev.EndorsementVehicleID = evc.EndorsementVehicleID&#xA;                                LEFT JOIN [Extract].[P1_ProgramCoverage] AS pc ON evc.ProgramCoverageID = pc.ProgramCoverageID&#xA;                                LEFT JOIN [Extract].[P1_CoverageType] AS ct ON pc.CoverageTypeID = ct.CoverageTypeID&#xA;                                LEFT JOIN [Staging].[PolicyID] AS stg_pid ON stg_pid.BK_EndorsementID = ep.EndorsementID&#xA;                                WHERE ct.CoverageTypeCode IN (&#xA;                                  'BI'&#xA;                                  ,'PD'&#xA;                                  ,'MP'&#xA;                                  ,'UMBI'&#xA;                                  ,'UMPD'&#xA;                                  )&#xA;                                GROUP BY stg_pid.SK_PolicyID&#xA;                                 ,ct.CoverageTypeCode&#xA;&#xA;                                CREATE CLUSTERED INDEX IX_CoverageTypeCode_SK_PolicyID ON #CoverageLimits (&#xA;                                 CoverageTypeCode&#xA;                                 ,SK_PolicyID&#xA;                                 )&#xA;                                  &#xA;                                IF OBJECT_ID('tempdb..#EndoDiscounts') IS NOT NULL&#xA;                                DROP TABLE #EndoDiscounts;&#xA;&#xA;                                IF OBJECT_ID('tempdb..#EndoDiscounts') IS NOT NULL&#xA;                                 DROP TABLE #EndoDiscounts;&#xA;&#xA;                                WITH EndoDiscounts&#xA;                                AS (&#xA;                                 SELECT DISTINCT epa.EndorsementPolicyTermId&#xA;                                  ,pat.PremiumAdjustmentTypeName&#xA;                                  ,@YesStr AS Yes&#xA;                                 FROM Extract.P1_EndorsementPremiumAdjustment epa&#xA;                                 JOIN [Extract].[P1_PremiumAdjustmentType] pat ON pat.[PremiumAdjustmentTypeID] = epa.[PremiumAdjustmentType]&#xA;                                 )&#xA;                                SELECT EndorsementPolicyTermId&#xA;                                 ,ISNULL(EFTDiscount, @NoStr) AS EFTDiscount&#xA;                                 ,ISNULL(OnlineQuoteDiscount, @NoStr) AS OnlineQuoteDiscount&#xA;                                 ,ISNULL(ResponsibleDriverDiscount, @NoStr) AS ResponsibleDriverDiscount&#xA;                                 ,ISNULL(SafeDrivingDiscount, @NoStr) AS SafeDrivingDiscount&#xA;                                 ,ISNULL(AdvanceQuoteDiscount, @NoStr) AS AdvanceQuoteDiscount&#xA;                                 ,ISNULL(ExcessVehicleDiscount, @NoStr) AS ExcessVehicleDiscount&#xA;                                 ,ISNULL(SafeDrivingDiscountByTerm, @NoStr) AS SafeDrivingDiscountByTerm&#xA;                                  ,ISNULL(PermissiveUseEndorsement, @NoStr) AS PermissiveUseEndorsement&#xA;                                  ,ISNULL(MultiPolicyDiscount, @NoStr) AS MultiPolicyDiscount&#xA;                                  ,ISNULL(MultiCarDiscount, @NoStr) AS MultiCarDiscount&#xA;                                  ,ISNULL(EarlySigningDiscount, @NoStr) AS EarlySigningDiscount&#xA;                                  ,ISNULL(RenewalDiscount, @NoStr) AS RenewalDiscount&#xA;                                  ,ISNULL(PreferredPolicyDiscount, @NoStr) AS PreferredPolicyDiscount&#xA;                                  ,ISNULL(FirstResponderDiscount, @NoStr) AS FirstResponderDiscount&#xA;                                  ,ISNULL(PayInFullDiscount, @NoStr) AS PayInFullDiscount&#xA;                                  ,ISNULL(TripleDeductibleDiscount, @NoStr) AS TripleDeductibleDiscount&#xA;                                  ,ISNULL(EconomyPackageDiscount, @NoStr) AS EconomyPackageDiscount&#xA;                                  ,ISNULL(MeritSurcharge, @NoStr) AS MeritSurcharge&#xA;                                INTO #EndoDiscounts&#xA;                                FROM EndoDiscounts&#xA;                                PIVOT(MAX(Yes) FOR PremiumAdjustmentTypeName IN (&#xA;                                   EFTDiscount&#xA;                                   ,OnlineQuoteDiscount&#xA;                                   ,ResponsibleDriverDiscount&#xA;                                   ,SafeDrivingDiscount&#xA;                                   ,AdvanceQuoteDiscount&#xA;                                   ,ExcessVehicleDiscount&#xA;                                   ,SafeDrivingDiscountByTerm&#xA;                                      ,PermissiveUseEndorsement&#xA;                                      ,MultiPolicyDiscount&#xA;                                      ,MultiCarDiscount&#xA;                                      ,EarlySigningDiscount&#xA;                                      ,RenewalDiscount&#xA;                                      ,PreferredPolicyDiscount&#xA;                                      ,FirstResponderDiscount&#xA;                                      ,PayInFullDiscount&#xA;                                      ,TripleDeductibleDiscount&#xA;                                      ,EconomyPackageDiscount&#xA;                                      ,MeritSurcharge&#xA;                                   )) AS Discounts;&#xA;&#xA;   &#xA;&#xA;                                CREATE CLUSTERED INDEX CLUST_IX_ENDO_DISCOUNTS ON #EndoDiscounts (EndorsementPolicyTermId)   &#xA;                                &#xA;        ;WITH PoliciesData&#xA;        AS&#xA;        (&#xA;            SELECT stg_pid.SK_PolicyID AS SK_PolicyID&#xA;                                 ,ept.EndorsementID AS BK_EndorsementID&#xA;                                 ,p.PolicyID AS BK_PolicyID&#xA;                                 ,pt.PolicyTermID AS BK_PolicyTermID&#xA;                                 ,pt.NextPolicyTermID AS BK_RenewalPolicyTermID&#xA;                                 ,ept.ProducerID AS BK_ProducerID&#xA;                                 ,pt.PolicyNumber AS BK_PolicyNumber&#xA;                                 ,ISNULL(prg_grp.ProgramGroupID, @Uds) AS BK_ProgramGroupID&#xA;                                 ,dbo.fFloorDateTime(dbo.fGetDateFromUTCDate(pt.EffectiveDate, prg_grp.TimeZone)) AS EffectiveDate&#xA;                                 ,dbo.fFloorDateTime(dbo.fGetDateFromUTCDate(pt.ExpirationDate, prg_grp.TimeZone)) AS ExpirationDate&#xA;                                 ,&#xA;                                 --Product&#xA;                                 dbo.Proper(prg_grp.ProgramGroupName) AS Product&#xA;                                 ,&#xA;                                 --ProductState&#xA;                                 ISNULL(UPPER(s.StateCodeName), @NotApplicable) AS ProductState&#xA;                                 ,&#xA;                                 --IsRenewal&#xA;                                 IIF(rnb.IsRenewal = @Yes, @YesStr, @NoStr) AS IsRenewal&#xA;                                 ,&#xA;                                 --IsNewBusiness&#xA;                                 IIF(rnb.IsNewBusiness = @Yes, @YesStr, @NoStr ) AS IsNewBusiness&#xA;                                 ,&#xA;                                 --PolicyTermDays &#xA;                                 CASE &#xA;                                  WHEN DATEDIFF(dd, dbo.fFloorDateTime(dbo.fGetDateFromUTCDate(pt.EffectiveDate, prg_grp.TimeZone)), dbo.fFloorDateTime(dbo.fGetDateFromUTCDate(pt.ExpirationDate, prg_grp.TimeZone))) &gt; 0&#xA;                                   THEN CAST(DATEDIFF(dd, dbo.fFloorDateTime(dbo.fGetDateFromUTCDate(pt.EffectiveDate, prg_grp.TimeZone)), dbo.fFloorDateTime(dbo.fGetDateFromUTCDate(pt.ExpirationDate, prg_grp.TimeZone))) AS VARCHAR(7))&#xA;                                  ELSE @NotApplicable&#xA;                                  END AS PolicyTermDays&#xA;                                 ,&#xA;                                 --PolicyTermInMonths&#xA;                                 CASE &#xA;                                  WHEN pt.Term &gt; 0&#xA;                                   THEN CAST(pt.Term AS VARCHAR(7))&#xA;                                  ELSE @NotApplicable&#xA;                                  END AS PolicyTermInMonths&#xA;                                 ,&#xA;                                 --Carrier&#xA;                                 dbo.Proper(c.NAME) AS Carrier&#xA;                                 ,&#xA;                                 --PolicyZip&#xA;                                 CASE &#xA;                                  WHEN ISNUMERIC(ea.Zip) = 1&#xA;                                   AND LEN(CAST(ea.Zip AS VARCHAR)) = 5&#xA;                                   THEN CAST(ea.Zip AS VARCHAR)&#xA;                                  ELSE 'Unknown'&#xA;                                  END AS PolicyZip&#xA;                                 ,&#xA;                                 --LineOfBusiness&#xA;                                 --CASE WHEN LEN(ISNULL((p.PolicyType), '')) &gt; 0 THEN p.PolicyType ELSE 'N/A' END AS LineOfBusiness,  &#xA;                                 CAST(@DefaultLOB AS VARCHAR(40)) AS LineOfBusiness&#xA;                                 ,&#xA;                                 --PaymentPlan&#xA;                                 CASE &#xA;                                  WHEN ISNULL((pp.NAME), @EmptyString) &lt;&gt; @EmptyString&#xA;                                   THEN pp.NAME&#xA;                                  ELSE @NotApplicable&#xA;                                  END AS PaymentPlan&#xA;                                 ,&#xA;                                 --PaidInFull&#xA;                                 CASE pp.IsPayInFull&#xA;                                  WHEN @Yes&#xA;                                   THEN @YesStr&#xA;                                  WHEN @No&#xA;                                   THEN @NoStr&#xA;                                  ELSE @NotApplicable&#xA;                                  END AS PaidInFull&#xA;                                 ,&#xA;                                 --MultiCar discount&#xA;                                 ISNULL(discs.MultiCarDiscount, @NoStr) AS MultiCar_Discount&#xA;                                 ,&#xA;                                 --AutoPay&#xA;                                 CASE &#xA;                                  WHEN ept.AutoPayStatus = @AutoPayNoEFT&#xA;                                   THEN @NoStr&#xA;                                  WHEN ept.AutoPayStatus IN (&#xA;                                    @AutoPayEFT&#xA;                                    ,@AutoPayRCCP&#xA;                                    )&#xA;                                   THEN @YesStr&#xA;                                  ELSE @NotApplicable&#xA;                                  END AS EFT&#xA;                                 ,&#xA;                                 --AutoPayType&#xA;                                 ISNULL(aps.EnumStringValue, @NotApplicable) AS EFTType&#xA;                                 ,&#xA;                                 --PayInFull Discount&#xA;                                 ISNULL(discs.PayInFullDiscount, @NoStr) AS PayInFull_Discount&#xA;                                 ,&#xA;                                 --AccidentAndViolationFree Discount&#xA;                                 CASE ept.AccidentAndViolationFreeDiscount&#xA;                                  WHEN @Yes&#xA;                                   THEN @YesStr&#xA;                                  WHEN @No&#xA;                                   THEN @NoStr&#xA;                                  ELSE @NotApplicable&#xA;                                  END AS AccidentAndViolationFree_Discount&#xA;                                 ,&#xA;                                 --Unacceptable Risk surcharge&#xA;                                 CASE ept.UnacceptableRiskSurcharge&#xA;                                  WHEN @Yes&#xA;                                   THEN @YesStr&#xA;                                  WHEN @No&#xA;                                   THEN @NoStr&#xA;                                  ELSE @NotApplicable&#xA;                                  END AS UnacceptableRisk_Surcharge&#xA;                                 ,&#xA;                                 --Rating Version&#xA;                                 prg.ProgramName + '-' + CAST(prg.ProgramGroupID AS VARCHAR(7)) + '.' + CAST(prg.ProgramID AS VARCHAR(7)) AS RatingVersion&#xA;                                 ,&#xA;                                 --Coverage Limits&#xA;                                 --BI_Limits&#xA;                                 CASE &#xA;                                  WHEN limit_bi.LimitPerPerson &gt; 0&#xA;                                   OR limit_bi.LimitPerAccident &gt; 0&#xA;                                   THEN CAST(limit_bi.LimitPerPerson AS VARCHAR(7)) + '/' + CAST(limit_bi.LimitPerAccident AS VARCHAR(7))&#xA;                                  ELSE 'N/A'&#xA;                                  END AS BI_Limits&#xA;                                 ,&#xA;                                 --PD_Limits&#xA;                                 CASE &#xA;                                  WHEN limit_pd.LimitTotal &gt; 0&#xA;                                   THEN CAST(limit_pd.LimitTotal AS VARCHAR(7))&#xA;                                  ELSE @NotApplicable&#xA;                                  END AS PD_Limits&#xA;                                 ,&#xA;                                 --MP_EachPerson&#xA;                                 CASE &#xA;                                  WHEN limit_med.LimitTotal &gt; 0&#xA;                                   THEN CAST(limit_med.LimitTotal AS VARCHAR(7))&#xA;                                  ELSE @NotApplicable&#xA;                                  END AS MED_Limits&#xA;                                 ,&#xA;                                 --UMBI_Limits&#xA;                                 CASE &#xA;                                  WHEN limit_umbi.LimitPerPerson &gt; 0&#xA;                                   OR limit_umbi.LimitPerAccident &gt; 0&#xA;                                   THEN CAST(limit_umbi.LimitPerPerson AS VARCHAR(7)) + '/' + CAST(limit_umbi.LimitPerAccident AS VARCHAR(7))&#xA;                                  ELSE @NotApplicable&#xA;                                  END AS UMBI_Limits&#xA;                                 ,&#xA;                                 --UMPD_Limits&#xA;                                 CASE &#xA;                                  WHEN limit_umpd.LimitTotal &gt; 0&#xA;                                   THEN CAST(limit_umpd.LimitTotal AS VARCHAR(7))&#xA;                                  ELSE @NotApplicable&#xA;                                  END AS UMPD_Limits&#xA;                                 ,&#xA;                                 --HasClaims&#xA;                                 'No Claims' AS HasClaims&#xA;                                 ,&#xA;                                 --CASE WHEN pol_claims.PolicyTermID IS NULL THEN 'No Claims' ELSE 'Has Claims' END AS HasClaims,&#xA;                                 --HasLapse &#xA;                                 CAST(CASE &#xA;                                   WHEN plapse.LapseCount &gt; 0&#xA;                                    THEN @YesStr&#xA;                                   ELSE @NoStr&#xA;                                   END AS VARCHAR(3)) AS HasLapse&#xA;                                 ,&#xA;                                 --MaxLapseLength &#xA;                                 CAST(CASE &#xA;                                   WHEN plapse.From30to60Days = 1&#xA;                                    THEN '30 to 60 Days'&#xA;                                   WHEN plapse.MoreThen60Days = 1&#xA;                                    THEN '&gt;= 60 Days'&#xA;                                   WHEN plapse.LessThen30Days = 1&#xA;                                    THEN '&lt; 30 Days'&#xA;                                   ELSE '0 Days'&#xA;                                   END AS VARCHAR(14)) AS MaxLapseLength&#xA;                                 ,&#xA;                                 --LapseCount&#xA;                                 ISNULL(plapse.LapseCount, 0) AS LapseCount&#xA;                                 ,CAST(CASE &#xA;                                   WHEN ept.PolicyTermStatusID IN (&#xA;                                     4&#xA;                                     ,5&#xA;                                     )&#xA;                                    THEN 1&#xA;                                   ELSE 0&#xA;                                   END AS INT) AS ExcludeFromPeriods&#xA;                                 ,pt.ProgramID AS BK_ProgramID&#xA;                                 ,CASE &#xA;                                  WHEN ISNULL(ept_uwtier.EffectiveUnderwritingTier, @EmptyString) = @EmptyString&#xA;                                   THEN @NotApplicable&#xA;                                  ELSE ept_uwtier.EffectiveUnderwritingTier&#xA;                                  END AS EffectiveUnderwritingTier&#xA;                                 ,&#xA;                                 --TripleDeductibleBuyBackOption &#xA;                                 ISNULL(discs.TripleDeductibleDiscount, @NoStr) AS TripleDeductibleBuyBackOption&#xA;                                 ,&#xA;                                 --EconomyPackageOption &#xA;                                 ISNULL(discs.EconomyPackageDiscount, @NoStr) AS EconomyPackageOption&#xA;                                 ,&#xA;                                 -- Comp Zip Territory&#xA;                                 CASE &#xA;                                  WHEN ISNULL(ept_compzipterr.CompZipTerritory, @EmptyString) = @EmptyString&#xA;                                   THEN @NotApplicable&#xA;                                  ELSE ept_compzipterr.CompZipTerritory&#xA;                                  END AS CompZipTerritory&#xA;                                 ,&#xA;                                 -- Zip Territory&#xA;                                 CASE &#xA;                                  WHEN ISNULL(ept_zipterr.ZipTerritory, @EmptyString) = @EmptyString&#xA;                                   THEN @NotApplicable&#xA;                                  ELSE ept_zipterr.ZipTerritory&#xA;                                  END AS ZipTerritory&#xA;                                 ,&#xA;                                 --Renewal_Discount&#xA;                                 ISNULL(discs.RenewalDiscount, @NoStr) AS Renewal_Discount&#xA;                                 ,                                  &#xA;                                 ISNULL(discs.MeritSurcharge, @NoStr) AS Merit_Surcharge&#xA;                                 ,&#xA;                                 ISNULL(discs.EarlySigningDiscount, @NoStr) AS EarlySigning_Discount&#xA;                                 ,&#xA;                                 --FirstResponder_Discount&#xA;                                 ISNULL(discs.FirstResponderDiscount, @NoStr) AS FirstResponder_Discount&#xA;                                 ,&#xA;                                 --IsMultiPolicy&#xA;                                 ISNULL(discs.MultiPolicyDiscount, @NoStr) AS IsMultiPolicy&#xA;                                 ,&#xA;                                 --HouseholdMemberDrivers&#xA;                                 CAST(CASE &#xA;                                   WHEN ept.HouseholdMemberDrivers &gt;= 0&#xA;                                    THEN CAST(ept.HouseholdMemberDrivers AS VARCHAR(6))&#xA;                                   ELSE @NotApplicable&#xA;                                   END AS VARCHAR(6)) AS HouseholdMemberDrivers&#xA;                                 ,&#xA;                                 --ExcludedUnlicensedDrivers&#xA;                                 CAST(CASE &#xA;                                   WHEN ept.ExcludedUnlicensedDrivers &gt;= 0&#xA;                                    THEN CAST(ept.ExcludedUnlicensedDrivers AS VARCHAR(6))&#xA;                                   ELSE @NotApplicable&#xA;                                   END AS VARCHAR(6)) AS ExcludedUnlicensedDrivers&#xA;                                 ,&#xA;                                 --ExcludedLicensedDrivers&#xA;                                 CAST(CASE &#xA;                                   WHEN ept.ExcludedLicensedDrivers &gt;= 0&#xA;                                    THEN CAST(ept.ExcludedLicensedDrivers AS VARCHAR(6))&#xA;                                   ELSE @NotApplicable&#xA;                                   END AS VARCHAR(6)) AS ExcludedLicensedDrivers&#xA;                                 ,&#xA;                                 --MaybeFirstResponder_Discount&#xA;                                 CASE ept.MaybeFirstResponderDiscount&#xA;                                  WHEN @Yes&#xA;                                   THEN @YesStr&#xA;                                  WHEN @No&#xA;                                   THEN @NoStr&#xA;                                  ELSE @NotApplicable&#xA;                                  END AS MaybeFirstResponder_Discount&#xA;                                 ,&#xA;                                 --PropertyDamageDropDown_Discount&#xA;                                 CASE ept.PropertyDamageDropDownDiscount&#xA;                                  WHEN @Yes&#xA;                                   THEN @YesStr&#xA;                                  WHEN @No&#xA;                                   THEN @NoStr&#xA;                                  ELSE @NotApplicable&#xA;                                  END AS PropertyDamageDropDown_Discount&#xA;                                 ,&#xA;                                 --PreferredPolicy_Discount&#xA;                                 ISNULL(discs.PreferredPolicyDiscount, @NoStr) AS PreferredPolicy_Discount&#xA;                                 ,&#xA;                                 --DiscountEDoc_Discount&#xA;                                 CASE ept.DiscountEDoc&#xA;                                  WHEN @Yes&#xA;                                   THEN @YesStr&#xA;                                  WHEN @No&#xA;                                   THEN @NoStr&#xA;                                  ELSE @NotApplicable&#xA;                                  END AS DiscountEDoc_Discount&#xA;                                 ,&#xA;                                 --IsRoadsideMembershipEnrolled&#xA;                                 CASE ept.IsRoadsideMembershipEnrolled&#xA;                                  WHEN @Yes&#xA;                                   THEN @YesStr&#xA;                                  WHEN @No&#xA;                                   THEN @NoStr&#xA;                                  ELSE @NotApplicable&#xA;                                  END AS IsRoadsideMembershipEnrolled&#xA;                                 ,&#xA;                                 --SafeDrivingLevel&#xA;                                 CAST(CASE &#xA;                                   WHEN ISNULL(ept.SafeDrivingLevel,@EmptyString) = @EmptyString&#xA;                                    THEN @NotApplicable&#xA;                                   ELSE ept.SafeDrivingLevel&#xA;                                   END AS VARCHAR(6)) AS SafeDrivingLevel&#xA;                                 ,CAST(CASE &#xA;                                   WHEN ISNULL(ept_credittier.CreditTier, @EmptyString) = @EmptyString&#xA;                                    THEN @NotApplicable&#xA;                                   ELSE ept_credittier.CreditTier&#xA;                                   END AS VARCHAR(6)) AS CreditTier&#xA;                                 ,ISNULL(discs.EFTDiscount, @NoStr) AS EFTDiscount&#xA;                                 ,ISNULL(discs.OnlineQuoteDiscount, @NoStr) AS OnlineQuoteDiscount&#xA;                                  ,ISNULL(discs.ResponsibleDriverDiscount, @NoStr) AS ResponsibleDriverDiscount&#xA;                                 ,ISNULL(discs.AdvanceQuoteDiscount, @NoStr) AS AdvanceQuoteDiscount&#xA;                                 ,ISNULL(discs.SafeDrivingDiscount, @NoStr) AS SafeDrivingDiscount&#xA;                                 ,ISNULL(discs.ExcessVehicleDiscount, @NoStr) AS ExcessVehicleDiscount&#xA;                                 ,ISNULL(discs.SafeDrivingDiscountByTerm, @NoStr) AS SafeDrivingDiscountByTerm &#xA;                                  ,ISNULL(discs.PermissiveUseEndorsement, @NoStr) AS PermissiveUseEndorsement&#xA;                                FROM [Extract].[P1_EndorsementPolicyTerm] AS ept&#xA;                                LEFT JOIN #EndoDiscounts AS discs ON ept.EndorsementPolicyTermID = discs.EndorsementPolicyTermID&#xA;                                JOIN [Extract].[P1_PolicyTerm] AS pt ON ept.PolicyTermID = pt.PolicyTermID&#xA;                                JOIN [Extract].[P1_Policy] AS p ON pt.PolicyID = p.PolicyID&#xA;                                JOIN [Staging].[PolicyID] AS stg_pid ON ept.EndorsementID = stg_pid.BK_EndorsementID&#xA;        JOIN [Extract].[P1_AutoPayStatus] aps ON ept.AutoPayStatus = aps.AutoPayStatusId&#xA;                                JOIN [Extract].[P1_Program] AS prg ON prg.ProgramID = pt.ProgramID&#xA;                                JOIN [Extract].[P1_ProgramGroup] AS prg_grp ON prg_grp.ProgramGroupID = prg.ProgramGroupID&#xA;                                JOIN [Extract].[P1_StateCode] AS s ON s.StateCodeID = prg_grp.StateCodeID&#xA;                                JOIN [Extract].[P1_Carrier] AS c ON prg.CarrierID = c.CarrierID&#xA;                                JOIN [Extract].[P1_EndorsementAddress] AS ea ON ea.EndorsementAddressID = ept.EndorsementMailingAddressID&#xA;                                JOIN [Extract].[P1_PayPlan] AS pp ON ept.PayplanID = pp.PayPlanID&#xA;                                LEFT JOIN #CoverageLimits AS limit_bi ON limit_bi.SK_PolicyID = stg_pid.SK_PolicyID&#xA;                                 AND limit_bi.CoverageTypeCode = 'BI'&#xA;                                LEFT JOIN #CoverageLimits AS limit_pd ON limit_pd.SK_PolicyID = stg_pid.SK_PolicyID&#xA;                                 AND limit_pd.CoverageTypeCode = 'PD'&#xA;                                LEFT JOIN #CoverageLimits AS limit_med ON limit_med.SK_PolicyID = stg_pid.SK_PolicyID&#xA;                                 AND limit_med.CoverageTypeCode = 'MP'&#xA;                                LEFT JOIN #CoverageLimits AS limit_umbi ON limit_umbi.SK_PolicyID = stg_pid.SK_PolicyID&#xA;                                 AND limit_umbi.CoverageTypeCode = 'UMBI'&#xA;                                LEFT JOIN #CoverageLimits AS limit_umpd ON limit_umpd.SK_PolicyID = stg_pid.SK_PolicyID&#xA;                                 AND limit_umpd.CoverageTypeCode = 'UMPD'&#xA;                                LEFT JOIN #PolicyLapse AS plapse ON ept.PolicyTermID = plapse.PolicyTermID&#xA;                                LEFT JOIN #RenewalNewBusiness AS rnb ON ept.PolicyTermID = rnb.PolicyTermID&#xA;                                LEFT JOIN (&#xA;                                 SELECT EndorsementPolicyTermID&#xA;                                  ,max(Value) AS EffectiveUnderwritingTier&#xA;                                 FROM Extract.P1_EndorsementRateCustomProperty&#xA;                                 WHERE NAME = 'EffectiveUwTier'&#xA;                                 GROUP BY EndorsementPolicyTermID&#xA;                                 ) AS ept_uwtier ON ept_uwtier.EndorsementPolicyTermID = ept.EndorsementPolicyTermID&#xA;                                LEFT JOIN (&#xA;                                 SELECT EndorsementPolicyTermID&#xA;                                  ,max(Value) AS CompZipTerritory&#xA;                                 FROM Extract.P1_EndorsementRateCustomProperty&#xA;                                 WHERE NAME = 'CompZipTerritory'&#xA;                                 GROUP BY EndorsementPolicyTermID&#xA;                                 ) AS ept_compzipterr ON ept_compzipterr.EndorsementPolicyTermID = ept.EndorsementPolicyTermID&#xA;                                LEFT JOIN (&#xA;                                 SELECT EndorsementPolicyTermID&#xA;                                  ,max(Value) AS ZipTerritory&#xA;                                 FROM Extract.P1_EndorsementRateCustomProperty&#xA;                                 WHERE NAME = 'ZipTerritory'&#xA;                                 GROUP BY EndorsementPolicyTermID&#xA;                                 ) AS ept_zipterr ON ept_zipterr.EndorsementPolicyTermID = ept.EndorsementPolicyTermID&#xA;                                LEFT JOIN (&#xA;                                 SELECT EndorsementPolicyTermID&#xA;                                  ,max(Value) AS CreditTier&#xA;                                 FROM Extract.P1_EndorsementRateCustomProperty&#xA;                                 WHERE NAME = 'CreditTier'&#xA;                                 GROUP BY EndorsementPolicyTermID&#xA;                                 ) AS ept_credittier ON ept_credittier.EndorsementPolicyTermID = ept.EndorsementPolicyTermID&#xA;        )       &#xA;        MERGE [DataMart].[dimPolicy] AS TGT&#xA;        USING (SELECT * FROM PoliciesData)&#xA;        AS Policies&#xA;         ON Policies.SK_PolicyID = TGT.SK_PolicyID&#xA;        WHEN MATCHED THEN UPDATE&#xA;         SET&#xA;         TGT.[BK_EndorsementID] = Policies.[BK_EndorsementID],&#xA;         TGT.[BK_PolicyID] = Policies.[BK_PolicyID],&#xA;         TGT.[BK_PolicyTermID] = Policies.[BK_PolicyTermID],&#xA;         TGT.[BK_RenewalPolicyTermID] = Policies.[BK_RenewalPolicyTermID],&#xA;         TGT.[BK_ProducerID] = Policies.[BK_ProducerID],&#xA;         TGT.[BK_PolicyNumber] = Policies.[BK_PolicyNumber],&#xA;         TGT.[BK_ProgramGroupID] = Policies.[BK_ProgramGroupID],&#xA;         TGT.[EffectiveDate] = Policies.[EffectiveDate],&#xA;         TGT.[ExpirationDate] = Policies.[ExpirationDate],&#xA;         TGT.[Product] = Policies.[Product],&#xA;         TGT.[ProductState] = Policies.[ProductState],&#xA;         TGT.[IsRenewal] = Policies.[IsRenewal],&#xA;         TGT.[IsNewBusiness] = Policies.[IsNewBusiness],&#xA;         TGT.[PolicyTermDays] = Policies.[PolicyTermDays],&#xA;         TGT.[PolicyTermInMonths] = Policies.[PolicyTermInMonths],&#xA;         TGT.[Carrier] = Policies.[Carrier],&#xA;         TGT.[PolicyZip] = Policies.[PolicyZip],&#xA;         TGT.[LineOfBusiness] = Policies.[LineOfBusiness],&#xA;         TGT.[PaymentPlan] = Policies.[PaymentPlan],&#xA;         TGT.[PaidInFull] = Policies.[PaidInFull],&#xA;         TGT.[MultiCar_Discount] = Policies.[MultiCar_Discount],&#xA;         TGT.[EFT] = Policies.[EFT],&#xA;         TGT.[EFTType] = Policies.[EFTType],&#xA;         TGT.[PayInFull_Discount] = Policies.[PayInFull_Discount],&#xA;         TGT.[AccidentAndViolationFree_Discount] = Policies.[AccidentAndViolationFree_Discount],&#xA;         TGT.[UnacceptableRisk_Surcharge] = Policies.[UnacceptableRisk_Surcharge],&#xA;         TGT.[RatingVersion] = Policies.[RatingVersion],&#xA;         TGT.[BI_Limits] = Policies.[BI_Limits],&#xA;         TGT.[PD_Limits] = Policies.[PD_Limits],&#xA;         TGT.[MED_Limits] = Policies.[MED_Limits],&#xA;         TGT.[UMBI_Limits] = Policies.[UMBI_Limits],&#xA;         TGT.[UMPD_Limits] = Policies.[UMPD_Limits],&#xA;         TGT.[HasClaims] = Policies.[HasClaims],&#xA;         TGT.[HasLapse] = Policies.[HasLapse],&#xA;         TGT.[MaxLapseLength] = Policies.[MaxLapseLength],&#xA;         TGT.[LapseCount] = Policies.[LapseCount],&#xA;         TGT.[ExcludeFromPeriods] = Policies.[ExcludeFromPeriods],&#xA;         TGT.[BK_ProgramID] = Policies.[BK_ProgramID],&#xA;         TGT.[EffectiveUnderwritingTier] = Policies.[EffectiveUnderwritingTier],&#xA;         TGT.[TripleDeductibleBuyBackOption] = Policies.[TripleDeductibleBuyBackOption],&#xA;         TGT.[EconomyPackageOption] = Policies.[EconomyPackageOption],&#xA;         TGT.[CompZipTerritory] = Policies.[CompZipTerritory],&#xA;         TGT.[ZipTerritory] = Policies.[ZipTerritory],&#xA;         TGT.[Renewal_Discount] = Policies.[Renewal_Discount],&#xA;         TGT.[Merit_Surcharge] = Policies.[Merit_Surcharge],&#xA;         TGT.[EarlySigning_Discount] = Policies.[EarlySigning_Discount],&#xA;         TGT.[FirstResponder_Discount] = Policies.[FirstResponder_Discount],&#xA;         TGT.[IsMultiPolicy] = Policies.[IsMultiPolicy],&#xA;         TGT.[HouseholdMemberDrivers] = Policies.[HouseholdMemberDrivers],&#xA;         TGT.[ExcludedUnlicensedDrivers] = Policies.[ExcludedUnlicensedDrivers],&#xA;         TGT.[ExcludedLicensedDrivers] = Policies.[ExcludedLicensedDrivers],&#xA;         TGT.[MaybeFirstResponder_Discount] = Policies.[MaybeFirstResponder_Discount],&#xA;         TGT.[PropertyDamageDropDown_Discount] = Policies.[PropertyDamageDropDown_Discount],&#xA;         TGT.[PreferredPolicy_Discount] = Policies.[PreferredPolicy_Discount],&#xA;         TGT.[DiscountEDoc_Discount] = Policies.[DiscountEDoc_Discount],&#xA;         TGT.[IsRoadsideMembershipEnrolled] = Policies.[IsRoadsideMembershipEnrolled],&#xA;         TGT.[SafeDrivingLevel] = Policies.[SafeDrivingLevel],&#xA;         TGT.[CreditTier] = Policies.[CreditTier],&#xA;         TGT.[EFTDiscount] = Policies.[EFTDiscount],&#xA;         TGT.[OnlineQuoteDiscount] = Policies.[OnlineQuoteDiscount],&#xA;         TGT.[ResponsibleDriverDiscount] = Policies.[ResponsibleDriverDiscount],&#xA;         TGT.[AdvanceQuoteDiscount] = Policies.[AdvanceQuoteDiscount],&#xA;         TGT.[SafeDrivingDiscount] = Policies.[SafeDrivingDiscount],&#xA;         TGT.[ExcessVehicleDiscount] = Policies.[ExcessVehicleDiscount],&#xA;         TGT.[SafeDrivingDiscountByTerm] = Policies.[SafeDrivingDiscountByTerm],&#xA;         TGT.[PermissiveUseEndorsement] = Policies.[PermissiveUseEndorsement]&#xA;        WHEN NOT MATCHED THEN&#xA;        INSERT&#xA;        ([SK_PolicyID]&#xA;                                           ,[BK_EndorsementID]&#xA;                                           ,[BK_PolicyID]&#xA;                                           ,[BK_PolicyTermID]&#xA;                                           ,[BK_RenewalPolicyTermID]&#xA;                                           ,[BK_ProducerID]&#xA;                                           ,[BK_PolicyNumber]&#xA;                                           ,[BK_ProgramGroupID]&#xA;                                           ,[EffectiveDate]&#xA;                                           ,[ExpirationDate]&#xA;                                           ,[Product]&#xA;                                           ,[ProductState]&#xA;                                           ,[IsRenewal]&#xA;                                           ,[IsNewBusiness]&#xA;                                           ,[PolicyTermDays]&#xA;                                           ,[PolicyTermInMonths]&#xA;                                           ,[Carrier]&#xA;                                           ,[PolicyZip]&#xA;                                           ,[LineOfBusiness]&#xA;                                           ,[PaymentPlan]&#xA;                                           ,[PaidInFull]&#xA;                                           ,[MultiCar_Discount]&#xA;                                           ,[EFT]&#xA;                                           ,[EFTType]&#xA;                                           ,[PayInFull_Discount]&#xA;                                           ,[AccidentAndViolationFree_Discount]&#xA;                                           ,[UnacceptableRisk_Surcharge]&#xA;                                           ,[RatingVersion]&#xA;                                           ,[BI_Limits]&#xA;                                           ,[PD_Limits]&#xA;                                           ,[MED_Limits]&#xA;                                           ,[UMBI_Limits]&#xA;                                           ,[UMPD_Limits]&#xA;                                           ,[HasClaims]&#xA;                                           ,[HasLapse]&#xA;                                           ,[MaxLapseLength]&#xA;                                           ,[LapseCount]&#xA;                                           ,[ExcludeFromPeriods]&#xA;                                           ,[BK_ProgramID]&#xA;                                           ,[EffectiveUnderwritingTier]&#xA;                                           ,[TripleDeductibleBuyBackOption]&#xA;                                           ,[EconomyPackageOption]&#xA;                                           ,[CompZipTerritory]&#xA;                                           ,[ZipTerritory]&#xA;                                           ,[Renewal_Discount]&#xA;                                           ,[Merit_Surcharge]&#xA;                                           ,[EarlySigning_Discount]&#xA;                                           ,[FirstResponder_Discount]&#xA;                                           ,[IsMultiPolicy]&#xA;                                           ,[HouseholdMemberDrivers]&#xA;                                           ,[ExcludedUnlicensedDrivers]&#xA;                                           ,[ExcludedLicensedDrivers]&#xA;                                           ,[MaybeFirstResponder_Discount]&#xA;                                           ,[PropertyDamageDropDown_Discount]&#xA;                                           ,[PreferredPolicy_Discount]&#xA;                                           ,[DiscountEDoc_Discount]&#xA;                                           ,[IsRoadsideMembershipEnrolled]&#xA;                                           ,[SafeDrivingLevel]&#xA;                                           ,[CreditTier]&#xA;                                           ,[EFTDiscount]&#xA;                                           ,[OnlineQuoteDiscount]&#xA;                                           ,[ResponsibleDriverDiscount]&#xA;                                           ,[AdvanceQuoteDiscount]&#xA;                                           ,[SafeDrivingDiscount]&#xA;                                           ,[ExcessVehicleDiscount]&#xA;                                           ,[SafeDrivingDiscountByTerm]&#xA;                                           ,[PermissiveUseEndorsement])&#xA;        VALUES&#xA;        ([SK_PolicyID]&#xA;                                           ,[BK_EndorsementID]&#xA;                                           ,[BK_PolicyID]&#xA;                                           ,[BK_PolicyTermID]&#xA;                                           ,[BK_RenewalPolicyTermID]&#xA;                                           ,[BK_ProducerID]&#xA;                                           ,[BK_PolicyNumber]&#xA;                                           ,[BK_ProgramGroupID]&#xA;                                           ,[EffectiveDate]&#xA;                                           ,[ExpirationDate]&#xA;                                           ,[Product]&#xA;                                           ,[ProductState]&#xA;                                           ,[IsRenewal]&#xA;                                           ,[IsNewBusiness]&#xA;                                           ,[PolicyTermDays]&#xA;                                           ,[PolicyTermInMonths]&#xA;                                           ,[Carrier]&#xA;                                           ,[PolicyZip]&#xA;                                           ,[LineOfBusiness]&#xA;                                           ,[PaymentPlan]&#xA;                                           ,[PaidInFull]&#xA;                                           ,[MultiCar_Discount]&#xA;                                           ,[EFT]&#xA;                                           ,[EFTType]&#xA;                                           ,[PayInFull_Discount]&#xA;                                           ,[AccidentAndViolationFree_Discount]&#xA;                                           ,[UnacceptableRisk_Surcharge]&#xA;                                           ,[RatingVersion]&#xA;                                           ,[BI_Limits]&#xA;                                           ,[PD_Limits]&#xA;                                           ,[MED_Limits]&#xA;                                           ,[UMBI_Limits]&#xA;                                           ,[UMPD_Limits]&#xA;                                           ,[HasClaims]&#xA;                                           ,[HasLapse]&#xA;                                           ,[MaxLapseLength]&#xA;                                           ,[LapseCount]&#xA;                                           ,[ExcludeFromPeriods]&#xA;                                           ,[BK_ProgramID]&#xA;                                           ,[EffectiveUnderwritingTier]&#xA;                                           ,[TripleDeductibleBuyBackOption]&#xA;                                           ,[EconomyPackageOption]&#xA;                                           ,[CompZipTerritory]&#xA;                                           ,[ZipTerritory]&#xA;                                           ,[Renewal_Discount]&#xA;                                           ,[Merit_Surcharge]&#xA;                                           ,[EarlySigning_Discount]&#xA;                                           ,[FirstResponder_Discount]&#xA;                                           ,[IsMultiPolicy]&#xA;                                           ,[HouseholdMemberDrivers]&#xA;                                           ,[ExcludedUnlicensedDrivers]&#xA;                                           ,[ExcludedLicensedDrivers]&#xA;                                           ,[MaybeFirstResponder_Discount]&#xA;                                           ,[PropertyDamageDropDown_Discount]&#xA;                                           ,[PreferredPolicy_Discount]&#xA;                                           ,[DiscountEDoc_Discount]&#xA;                                           ,[IsRoadsideMembershipEnrolled]&#xA;                                           ,[SafeDrivingLevel]&#xA;                                           ,[CreditTier]&#xA;                                           ,[EFTDiscount]&#xA;                                           ,[OnlineQuoteDiscount]&#xA;                                           ,[ResponsibleDriverDiscount]&#xA;                                           ,[AdvanceQuoteDiscount]&#xA;                                           ,[SafeDrivingDiscount]&#xA;                                           ,[ExcessVehicleDiscount]&#xA;                                           ,[SafeDrivingDiscountByTerm]&#xA;                                           ,[PermissiveUseEndorsement]);&#xA;                      &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                      <SQLTask:ParameterBinding SQLTask:DataType="17" SQLTask:DtsVariableName="User::IsIncremental" SQLTask:ParameterDirection="Input" SQLTask:ParameterName="0" SQLTask:ParameterSize="0">
                      </SQLTask:ParameterBinding>
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{DCDFAFD6-776B-4EF6-B5CB-545D8EE53AD3}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create dimDateTimeTools" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create dimDateTimeTools" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;       IF object_id('[DataMart].[DateTool]') IS NOT NULL DROP VIEW [DataMart].[DateTool]&#xA;       IF object_id('[DataMart].[DateAggregation]') IS NOT NULL DROP VIEW [DataMart].[DateAggregation]&#xA;       IF object_id('[DataMart].[DateComparison]') IS NOT NULL DROP VIEW [DataMart].[DateComparison]&#xA;       GO&#xA;&#xA;       CREATE VIEW [DataMart].[DateAggregation] AS&#xA;       SELECT 0 AS ID_Aggregation, 'Regular' AS Aggregation&#xA;       UNION ALL&#xA;       SELECT 1 AS ID_Aggregation, 'Year To Date' AS Aggregation&#xA;       UNION ALL&#xA;       SELECT 2 AS ID_Aggregation, 'Last 12 Months' AS Aggregation&#xA;       UNION ALL&#xA;       SELECT 3 AS ID_Aggregation, 'Total Current Year' AS Aggregation&#xA;       UNION ALL&#xA;       SELECT 4 AS ID_Aggregation, 'Inception To Date' AS Aggregation&#xA;&#xA;       GO&#xA;&#xA;       CREATE VIEW [DataMart].[DateComparison] AS&#xA;       SELECT 0 AS ID_Comparison, 'Regular' AS Comparison&#xA;       UNION ALL&#xA;       SELECT 1 AS ID_Comparison, 'Previous Year' AS Comparison&#xA;       UNION ALL&#xA;       SELECT 2 AS ID_Comparison, 'Diff. Over Previous Year' AS Comparison&#xA;       UNION ALL&#xA;       SELECT 3 AS ID_Comparison, 'Diff. % Over Previous Year' AS Comparison&#xA;       GO&#xA;&#xA;       CREATE VIEW [DataMart].[DateTool] AS&#xA;       SELECT &#xA;        a.ID_Aggregation, &#xA;        s.ID_Comparison, &#xA;        CAST( ID_Comparison AS VARCHAR ) + ' - ' + CAST( ID_Aggregation AS VARCHAR ) AS Description&#xA;       FROM DateAggregation a&#xA;       CROSS JOIN DateComparison s&#xA;       GO        &#xA;        &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{795195C9-7D69-4001-B04B-68538AB7BB44}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create dimCoverage" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create dimCoverage" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                                MERGE [DataMart].[dimCoverage] AS TGT&#xA;                                USING (&#xA;                                 SELECT &#xA;                                   CoverageTypeCode AS CoverageCode,&#xA;                                   CoverageTypeDisplayName AS CoverageName,&#xA;                                   CoverageTypeID as BK_CoverageID&#xA;                                 FROM [Extract].[P1_CoverageType]&#xA;                                 GROUP BY CoverageTypeCode, CoverageTypeDisplayName, CoverageTypeID &#xA;                                )&#xA;                                as coverages&#xA;                                 ON coverages.BK_CoverageID = TGT.BK_CoverageID&#xA;                                WHEN MATCHED THEN UPDATE&#xA;                                SET &#xA;                                 TGT.CoverageCode = coverages.CoverageCode,&#xA;                                 TGT.CoverageName = coverages.CoverageName&#xA;                                WHEN NOT MATCHED THEN&#xA;                                INSERT&#xA;                                (&#xA;                                 BK_CoverageID,&#xA;                                 CoverageCode,&#xA;                                 CoverageName&#xA;                                )&#xA;                                VALUES&#xA;                                (&#xA;                                 BK_CoverageID,&#xA;                                 CoverageCode,&#xA;                                 CoverageName&#xA;                                );&#xA;                        &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{885A8F5E-9829-43EF-B76E-10EF4378A116}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create dimVehicle" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create dimVehicle" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;              DECLARE @Yes INT = 1;&#xA;           DECLARE @No INT = 0;&#xA;           DECLARE @NotApplicable VARCHAR(3) = 'N/A';&#xA;              DECLARE @YesStr VARCHAR(3) = 'Yes';&#xA;              DECLARE @NoStr VARCHAR(3) = 'No';&#xA;              DECLARE @None VARCHAR(3) = 'None';&#xA;              DECLARE @Active VARCHAR(7) = 'Active';&#xA;              DECLARE @Passive VARCHAR(7) = 'Passive';&#xA;              DECLARE @DeductibleComp VARCHAR(5) = 'COMP';&#xA;              DECLARE @DeductibleColl VARCHAR(5) = 'COLL';&#xA;              DECLARE @DeductibleComgl VARCHAR(5) = 'COMGL';&#xA;              DECLARE @EmptyString VARCHAR(10) = '';     &#xA;              DECLARE @LeasedOwnershipStatusId int = 2&#xA;              DECLARE @OtherOwnershipStatusId int = 3              &#xA;              &#xA;                              &#xA;        IF OBJECT_ID('tempdb..#VehicleDeductible') IS NOT NULL DROP TABLE #VehicleDeductible           &#xA;      &#xA;              &#xA;       -- Assign ID_Vehicle surrogate key&#xA;              INSERT INTO [Staging].[VehicleID] (&#xA;               [SK_VehicleID]&#xA;               ,[BK_EndorsementID]&#xA;               ,[BK_EndorsementPolicyTermID]&#xA;               ,[BK_VehicleID]&#xA;               ,[BK_EndorsementVehicleID]&#xA;               ,[PolicyTermStatusID]&#xA;               )&#xA;              SELECT NEXT VALUE&#xA;              FOR dbo.VehicleSequence AS SK_VehicleID&#xA;               ,ev.EndorsementID AS BK_EndorsementID&#xA;               ,ev.EndorsementPolicyTermID AS BK_EndorsementPolicyTermID&#xA;               ,ev.VehicleID AS BK_VehicleID&#xA;               ,ev.EndorsementVehicleID AS BK_EndorsementVehicleID&#xA;               ,ept.PolicyTermStatusID&#xA;              FROM [Extract].[P1_EndorsementVehicle] AS ev&#xA;              JOIN [Extract].[P1_EndorsementPolicyTerm] AS ept ON ev.EndorsementPolicyTermID = ept.EndorsementPolicyTermID&#xA;              WHERE ev.EndorsementVehicleID NOT IN (&#xA;                SELECT BK_EndorsementVehicleID&#xA;                FROM [Staging].[VehicleID]&#xA;                )&#xA;                  &#xA;              INSERT INTO [Staging].[EndorsementVehicleCoverage] (BK_EndorsementVehicleID,BK_EndorsementVehicleCoverageID,&#xA;                  Premium, ProgramCoverageID, ProducerId)&#xA;              SELECT evc.EndorsementVehicleID, evc.EndorsementVehicleCoverageID, evc.Premium, evc.ProgramCoverageID, ept.ProducerID&#xA;              FROM [Extract].[P1_EndorsementVehicleCoverage] evc&#xA;              JOIN [Extract].[P1_EndorsementVehicle] ev&#xA;              ON evc.EndorsementVehicleID = ev.EndorsementVehicleID&#xA;              JOIN [Extract].[P1_EndorsementPolicyTerm] ept&#xA;              ON ept.EndorsementPolicyTermID = ev.EndorsementPolicyTermID &#xA;              WHERE evc.EndorsementVehicleCoverageID NOT IN (&#xA;                  SELECT BK_EndorsementVehicleCoverageID&#xA;                  FROM [Staging].[EndorsementVehicleCoverage]                  &#xA;                  )&#xA;&#xA;       --)Prepare Coverage Limits -- finish that part.&#xA;        SELECT stg_vid.SK_VehicleID,&#xA;            ct.CoverageTypeCode,&#xA;            MAX(Deductible) AS Deductible &#xA;        INTO #VehicleDeductible&#xA;        FROM [Extract].[P1_EndorsementPeriod] AS ep&#xA;        LEFT JOIN [Extract].[P1_EndorsementPolicyTerm] AS ept ON ep.EndorsementID = ep.EndorsementID    &#xA;        LEFT JOIN [Extract].[P1_EndorsementVehicle] AS ev ON ev.EndorsementPolicyTermID = ept.EndorsementPolicyTermID&#xA;        LEFT JOIN [Extract].[P1_EndorsementVehicleCoverage] AS evc ON ev.EndorsementVehicleID = evc.EndorsementVehicleID&#xA;        LEFT JOIN [Extract].[P1_ProgramCoverage] AS pc ON evc.ProgramCoverageID = pc.ProgramCoverageID&#xA;        LEFT JOIN [Extract].[P1_CoverageType] AS ct ON pc.CoverageTypeID = ct.CoverageTypeID&#xA;        LEFT JOIN [Staging].[VehicleID] AS stg_vid ON stg_vid.BK_EndorsementID = ep.EndorsementID AND ev.VehicleID = stg_vid.BK_VehicleID&#xA;        WHERE ct.CoverageTypeCode IN ('COMP', 'COLL', 'COMGL')&#xA;           AND stg_vid.SK_VehicleID IS NOT NULL &#xA;        GROUP BY stg_vid.SK_VehicleID, &#xA;            ct.CoverageTypeCode     &#xA;            &#xA;        CREATE CLUSTERED INDEX IX_CoverageTypeCode_SK_PolicyID ON #VehicleDeductible(CoverageTypeCode, SK_VehicleID)&#xA;        &#xA;&#xA;         --Prepare base table for dimVehicle and fact table&#xA;                ;WITH VehicleData&#xA;                AS&#xA;                (&#xA;                SELECT  vid.SK_VehicleID AS SK_VehicleID,         &#xA;                  vid.BK_EndorsementID,&#xA;                  vid.BK_EndorsementVehicleID,&#xA;                  vid.BK_EndorsementPolicyTermID,&#xA;                  ev.PrimaryEndorsementDriverID AS BK_DriverID,&#xA;                  ev.VehicleID AS BK_VehicleID,&#xA;                  ept.PolicyTermID AS BK_PolicyTermID,&#xA;                   -- Year&#xA;                   cast(ev.VehicleYear as varchar(4)) as VehicleYear,&#xA;                   -- Make&#xA;                   CAST(dbo.Proper(ev.Make) as varchar(50)) AS VehicleMake,&#xA;                   -- Model&#xA;                   CAST(dbo.Proper(ev.Model) as varchar(50)) AS VehicleModel,&#xA;                   -- VehicleAge      &#xA;                   IIF(((Ages.VehicleAge &gt; 0) AND (ev.[VehicleYear] &gt; 0)), CAST(Ages.VehicleAge AS VARCHAR(7)), @NotApplicable) AS VehicleAge,&#xA;                   --BodyType&#xA;                   CAST(dbo.Proper(ev.BodyType) AS VARCHAR(50)) AS BodyType,         &#xA;                   -- VIN&#xA;                         CASE &#xA;                          WHEN ev.VIN IN (&#xA;                            @NotApplicable&#xA;                            ,@EmptyString&#xA;                            )&#xA;                           THEN @NotApplicable&#xA;                          ELSE ev.VIN&#xA;                          END AS VIN,&#xA;                   -- UsageType&#xA;                   CAST( dbo.Proper(ev.UsageType) AS VARCHAR(50)) AS UsageType,&#xA;                   -- CostNew&#xA;                   ISNULL(CostNewSettings.[Text], @NotApplicable) AS CostNew,&#xA;                   -- CostNew_OrderBy&#xA;                   ISNULL(CostNewSettings.[OrderNum], 1) AS CostNew_OrderBy,&#xA;                   -- ISOSymbol&#xA;                   CAST(ev.ISOSymbol as varchar(3)) as ISOSymbol, &#xA;                   -- OneWayMiles&#xA;                   ISNULL(OneWayMilesSettings.[Text], @NotApplicable) AS OneWayMiles,&#xA;                   -- OneWayMiles_OrderBy&#xA;                   ISNULL(OneWayMilesSettings.[OrderNum], 1) AS OneWayMiles_OrderBy,&#xA;                   -- OdometerMileage&#xA;                   ISNULL(OdometerSettings.[Text], @NotApplicable) AS OdometerMileage,&#xA;                   -- OdometerMileage_OrderBy&#xA;                   ISNULL(OdometerSettings.OrderNum, 1) AS OdometerMileage_OrderBy,&#xA;                   -- AnnualMileage&#xA;                   ISNULL(AnnualMileageSettings.[Text], @NotApplicable) AS AnnualMileage,&#xA;                   -- AnnualMileage_OrderBy&#xA;                   ISNULL(AnnualMileageSettings.OrderNum, 1) AS AnnualMileage_OrderBy,&#xA;                   -- AnnualMileageCode2&#xA;                   CASE &#xA;                    WHEN ev.AnnualMileage &gt; 0&#xA;                     AND ev.AnnualMileage &lt; 7000&#xA;                     THEN '2. &lt;7,000'&#xA;                    WHEN ev.AnnualMileage &gt;= 7000&#xA;                     AND ev.AnnualMileage &lt; 10000&#xA;                     THEN '3. 7,000 - 9,999'&#xA;                    WHEN ev.AnnualMileage &gt;= 10000&#xA;                     AND ev.AnnualMileage &lt; 13000&#xA;                     THEN '4. 10,000 - 12,999'&#xA;                    WHEN ev.AnnualMileage &gt;= 13000&#xA;                     AND ev.AnnualMileage &lt; 15500&#xA;                     THEN '5. 13,000 - 15,499'&#xA;                    WHEN ev.AnnualMileage &gt;= 15500&#xA;                     AND ev.AnnualMileage &lt; 18000&#xA;                     THEN '6. 15,500 - 17,999'&#xA;                    WHEN ev.AnnualMileage &gt;= 18000&#xA;                     AND ev.AnnualMileage &lt; 25000&#xA;                     THEN '7. 18,000 - 24,999'&#xA;                    WHEN ev.AnnualMileage &gt; 25000&#xA;                     THEN '8. 25,000+'&#xA;                    ELSE @NotApplicable&#xA;                   END AS AnnualMileageCode2,&#xA;                   --AntiTheft&#xA;                   CASE &#xA;                    WHEN ev.AntiTheft IN (&#xA;                      @YesStr&#xA;                      ,@Passive&#xA;                      ,@Active&#xA;                      )&#xA;                     THEN @YesStr&#xA;                    WHEN ev.AntiTheft IN (&#xA;                      @NoStr&#xA;                      ,@None&#xA;                      )&#xA;                     THEN @NoStr&#xA;                    ELSE @NotApplicable&#xA;                    END AntiTheftDevice,&#xA;                   --AntiTheftType&#xA;                   CASE WHEN ev.AntiTheft IN (@Active, @Passive)&#xA;                          THEN ev.AntiTheft&#xA;                          ELSE @NotApplicable&#xA;                          END AS AntiTheftDeviceType,                         &#xA;                   --Restrain&#xA;                   CASE WHEN ev.Restrain IN ('BagDriverSide','FrontSide','Driver') THEN 'Driver Side A/B'&#xA;                    WHEN ev.Restrain IN ('BagsAllSides','Driver &amp; Passenger','FrontBoth') THEN 'Dual A/B'&#xA;                    WHEN ev.Restrain IN ('No aitbag','NoRestraints','None','No airbags') THEN 'No A/B'&#xA;                    ELSE @NotApplicable END Restrain,         &#xA;                   --DaytimeRinningLights&#xA;                   CASE ev.DaytimeRunningLights&#xA;                          WHEN @Yes&#xA;                           THEN @YesStr&#xA;                          WHEN @No&#xA;                           THEN @NoStr&#xA;                          ELSE @NotApplicable&#xA;                          END AS DaytimeRunningLights,&#xA;                   --ABS&#xA;                   CASE ev.[ABS]&#xA;                          WHEN @Yes&#xA;                           THEN @YesStr&#xA;                          WHEN @No&#xA;                           THEN @NoStr&#xA;                          ELSE @NotApplicable&#xA;                          END AS [ABSInstalled],&#xA;                   --Performance&#xA;                   CASE  WHEN ev.Performance IN ('H','High') THEN 'High'&#xA;                    WHEN ev.Performance IN ('S','Standard') THEN 'Standard'&#xA;                    WHEN ev.Performance IN ('Sports') THEN 'Sports'&#xA;                    WHEN ev.Performance IN ('P','Sports Premium') THEN 'Sports Premium'&#xA;                    WHEN ev.Performance IN ('INMDT','Intermediate') THEN 'Intermediate'&#xA;                    WHEN ev.Performance IN ('Basic') THEN 'Basic'&#xA;                    ELSE @NotApplicable &#xA;                   END Performance,&#xA;                   --Salvaged&#xA;                         CASE ev.Salvaged&#xA;                          WHEN @Yes&#xA;                           THEN @YesStr&#xA;                          WHEN @No&#xA;                           THEN @NoStr&#xA;                          ELSE @NotApplicable&#xA;                      END AS Salvaged,&#xA;                   --Cylinders&#xA;                   CASE WHEN ev.Cylinders &lt;= 0 OR ev.Cylinders IS NULL  THEN @NotApplicable     &#xA;                     ELSE CAST(ev.Cylinders AS VARCHAR(3)) END Cylinders,&#xA;                   -- Garaged&#xA;                   @NotApplicable AS Garaged,&#xA;                   -- GarageZip&#xA;                   CASE WHEN LEN(ea.Zip) = 5 THEN ea.Zip&#xA;                     ELSE @NotApplicable&#xA;                   END AS GarageZip,&#xA;                   -- GarageCounty&#xA;                   CAST(dbo.Proper(ea.County) AS varchar(50)) AS GarageCounty,                    &#xA;                   -- COLL_Deductible&#xA;                   ISNULL(CAST(ded_coll.Deductible AS VARCHAR(4)), @None) AS COLL_Deductible,&#xA;                   -- COMP_Deductible&#xA;                   ISNULL(CAST(ded_comp.Deductible AS VARCHAR(4)), @None) AS COMP_Deductible,&#xA;                   -- COMGL_Deductible&#xA;                   ISNULL(CAST(ded_comgl.Deductible AS VARCHAR(4)), @None) AS COMGL_Deductible,&#xA;                   CASE WHEN LEN(LTRIM(RTRIM(ev.RapaCompSymbol))) &gt; 0 THEN LTRIM(RTRIM(ev.RapaCompSymbol))&#xA;                     ELSE @NotApplicable END AS RapaCompSymbol,&#xA;                   CASE WHEN LEN(LTRIM(RTRIM(ev.RapaCollSymbol))) &gt; 0 THEN LTRIM(RTRIM(ev.RapaCollSymbol))&#xA;                     ELSE @NotApplicable END AS RapaCollSymbol,&#xA;                   CASE WHEN ev.BIPDLiabilitySymbol &lt;&gt; -1 THEN CAST(ev.BIPDLiabilitySymbol AS VARCHAR(3))&#xA;                     ELSE @NotApplicable END AS BIPDLiabilitySymbol,                                                                                  &#xA;                   @NotApplicable as Zone,&#xA;                   CAST(CASE WHEN ISNULL(ev.AnnualMileage, 0) &lt;= 0 THEN @NotApplicable ELSE CAST(ev.AnnualMileage AS VARCHAR(6)) END AS VARCHAR(6)) AS AnnualMileageActual,&#xA;                   --DisablingDevice&#xA;                   CAST(CASE WHEN LEN(ev.DisablingDevice) &gt; 0 THEN ev.DisablingDevice        &#xA;                     ELSE @NotApplicable&#xA;                   END AS VARCHAR(50)) AS DisablingDevice,&#xA;                   --VinEtching&#xA;                   CAST(CASE ev.VinEtching&#xA;                       WHEN @Yes&#xA;                        THEN @YesStr&#xA;                       WHEN @No&#xA;                        THEN @NoStr&#xA;                       ELSE @NotApplicable&#xA;                       END AS VARCHAR(6)) AS VinEtching,&#xA;                   --IsVan&#xA;                         CAST(CASE ev.IsVan&#xA;                           WHEN @Yes&#xA;                            THEN @YesStr&#xA;                           WHEN @No&#xA;                            THEN @NoStr&#xA;                           ELSE @NotApplicable&#xA;                           END AS VARCHAR(6)) AS IsVan,&#xA;                   --IsPickup&#xA;                         CAST(CASE ev.IsPickup&#xA;                           WHEN @Yes&#xA;                            THEN @YesStr&#xA;                           WHEN @No&#xA;                            THEN @NoStr&#xA;                           ELSE @NotApplicable&#xA;                           END AS VARCHAR(6)) AS IsPickup,&#xA;                  --IsLeased&#xA;                     CAST(CASE ev.IsLeased&#xA;                       WHEN @Yes&#xA;                        THEN @YesStr&#xA;                       WHEN @No&#xA;                        THEN @NoStr&#xA;                       ELSE @NotApplicable&#xA;                       END AS VARCHAR(6)) AS IsLeased,&#xA;                  --IsNeedInspection&#xA;                     CAST(CASE ev.IsNeedInspection&#xA;                       WHEN @Yes&#xA;                        THEN @YesStr&#xA;                       WHEN @No&#xA;                        THEN @NoStr&#xA;                       ELSE @NotApplicable&#xA;                       END AS VARCHAR(6)) AS IsNeedInspection,&#xA;                  --ElectronicStabilityControl&#xA;                     CAST(CASE ev.ElectronicStabilityControl&#xA;                       WHEN @Yes&#xA;                        THEN @YesStr&#xA;                       WHEN @No&#xA;                        THEN @NoStr&#xA;                       ELSE @NotApplicable&#xA;                       END AS VARCHAR(6)) AS ElectronicStabilityControl,&#xA;                  --IsVerified&#xA;                  CAST(CASE ev.IsVerified&#xA;                   WHEN @Yes&#xA;                    THEN @YesStr&#xA;                   WHEN @No&#xA;                    THEN @NoStr&#xA;                   ELSE @NotApplicable&#xA;                   END AS VARCHAR(6)) AS IsVerified,&#xA;                  --LessorLiability&#xA;                  CAST(CASE ev.LessorLiability&#xA;                   WHEN @Yes&#xA;                    THEN @YesStr&#xA;                   WHEN @No&#xA;                    THEN @NoStr&#xA;                   ELSE @NotApplicable&#xA;                   END AS VARCHAR(6)) AS LessorLiability                    &#xA; &#xA;                 FROM [Extract].[P1_EndorsementVehicle] AS ev &#xA;                 JOIN [Extract].[P1_EndorsementPolicyTerm] AS ept ON ev.EndorsementPolicyTermID = ept.EndorsementPolicyTermID        &#xA;                 JOIN [Staging].[VehicleID] AS vid ON ept.EndorsementID = vid.BK_EndorsementID AND ev.VehicleID = vid.BK_VehicleID&#xA;                 JOIN [Extract].[P1_PolicyTerm]  AS pt ON ept.PolicyTermID = pt.PolicyTermID&#xA;                 JOIN [Extract].[P1_Program] AS prog ON prog.ProgramID = pt.ProgramID&#xA;                 JOIN [Extract].[P1_ProgramGroup] AS proggrp ON prog.ProgramGroupID = proggrp.ProgramGroupID         &#xA;                 LEFT JOIN [Extract].[P1_EndorsementAddress] AS ea ON ea.EndorsementAddressID = ev.EndorsementGarageAddressID&#xA;                 LEFT JOIN (SELECT SK_VehicleID, Deductible FROM #VehicleDeductible WHERE CoverageTypeCode = @DeductibleColl) AS ded_coll ON vid.SK_VehicleID = ded_coll.SK_VehicleID&#xA;                 LEFT JOIN (SELECT SK_VehicleID, Deductible FROM #VehicleDeductible WHERE CoverageTypeCode = @DeductibleComp) AS ded_comp ON vid.SK_VehicleID = ded_comp.SK_VehicleID&#xA;                 LEFT JOIN (SELECT SK_VehicleID, Deductible FROM #VehicleDeductible WHERE CoverageTypeCode = @DeductibleComgl) AS ded_comgl ON vid.SK_VehicleID = ded_comgl.SK_VehicleID &#xA;                    CROSS APPLY (&#xA;                     SELECT YEAR(Dates.LocalDatetime) - ev.VehicleYear + 1 AS VehicleAge&#xA;                     FROM dbo.fGetUtcToLocalDatetimeConverter(proggrp.TimeZone, pt.EffectiveDate) AS Dates&#xA;                     ) AS Ages&#xA;                    OUTER APPLY (&#xA;                     SELECT TOP 1 crt.[Text]&#xA;                      ,crt.OrderNum&#xA;                     FROM [Staging].[CostRangeText] crt&#xA;                     WHERE ev.CostNew &gt;= crt.LowestValue&#xA;                     ORDER BY crt.LowestValue DESC&#xA;                     ) AS CostNewSettings&#xA;                    OUTER APPLY (&#xA;                     SELECT TOP 1 ort.[Text]&#xA;                      ,ort.OrderNum&#xA;                     FROM [Staging].[OneWayMilesRangeText] ort&#xA;                     WHERE ev.OneWayMiles &gt;= ort.LowestValue&#xA;                     ORDER BY ort.LowestValue DESC&#xA;                     ) AS OneWayMilesSettings&#xA;                    OUTER APPLY (&#xA;                     SELECT TOP 1 odometer.[Text]&#xA;                      ,odometer.OrderNum&#xA;                     FROM [Staging].[OdometerMileageRangeText] odometer&#xA;                     WHERE ev.PurchaseOdometer &gt;= odometer.LowestValue&#xA;                     ORDER BY odometer.LowestValue DESC&#xA;                     ) AS OdometerSettings&#xA;                    OUTER APPLY (&#xA;                     SELECT TOP 1 am.[Text]&#xA;                      ,am.OrderNum&#xA;                     FROM [Staging].[AnnualMileageRangeText] am&#xA;                     WHERE ev.AnnualMileage &gt;= am.LowestValue&#xA;                     ORDER BY am.LowestValue DESC&#xA;                     ) AS AnnualMileageSettings&#xA;                )&#xA;                MERGE [DataMart].[dimVehicle] AS TGT&#xA;                USING  (SELECT * FROM VehicleData)&#xA;                AS Vehicles&#xA;                 ON Vehicles.BK_EndorsementVehicleID = TGT.BK_EndorsementVehicleID&#xA;                WHEN MATCHED THEN UPDATE&#xA;                SET&#xA;                TGT.[BK_DriverID] = Vehicles.[BK_DriverID],&#xA;                TGT.[VehicleYear] = Vehicles.[VehicleYear],&#xA;                TGT.[VehicleMake] = Vehicles.[VehicleMake],&#xA;                TGT.[VehicleModel] = Vehicles.[VehicleModel],&#xA;                TGT.[VehicleAge] = Vehicles.[VehicleAge],&#xA;                TGT.[BodyType] = Vehicles.[BodyType],&#xA;                TGT.[VIN] = Vehicles.[VIN],&#xA;                TGT.[UsageType] = Vehicles.[UsageType],&#xA;                TGT.[CostNew] = Vehicles.[CostNew],&#xA;                TGT.[CostNew_OrderBy] = Vehicles.[CostNew_OrderBy],&#xA;                TGT.[ISOSymbol] = Vehicles.[ISOSymbol],&#xA;                TGT.[OneWayMiles] = Vehicles.[OneWayMiles],&#xA;                TGT.[OneWayMiles_OrderBy] = Vehicles.[OneWayMiles_OrderBy],&#xA;                TGT.[OdometerMileage] = Vehicles.[OdometerMileage],&#xA;                TGT.[OdometerMileage_OrderBy] = Vehicles.[OdometerMileage_OrderBy],&#xA;                TGT.[AnnualMileage] = Vehicles.[AnnualMileage],&#xA;                TGT.[AnnualMileage_OrderBy] = Vehicles.[AnnualMileage_OrderBy],&#xA;                TGT.[AnnualMileageCode2] = Vehicles.[AnnualMileageCode2],&#xA;                TGT.[AntiTheftDevice] = Vehicles.[AntiTheftDevice],&#xA;                TGT.[AntiTheftDeviceType] = Vehicles.[AntiTheftDeviceType],&#xA;                TGT.[Restrain] = Vehicles.[Restrain],&#xA;                TGT.[DaytimeRunningLights] = Vehicles.[DaytimeRunningLights],&#xA;                TGT.[ABSInstalled] = Vehicles.[ABSInstalled],&#xA;                TGT.[Performance] = Vehicles.[Performance],&#xA;                TGT.[Salvaged] = Vehicles.[Salvaged],&#xA;                TGT.[Cylinders] = Vehicles.[Cylinders],&#xA;                TGT.[Garaged] = Vehicles.[Garaged],&#xA;                TGT.[GarageZip] = Vehicles.[GarageZip],&#xA;                TGT.[GarageCounty] = Vehicles.[GarageCounty],&#xA;                TGT.[COLL_Deductible] = Vehicles.[COLL_Deductible],&#xA;                TGT.[COMP_Deductible] = Vehicles.[COMP_Deductible],&#xA;                TGT.[COMGL_Deductible] = Vehicles.[COMGL_Deductible],&#xA;                TGT.[RapaCompSymbol] = Vehicles.[RapaCompSymbol],&#xA;                TGT.[RapaCollSymbol] = Vehicles.[RapaCollSymbol],&#xA;                TGT.[BIPDLiabilitySymbol] = Vehicles.[BIPDLiabilitySymbol],&#xA;                TGT.[Zone] = Vehicles.[Zone],&#xA;                TGT.[AnnualMileageActual] = Vehicles.[AnnualMileageActual],&#xA;                TGT.[DisablingDevice] = Vehicles.[DisablingDevice],&#xA;                TGT.[VinEtching] = Vehicles.[VinEtching],&#xA;                TGT.[IsVan] = Vehicles.[IsVan],&#xA;                TGT.[IsPickup] = Vehicles.[IsPickup],&#xA;                TGT.[IsLeased] = Vehicles.[IsLeased],&#xA;                TGT.[IsNeedInspection] = Vehicles.[IsNeedInspection],&#xA;                TGT.[ElectronicStabilityControl] = Vehicles.[ElectronicStabilityControl],&#xA;                TGT.[IsVerified] = Vehicles.[IsVerified],&#xA;                TGT.[LessorLiability] = Vehicles.[LessorLiability]&#xA;                WHEN NOT MATCHED THEN&#xA;                INSERT&#xA;                 ([SK_VehicleID],&#xA;                 [BK_EndorsementID],&#xA;                 [BK_EndorsementVehicleID],&#xA;                 [BK_EndorsementPolicyTermID],&#xA;                 [BK_DriverID],&#xA;                 [BK_VehicleID],&#xA;                 [BK_PolicyTermID],&#xA;                 [VehicleYear],&#xA;                 [VehicleMake],&#xA;                 [VehicleModel],&#xA;                 [VehicleAge],&#xA;                 [BodyType],&#xA;                 [VIN],&#xA;                 [UsageType],&#xA;                 [CostNew],&#xA;                 [CostNew_OrderBy],&#xA;                 [ISOSymbol],&#xA;                 [OneWayMiles],&#xA;                 [OneWayMiles_OrderBy],&#xA;                 [OdometerMileage],&#xA;                 [OdometerMileage_OrderBy],&#xA;                 [AnnualMileage],&#xA;                 [AnnualMileage_OrderBy],&#xA;                 [AnnualMileageCode2],&#xA;                 [AntiTheftDevice],&#xA;                 [AntiTheftDeviceType],&#xA;                 [Restrain],&#xA;                 [DaytimeRunningLights],&#xA;                 [ABSInstalled],&#xA;                 [Performance],&#xA;                 [Salvaged],&#xA;                 [Cylinders],&#xA;                 [Garaged],&#xA;                 [GarageZip],&#xA;                 [GarageCounty],&#xA;                 [COLL_Deductible],&#xA;                 [COMP_Deductible],&#xA;                 [COMGL_Deductible],&#xA;                 [RapaCompSymbol],&#xA;                 [RapaCollSymbol],&#xA;                 [BIPDLiabilitySymbol],&#xA;                 [Zone],&#xA;                 [AnnualMileageActual],&#xA;                 [DisablingDevice],&#xA;                 [VinEtching],&#xA;                 [IsVan],&#xA;                 [IsPickup],&#xA;                 [IsLeased],&#xA;                 [IsNeedInspection],&#xA;                 [ElectronicStabilityControl],&#xA;                 [IsVerified],&#xA;                 [LessorLiability])&#xA;                VALUES&#xA;                 ([SK_VehicleID],&#xA;                 [BK_EndorsementID],&#xA;                 [BK_EndorsementVehicleID],&#xA;                 [BK_EndorsementPolicyTermID],&#xA;                 [BK_DriverID],&#xA;                 [BK_VehicleID],&#xA;                 [BK_PolicyTermID],&#xA;                 [VehicleYear],&#xA;                 [VehicleMake],&#xA;                 [VehicleModel],&#xA;                 [VehicleAge],&#xA;                 [BodyType],&#xA;                 [VIN],&#xA;                 [UsageType],&#xA;                 [CostNew],&#xA;                 [CostNew_OrderBy],&#xA;                 [ISOSymbol],&#xA;                 [OneWayMiles],&#xA;                 [OneWayMiles_OrderBy],&#xA;                 [OdometerMileage],&#xA;                 [OdometerMileage_OrderBy],&#xA;                 [AnnualMileage],&#xA;                 [AnnualMileage_OrderBy],&#xA;                 [AnnualMileageCode2],&#xA;                 [AntiTheftDevice],&#xA;                 [AntiTheftDeviceType],&#xA;                 [Restrain],&#xA;                 [DaytimeRunningLights],&#xA;                 [ABSInstalled],&#xA;                 [Performance],&#xA;                 [Salvaged],&#xA;                 [Cylinders],&#xA;                 [Garaged],&#xA;                 [GarageZip],&#xA;                 [GarageCounty],&#xA;                 [COLL_Deductible],&#xA;                 [COMP_Deductible],&#xA;                 [COMGL_Deductible],&#xA;                 [RapaCompSymbol],&#xA;                 [RapaCollSymbol],&#xA;                 [BIPDLiabilitySymbol],&#xA;                 [Zone],&#xA;                 [AnnualMileageActual],&#xA;                 [DisablingDevice],&#xA;                 [VinEtching],&#xA;                 [IsVan],&#xA;                 [IsPickup],&#xA;                 [IsLeased],&#xA;                 [IsNeedInspection],&#xA;                 [ElectronicStabilityControl],&#xA;                 [IsVerified],&#xA;                 [LessorLiability]);&#xA;              &#xA;&#xA;       -- Prepare dimLienholder and factlessVehicleLienholders&#xA;        --1) Aggregate Lienholders &#xA;              ;WITH Lienholders&#xA;              AS (&#xA;               SELECT dbo.Proper(NAME) AS Lienholder&#xA;                ,States.StateName AS [State]&#xA;               FROM [Extract].[P1_EndorsementLienHolder] AS el&#xA;               JOIN [Extract].[P1_EndorsementVehicle] AS ev ON ev.EndorsementVehicleID = el.EndorsementVehicleID&#xA;               LEFT JOIN [Extract].[P1_StateCode] AS sc ON el.STATE = sc.StateCodeID&#xA;               CROSS APPLY (&#xA;                SELECT CASE &#xA;                  WHEN ISNULL(sc.StateCodeName, @EmptyString) = @EmptyString&#xA;                   THEN @NotApplicable&#xA;                  ELSE sc.StateCodeName&#xA;                  END AS StateName&#xA;                ) States&#xA;               WHERE el.NAME IS NOT NULL&#xA;                AND LEN(el.NAME) &gt; 0&#xA;               GROUP BY dbo.Proper(NAME)&#xA;                ,States.StateName&#xA;               )&#xA;              INSERT INTO [DataMart].[dimLienholder] (&#xA;               [Lienholder]&#xA;               ,[State]&#xA;               )&#xA;              SELECT  Lienholder&#xA;               ,[State]&#xA;              FROM Lienholders lh&#xA;              WHERE NOT EXISTS (&#xA;                SELECT 1&#xA;                FROM [DataMart].[dimLienholder] dl&#xA;                WHERE dl.Lienholder = lh.Lienholder&#xA;                 AND dl.[State] = lh.[State]&#xA;                )   &#xA;&#xA;              INSERT INTO [DataMart].[factlessVehicleLienholder](SK_VehicleID, SK_LienholderID)&#xA;               SELECT DISTINCT vid.SK_VehicleID,&#xA;                 dl.SK_LienholderID        &#xA;               FROM [Extract].[P1_EndorsementVehicle] AS ev &#xA;               JOIN [Extract].[P1_EndorsementPolicyTerm] AS ept ON ev.EndorsementPolicyTermID = ept.EndorsementPolicyTermID        &#xA;               JOIN [Staging].[VehicleID] AS vid ON ept.EndorsementID = vid.BK_EndorsementID AND ev.VehicleID = vid.BK_VehicleID&#xA;               JOIN [Extract].[P1_EndorsementLienHolder] AS elh ON elh.EndorsementVehicleID = ev.EndorsementVehicleID &#xA;               JOIN [Extract].[P1_StateCode] AS sc ON elh.[State] = sc.StateCodeID&#xA;               JOIN [DataMart].[dimLienholder] AS dl ON dl.Lienholder = elh.Name AND dl.State = sc.StateCodeName&#xA;               WHERE NOT EXISTS (SELECT 1 FROM [DataMart].[factlessVehicleLienholder]  fvl WHERE fvl.SK_LienholderID = dl.SK_LienholderID AND fvl.SK_VehicleID = vid.SK_VehicleID )                &#xA;&#xA;&#xA;       &#xA;        &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{97114253-AAC3-418C-B325-F61810DE3689}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create dimQuoteVehicle" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create dimQuoteVehicle" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                               &#xA;                                DECLARE @Yes INT = 1;&#xA;                                DECLARE @No INT = 0;&#xA;                                DECLARE @NotApplicable VARCHAR(3) = 'N/A';&#xA;                                DECLARE @YesStr VARCHAR(3) = 'Yes';&#xA;                                DECLARE @NoStr VARCHAR(3) = 'No';&#xA;                                DECLARE @None VARCHAR(3) = 'None';&#xA;                                DECLARE @Active VARCHAR(7) = 'Active';&#xA;                                DECLARE @Passive VARCHAR(7) = 'Passive';&#xA;                                DECLARE @DeductibleComp VARCHAR(5) = 'COMP';&#xA;                                DECLARE @DeductibleColl VARCHAR(5) = 'COLL';&#xA;                                DECLARE @DeductibleComgl VARCHAR(5) = 'COMGL';&#xA;                                DECLARE @EmptyString VARCHAR(10) = '';&#xA;                                DECLARE @LeasedOwnershipStatusId int = 2&#xA;                                DECLARE @OtherOwnershipStatusId int = 3       &#xA;&#xA;&#xA;                                IF OBJECT_ID('tempdb..#QuoteVehicleDeductible') IS NOT NULL&#xA;                                 DROP TABLE #QuoteVehicleDeductible&#xA;&#xA;                                SELECT qv.QuoteVehicleId&#xA;                                 ,ct.CoverageTypeCode&#xA;                                 ,max(qvc.Deductible) AS Deductible&#xA;                                INTO #QuoteVehicleDeductible&#xA;                                FROM Extract.P1_QuoteVehicle qv&#xA;                                JOIN Extract.P1_QuotePolicyTerm qpt ON qv.QuotePolicyTermId = qpt.QuotePolicyTermId&#xA;                                JOIN Extract.P1_QuoteVehicleCoverage qvc ON qv.QuoteVehicleId = qvc.QuoteVehicleId&#xA;                                JOIN Extract.P1_ProgramCoverage pc ON pc.ProgramCoverageID = qvc.ProgramCoverageID&#xA;                                JOIN Extract.P1_CoverageType ct ON ct.CoverageTypeID = pc.CoverageTypeID&#xA;                                WHERE ct.CoverageTypeCode IN (&#xA;                                  @DeductibleComp&#xA;                                  ,@DeductibleColl&#xA;                                  ,@DeductibleComgl&#xA;                                  )&#xA;                                GROUP BY qv.QuoteVehicleId&#xA;                                 ,ct.CoverageTypeCode&#xA;&#xA;                                CREATE CLUSTERED INDEX IX_QuoteVehicleDeductible_CoverageType_VehicleId ON #QuoteVehicleDeductible (&#xA;                                 CoverageTypeCode&#xA;                                 ,QuoteVehicleID&#xA;                                 )&#xA;                                  &#xA;                  &#xA;&#xA;                                ;WITH QuoteVehiclesData AS&#xA;                                (&#xA;                                SELECT &#xA;                                 - 1 AS BK_EndorsementID&#xA;                                 ,qv.QuoteVehicleId AS BK_QuoteVehicleId&#xA;                                 ,qv.QuotePolicyTermId AS BK_QuotePolicyTermId&#xA;                                 ,- 1 AS BK_DriverID --to do: implement this&#xA;                                 ,- 1 AS BK_VehicleID&#xA;                                 ,qv.QuotePolicyTermId AS BK_PolicyTermID&#xA;                                 ,cast(qv.[Year] AS VARCHAR(4)) AS VehicleYear&#xA;                                 ,CAST(dbo.Proper(qv.Make) AS VARCHAR(50)) AS VehicleMake&#xA;                                 ,CAST(dbo.Proper(qv.Model) AS VARCHAR(50)) AS VehicleModel&#xA;                                 ,IIF(((Ages.VehicleAge &gt; 0) AND (qv.[Year] &gt; 0)), CAST(Ages.VehicleAge AS VARCHAR(7)), @NotApplicable) AS VehicleAge&#xA;                                 ,CAST(dbo.Proper(qv.BodyStyle) AS VARCHAR(50)) AS BodyType&#xA;                                 ,CASE &#xA;                                  WHEN qv.VIN IN (&#xA;                                    @NotApplicable&#xA;                                    ,@EmptyString&#xA;                                    )&#xA;                                   THEN @NotApplicable&#xA;                                  ELSE qv.VIN&#xA;                                  END AS VIN&#xA;                                 ,CAST( dbo.Proper(qv.[Use]) AS VARCHAR(50)) AS UsageType&#xA;                                 ,ISNULL(CostNewSettings.[Text], @NotApplicable) AS CostNew&#xA;                                 ,ISNULL(CostNewSettings.[OrderNum], 1) AS CostNew_OrderBy&#xA;                                 ,cast(qv.ISOSymbol AS VARCHAR(3)) AS ISOSymbol&#xA;                                 ,ISNULL(OneWayMilesSettings.[Text], @NotApplicable) AS OneWayMiles&#xA;                                 ,ISNULL(OneWayMilesSettings.[OrderNum], 1) AS OneWayMiles_OrderBy&#xA;                                 ,ISNULL(OdometerSettings.[Text], @NotApplicable) AS OdometerMileage&#xA;                                 ,ISNULL(OdometerSettings.OrderNum, 1) AS OdometerMileage_OrderBy&#xA;                                 ,ISNULL(AnnualMileageSettings.[Text], @NotApplicable) AS AnnualMileage&#xA;                                 ,ISNULL(AnnualMileageSettings.OrderNum, 1) AS AnnualMileage_OrderBy&#xA;                                 ,CASE &#xA;                                  WHEN qv.AnnualMileage &gt; 0&#xA;                                   AND qv.AnnualMileage &lt; 7000&#xA;                                   THEN '2. &lt;7,000'&#xA;                                  WHEN qv.AnnualMileage &gt;= 7000&#xA;                                   AND qv.AnnualMileage &lt; 10000&#xA;                                   THEN '3. 7,000 - 9,999'&#xA;                                  WHEN qv.AnnualMileage &gt;= 10000&#xA;                                   AND qv.AnnualMileage &lt; 13000&#xA;                                   THEN '4. 10,000 - 12,999'&#xA;                                  WHEN qv.AnnualMileage &gt;= 13000&#xA;                                   AND qv.AnnualMileage &lt; 15500&#xA;                                   THEN '5. 13,000 - 15,499'&#xA;                                  WHEN qv.AnnualMileage &gt;= 15500&#xA;                                   AND qv.AnnualMileage &lt; 18000&#xA;                                   THEN '6. 15,500 - 17,999'&#xA;                                  WHEN qv.AnnualMileage &gt;= 18000&#xA;                                   AND qv.AnnualMileage &lt; 25000&#xA;                                   THEN '7. 18,000 - 24,999'&#xA;                                  WHEN qv.AnnualMileage &gt; 25000&#xA;                                   THEN '8. 25,000+'&#xA;                                  ELSE @NotApplicable&#xA;                                  END AS AnnualMileageCode2&#xA;                                 ,CASE &#xA;                                  WHEN qv.AntiTheft IN (&#xA;                                    @YesStr&#xA;                                    ,@Passive&#xA;                                    ,@Active&#xA;                                    )&#xA;                                   THEN @YesStr&#xA;                                  WHEN qv.AntiTheft IN (&#xA;                                    @NoStr&#xA;                                    ,@None&#xA;                                    )&#xA;                                   THEN @NoStr&#xA;                                  ELSE @NotApplicable&#xA;                                  END AntiTheftDevice&#xA;                                 ,CASE WHEN qv.AntiTheft IN (@Active, @Passive)&#xA;                                  THEN qv.AntiTheft&#xA;                                  ELSE @NotApplicable&#xA;                                  END AS AntiTheftDeviceType&#xA;                                 ,CASE &#xA;                                  WHEN qv.Restraint IN (&#xA;                                    'BagDriverSide'&#xA;                                    ,'FrontSide'&#xA;                                    ,'Driver'&#xA;                                    )&#xA;                                   THEN 'Driver Side A/B'&#xA;                                  WHEN qv.Restraint IN (&#xA;                                    'BagsAllSides'&#xA;                                    ,'Driver &amp; Passenger'&#xA;                                    ,'FrontBoth'&#xA;                                    )&#xA;                                   THEN 'Dual A/B'&#xA;                                  WHEN qv.Restraint IN (&#xA;                                    'No aitbag'&#xA;                                    ,'NoRestraints'&#xA;                                    ,'None'&#xA;                                    ,'No airbags'&#xA;                                    )&#xA;                                   THEN 'No A/B'&#xA;                                  ELSE @NotApplicable&#xA;                                  END AS Restrain&#xA;                                 ,CASE qv.DaytimeRunningLights&#xA;                                  WHEN @Yes&#xA;                                   THEN @YesStr&#xA;                                  WHEN @No&#xA;                                   THEN @NoStr&#xA;                                  ELSE @NotApplicable&#xA;                                  END AS DaytimeRunningLights&#xA;                                 ,CASE qv.[ABS]&#xA;                                  WHEN @Yes&#xA;                                   THEN @YesStr&#xA;                                  WHEN @No&#xA;                                   THEN @NoStr&#xA;                                  ELSE @NotApplicable&#xA;                                  END AS [ABSInstalled]&#xA;                                 ,CASE &#xA;                                  WHEN qv.Performance IN (&#xA;                                    'H'&#xA;                                    ,'High'&#xA;                                    )&#xA;                                   THEN 'High'&#xA;                                  WHEN qv.Performance IN (&#xA;                                    'S'&#xA;                                    ,'Standard'&#xA;                                    )&#xA;                                   THEN 'Standard'&#xA;                                  WHEN qv.Performance IN ('Sports')&#xA;                                   THEN 'Sports'&#xA;                                  WHEN qv.Performance IN (&#xA;                                    'P'&#xA;                                    ,'Sports Premium'&#xA;                                    )&#xA;                                   THEN 'Sports Premium'&#xA;                                  WHEN qv.Performance IN (&#xA;                                    'INMDT'&#xA;                                    ,'Intermediate'&#xA;                                    )&#xA;                                   THEN 'Intermediate'&#xA;                                  WHEN qv.Performance IN ('Basic')&#xA;                                   THEN 'Basic'&#xA;                                  ELSE @NotApplicable&#xA;                                  END Performance&#xA;                                 ,CASE qv.Salvaged&#xA;                                  WHEN @Yes&#xA;                                   THEN @YesStr&#xA;                                  WHEN @No&#xA;                                   THEN @NoStr&#xA;                                  ELSE @NotApplicable&#xA;                                  END AS Salvaged&#xA;                                 ,CASE &#xA;                                  WHEN qv.Cylinders &lt;= 0&#xA;                                   OR qv.Cylinders IS NULL&#xA;                                   THEN @NotApplicable&#xA;                                  ELSE CAST(qv.Cylinders AS VARCHAR(3))&#xA;                                  END Cylinders&#xA;                                 ,@NotApplicable AS Garaged -- to do: implement this&#xA;                                 ,stg_q.GarageZip AS GarageZip&#xA;                                 ,stg_q.GarageCounty AS GarageCounty&#xA;                                 ,ISNULL(CAST(ded_coll.Deductible AS VARCHAR(4)), @None) AS COLL_Deductible&#xA;                                 ,ISNULL(CAST(ded_comp.Deductible AS VARCHAR(4)), @None) AS COMP_Deductible&#xA;                                 ,ISNULL(CAST(ded_comgl.Deductible AS VARCHAR(4)), @None) AS COMGL_Deductible&#xA;                                 ,CASE &#xA;                                  WHEN LEN(LTRIM(RTRIM(qv.RapaCompSymbol))) &gt; 0&#xA;                                   THEN LTRIM(RTRIM(qv.RapaCompSymbol))&#xA;                                  ELSE @NotApplicable&#xA;                                  END AS RapaCompSymbol&#xA;                                 ,CASE &#xA;                                  WHEN LEN(LTRIM(RTRIM(qv.RapaCollSymbol))) &gt; 0&#xA;                                   THEN LTRIM(RTRIM(qv.RapaCollSymbol))&#xA;                                  ELSE @NotApplicable&#xA;                                  END AS RapaCollSymbol&#xA;                                 ,CASE &#xA;                                  WHEN qv.BIPDLiabilitySymbol &lt;&gt; - 1&#xA;                                   THEN CAST(qv.BIPDLiabilitySymbol AS VARCHAR(3))&#xA;                                  ELSE @NotApplicable&#xA;                                  END AS BIPDLiabilitySymbol&#xA;                                 ,@NotApplicable AS Zone -- to do: implement this&#xA;                                 ,CAST(CASE &#xA;                                   WHEN ISNULL(qv.AnnualMileage, 0) &lt;= 0&#xA;                                    THEN @NotApplicable&#xA;                                   ELSE CAST(qv.AnnualMileage AS VARCHAR(6))&#xA;                                   END AS VARCHAR(6)) AS AnnualMileageActual&#xA;                                 ,CAST(CASE &#xA;                                   WHEN LEN(qv.DisablingDevice) &gt; 0&#xA;                                    THEN qv.DisablingDevice&#xA;                                   ELSE @NotApplicable&#xA;                                   END AS VARCHAR(50)) AS DisablingDevice&#xA;                                 ,CAST(CASE qv.VinEtching&#xA;                                   WHEN @Yes&#xA;                                    THEN @YesStr&#xA;                                   WHEN @No&#xA;                                    THEN @NoStr&#xA;                                   ELSE @NotApplicable&#xA;                                   END AS VARCHAR(6)) AS VinEtching&#xA;                                 ,CAST(CASE qv.IsVan&#xA;                                   WHEN @Yes&#xA;                                    THEN @YesStr&#xA;                                   WHEN @No&#xA;                                    THEN @NoStr&#xA;                                   ELSE @NotApplicable&#xA;                                   END AS VARCHAR(6)) AS IsVan&#xA;                                 ,CAST(CASE qv.IsPickup&#xA;                                   WHEN @Yes&#xA;                                    THEN @YesStr&#xA;                                   WHEN @No&#xA;                                    THEN @NoStr&#xA;                                   ELSE @NotApplicable&#xA;                                   END AS VARCHAR(6)) AS IsPickup&#xA;                                 ,CAST(CASE qv.IsLeased&#xA;                                   WHEN @Yes&#xA;                                    THEN @YesStr&#xA;                                   WHEN @No&#xA;                                    THEN @NoStr&#xA;                                   ELSE @NotApplicable&#xA;                                   END AS VARCHAR(6)) AS IsLeased&#xA;                                 ,CAST(CASE qv.IsNeedInspection&#xA;                                   WHEN @Yes&#xA;                                    THEN @YesStr&#xA;                                   WHEN @No&#xA;                                    THEN @NoStr&#xA;                                   ELSE @NotApplicable&#xA;                                   END AS VARCHAR(6)) AS IsNeedInspection&#xA;                                 ,CAST(CASE qv.ElectronicStabilityControl&#xA;                                   WHEN @Yes&#xA;                                    THEN @YesStr&#xA;                                   WHEN @No&#xA;                                    THEN @NoStr&#xA;                                   ELSE @NotApplicable&#xA;                                   END AS VARCHAR(6)) AS ElectronicStabilityControl&#xA;                                 ,CAST(CASE qv.VehicleIdentificationVerified&#xA;                                   WHEN @Yes&#xA;                                    THEN @YesStr&#xA;                                   WHEN @No&#xA;                                    THEN @NoStr&#xA;                                   ELSE @NotApplicable&#xA;                                   END AS VARCHAR(6)) AS IsVerified&#xA;                                 ,CAST(CASE qv.LessorLiability&#xA;                                   WHEN @Yes&#xA;                                    THEN @YesStr&#xA;                                   WHEN @No&#xA;                                    THEN @NoStr&#xA;                                   ELSE @NotApplicable&#xA;                                   END AS VARCHAR(6)) AS LessorLiability                                &#xA;                                FROM [Extract].P1_QuoteVehicle qv&#xA;                                JOIN [Extract].P1_QuotePolicyTerm qpt ON qv.QuotePolicyTermId = qpt.QuotePolicyTermId&#xA;                                JOIN Staging.Quote stg_q ON qpt.QuoteID = stg_q.BK_QuoteID&#xA;                                LEFT JOIN [Extract].P1_Program prg ON qpt.ProgramID = prg.ProgramID&#xA;                                LEFT JOIN [Extract].P1_ProgramGroup proggrp ON proggrp.ProgramGroupID = prg.ProgramGroupID&#xA;                                LEFT JOIN #QuoteVehicleDeductible AS ded_coll ON ded_coll.QuoteVehicleId = qv.QuoteVehicleId&#xA;                                 AND ded_coll.CoverageTypeCode = @DeductibleColl&#xA;                                LEFT JOIN #QuoteVehicleDeductible AS ded_comp ON ded_comp.QuoteVehicleId = qv.QuoteVehicleId&#xA;                                 AND ded_comp.CoverageTypeCode = @DeductibleComp&#xA;                                LEFT JOIN #QuoteVehicleDeductible AS ded_comgl ON ded_comgl.QuoteVehicleId = qv.QuoteVehicleId&#xA;                                 AND ded_comgl.CoverageTypeCode = @DeductibleComgl&#xA;                                CROSS APPLY (&#xA;                                 SELECT YEAR(Dates.LocalDatetime) - qv.[Year] + 1 AS VehicleAge&#xA;                                 FROM dbo.fGetUtcToLocalDatetimeConverter(proggrp.TimeZone, qpt.EffectiveDate) AS Dates&#xA;                                 ) AS Ages&#xA;                                OUTER APPLY (&#xA;                                 SELECT TOP 1 crt.[Text]&#xA;                                  ,crt.OrderNum&#xA;                                 FROM [Staging].[CostRangeText] crt&#xA;                                 WHERE qv.CostNew &gt;= crt.LowestValue&#xA;                                 ORDER BY crt.LowestValue DESC&#xA;                                 ) AS CostNewSettings&#xA;                                OUTER APPLY (&#xA;                                 SELECT TOP 1 ort.[Text]&#xA;                                  ,ort.OrderNum&#xA;                                 FROM [Staging].[OneWayMilesRangeText] ort&#xA;                                 WHERE qv.OneWayMiles &gt;= ort.LowestValue&#xA;                                 ORDER BY ort.LowestValue DESC&#xA;                                 ) AS OneWayMilesSettings&#xA;                                OUTER APPLY (&#xA;                                 SELECT TOP 1 odometer.[Text]&#xA;                                  ,odometer.OrderNum&#xA;                                 FROM [Staging].[OdometerMileageRangeText] odometer&#xA;                                 WHERE qv.PurchaseOdometer &gt;= odometer.LowestValue&#xA;                                 ORDER BY odometer.LowestValue DESC&#xA;                                 ) AS OdometerSettings&#xA;                                OUTER APPLY (&#xA;                                 SELECT TOP 1 am.[Text]&#xA;                                  ,am.OrderNum&#xA;                                 FROM [Staging].[AnnualMileageRangeText] am&#xA;                                 WHERE qv.AnnualMileage &gt;= am.LowestValue&#xA;                                 ORDER BY am.LowestValue DESC&#xA;                                 ) AS AnnualMileageSettings&#xA;                                )&#xA;                                MERGE [DataMart].[dimQuoteVehicle] AS TGT&#xA;                                USING (SELECT * FROM QuoteVehiclesData)&#xA;                                AS QuoteVehicles&#xA;                                 ON QuoteVehicles.BK_QuoteVehicleId = TGT.BK_QuoteVehicleId&#xA;                                WHEN MATCHED THEN UPDATE&#xA;                                SET &#xA;                                TGT.[BK_EndorsementID] = QuoteVehicles.[BK_EndorsementID],&#xA;                                TGT.[BK_QuotePolicyTermId] = QuoteVehicles.[BK_QuotePolicyTermId],&#xA;                                TGT.[BK_DriverID] = QuoteVehicles.[BK_DriverID],&#xA;                                TGT.[BK_VehicleID] = QuoteVehicles.[BK_VehicleID],&#xA;                                TGT.[BK_PolicyTermID] = QuoteVehicles.[BK_PolicyTermID],&#xA;                                TGT.[VehicleYear] = QuoteVehicles.[VehicleYear],&#xA;                                TGT.[VehicleMake] = QuoteVehicles.[VehicleMake],&#xA;                                TGT.[VehicleModel] = QuoteVehicles.[VehicleModel],&#xA;                                TGT.[VehicleAge] = QuoteVehicles.[VehicleAge],&#xA;                                TGT.[BodyType] = QuoteVehicles.[BodyType],&#xA;                                TGT.[VIN] = QuoteVehicles.[VIN],&#xA;                                TGT.[UsageType] = QuoteVehicles.[UsageType],&#xA;                                TGT.[CostNew] = QuoteVehicles.[CostNew],&#xA;                                TGT.[CostNew_OrderBy] = QuoteVehicles.[CostNew_OrderBy],&#xA;                                TGT.[ISOSymbol] = QuoteVehicles.[ISOSymbol],&#xA;                                TGT.[OneWayMiles] = QuoteVehicles.[OneWayMiles],&#xA;                                TGT.[OneWayMiles_OrderBy] = QuoteVehicles.[OneWayMiles_OrderBy],&#xA;                                TGT.[OdometerMileage] = QuoteVehicles.[OdometerMileage],&#xA;                                TGT.[OdometerMileage_OrderBy] = QuoteVehicles.[OdometerMileage_OrderBy],&#xA;                                TGT.[AnnualMileage] = QuoteVehicles.[AnnualMileage],&#xA;                                TGT.[AnnualMileage_OrderBy] = QuoteVehicles.[AnnualMileage_OrderBy],&#xA;                                TGT.[AnnualMileageCode2] = QuoteVehicles.[AnnualMileageCode2],&#xA;                                TGT.[AntiTheftDevice] = QuoteVehicles.[AntiTheftDevice],&#xA;                                TGT.[AntiTheftDeviceType] = QuoteVehicles.[AntiTheftDeviceType],&#xA;                                TGT.[Restrain] = QuoteVehicles.[Restrain],&#xA;                                TGT.[DaytimeRunningLights] = QuoteVehicles.[DaytimeRunningLights],&#xA;                                TGT.[ABSInstalled] = QuoteVehicles.[ABSInstalled],&#xA;                                TGT.[Performance] = QuoteVehicles.[Performance],&#xA;                                TGT.[Salvaged] = QuoteVehicles.[Salvaged],&#xA;                                TGT.[Cylinders] = QuoteVehicles.[Cylinders],&#xA;                                TGT.[Garaged] = QuoteVehicles.[Garaged],&#xA;                                TGT.[GarageZip] = QuoteVehicles.[GarageZip],&#xA;                                TGT.[GarageCounty] = QuoteVehicles.[GarageCounty],&#xA;                                TGT.[COLL_Deductible] = QuoteVehicles.[COLL_Deductible],&#xA;                                TGT.[COMP_Deductible] = QuoteVehicles.[COMP_Deductible],&#xA;                                TGT.[COMGL_Deductible] = QuoteVehicles.[COMGL_Deductible],&#xA;                                TGT.[RapaCompSymbol] = QuoteVehicles.[RapaCompSymbol],&#xA;                                TGT.[RapaCollSymbol] = QuoteVehicles.[RapaCollSymbol],&#xA;                                TGT.[BIPDLiabilitySymbol] = QuoteVehicles.[BIPDLiabilitySymbol],&#xA;                                TGT.[Zone] = QuoteVehicles.[Zone],&#xA;                                TGT.[AnnualMileageActual] = QuoteVehicles.[AnnualMileageActual],&#xA;                                TGT.[DisablingDevice] = QuoteVehicles.[DisablingDevice],&#xA;                                TGT.[VinEtching] = QuoteVehicles.[VinEtching],&#xA;                                TGT.[IsVan] = QuoteVehicles.[IsVan],&#xA;                                TGT.[IsPickup] = QuoteVehicles.[IsPickup],&#xA;                                TGT.[IsLeased] = QuoteVehicles.[IsLeased],&#xA;                                TGT.[IsNeedInspection] = QuoteVehicles.[IsNeedInspection],&#xA;                                TGT.[ElectronicStabilityControl] = QuoteVehicles.[ElectronicStabilityControl],&#xA;                                TGT.[IsVerified] = QuoteVehicles.[IsVerified],&#xA;                                TGT.[LessorLiability] = QuoteVehicles.[LessorLiability]&#xA;                                WHEN NOT MATCHED THEN&#xA;                                INSERT&#xA;                                (&#xA;                                 [BK_EndorsementID],&#xA;                                 [BK_QuoteVehicleId],&#xA;                                 [BK_QuotePolicyTermId],&#xA;                                 [BK_DriverID],&#xA;                                 [BK_VehicleID],&#xA;                                 [BK_PolicyTermID],&#xA;                                 [VehicleYear],&#xA;                                 [VehicleMake],&#xA;                                 [VehicleModel],&#xA;                                 [VehicleAge],&#xA;                                 [BodyType],&#xA;                                 [VIN],&#xA;                                 [UsageType],&#xA;                                 [CostNew],&#xA;                                 [CostNew_OrderBy],&#xA;                                 [ISOSymbol],&#xA;                                 [OneWayMiles],&#xA;                                 [OneWayMiles_OrderBy],&#xA;                                 [OdometerMileage],&#xA;                                 [OdometerMileage_OrderBy],&#xA;                                 [AnnualMileage],&#xA;                                 [AnnualMileage_OrderBy],&#xA;                                 [AnnualMileageCode2],&#xA;                                 [AntiTheftDevice],&#xA;                                 [AntiTheftDeviceType],&#xA;                                 [Restrain],&#xA;                                 [DaytimeRunningLights],&#xA;                                 [ABSInstalled],&#xA;                                 [Performance],&#xA;                                 [Salvaged],&#xA;                                 [Cylinders],&#xA;                                 [Garaged],&#xA;                                 [GarageZip],&#xA;                                 [GarageCounty],&#xA;                                 [COLL_Deductible],&#xA;                                 [COMP_Deductible],&#xA;                                 [COMGL_Deductible],&#xA;                                 [RapaCompSymbol],&#xA;                                 [RapaCollSymbol],&#xA;                                 [BIPDLiabilitySymbol],&#xA;                                 [Zone],&#xA;                                 [AnnualMileageActual],&#xA;                                 [DisablingDevice],&#xA;                                 [VinEtching],&#xA;                                 [IsVan],&#xA;                                 [IsPickup],&#xA;                                 [IsLeased],&#xA;                                 [IsNeedInspection],&#xA;                                 [ElectronicStabilityControl],&#xA;                                 [IsVerified],&#xA;                                 [LessorLiability]&#xA;                                )&#xA;                                VALUES&#xA;                                (&#xA;                                 [BK_EndorsementID],&#xA;                                 [BK_QuoteVehicleId],&#xA;                                 [BK_QuotePolicyTermId],&#xA;                                 [BK_DriverID],&#xA;                                 [BK_VehicleID],&#xA;                                 [BK_PolicyTermID],&#xA;                                 [VehicleYear],&#xA;                                 [VehicleMake],&#xA;                                 [VehicleModel],&#xA;                                 [VehicleAge],&#xA;                                 [BodyType],&#xA;                                 [VIN],&#xA;                                 [UsageType],&#xA;                                 [CostNew],&#xA;                                 [CostNew_OrderBy],&#xA;                                 [ISOSymbol],&#xA;                                 [OneWayMiles],&#xA;                                 [OneWayMiles_OrderBy],&#xA;                                 [OdometerMileage],&#xA;                                 [OdometerMileage_OrderBy],&#xA;                                 [AnnualMileage],&#xA;                                 [AnnualMileage_OrderBy],&#xA;                                 [AnnualMileageCode2],&#xA;                                 [AntiTheftDevice],&#xA;                                 [AntiTheftDeviceType],&#xA;                                 [Restrain],&#xA;                                 [DaytimeRunningLights],&#xA;                                 [ABSInstalled],&#xA;                                 [Performance],&#xA;                                 [Salvaged],&#xA;                                 [Cylinders],&#xA;                                 [Garaged],&#xA;                                 [GarageZip],&#xA;                                 [GarageCounty],&#xA;                                 [COLL_Deductible],&#xA;                                 [COMP_Deductible],&#xA;                                 [COMGL_Deductible],&#xA;                                 [RapaCompSymbol],&#xA;                                 [RapaCollSymbol],&#xA;                                 [BIPDLiabilitySymbol],&#xA;                                 [Zone],&#xA;                                 [AnnualMileageActual],&#xA;                                 [DisablingDevice],&#xA;                                 [VinEtching],&#xA;                                 [IsVan],&#xA;                                 [IsPickup],&#xA;                                 [IsLeased],&#xA;                                 [IsNeedInspection],&#xA;                                 [ElectronicStabilityControl],&#xA;                                 [IsVerified],&#xA;                                 [LessorLiability]&#xA;                                );&#xA;                              &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{564215AE-67F0-493E-82D4-7D5E18D9E3D8}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create dimDriver" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create dimDriver" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                                 &#xA;                DECLARE @Yes INT = 1;&#xA;                DECLARE @No INT = 0;&#xA;                DECLARE @NotApplicable VARCHAR(3) = 'N/A';&#xA;                DECLARE @YesStr VARCHAR(3) = 'Yes';&#xA;                DECLARE @NoStr VARCHAR(3) = 'No';&#xA;                DECLARE @None VARCHAR(3) = 'None';  &#xA;&#xA;        -- Assign ID_Driver surrogate key  &#xA;                INSERT INTO [Staging].[DriverID] (&#xA;                 [SK_DriverID]&#xA;                 ,[BK_EndorsementID]&#xA;                 ,[BK_EndorsementPolicyTermID]&#xA;                 ,[BK_DriverID]&#xA;                 ,[BK_EndorsementPopulationID]&#xA;                 )                          &#xA;        SELECT NEXT VALUE FOR dbo.DriverSequence AS SK_DriverID,            &#xA;            ed.EndorsementID AS BK_EndorsementID,&#xA;            ed.EndorsementPolicyTermID AS BK_EndorsementPolicyTermID,&#xA;            ed.DriverID AS BK_DriverID,&#xA;            ed.EndorsementPopulationID AS BK_EndorsementPopulationID          &#xA;         FROM [Extract].[P1_EndorsementDriver] AS ed&#xA;         JOIN [Extract].[P1_EndorsementPolicyTerm] AS ept ON ed.EndorsementPolicyTermID = ept.EndorsementPolicyTermID&#xA;                 WHERE ed.EndorsementPopulationID NOT IN (SELECT BK_EndorsementPopulationID FROM [Staging].[DriverID])        &#xA;        &#xA;        --Create mapping table for EVC to Driver&#xA;        INSERT INTO [Staging].[EndorsementVehicleCoverage_DriverID]&#xA;        SELECT evc.EndorsementVehicleCoverageID&#xA;         ,ed.EndorsementPopulationID&#xA;         ,sd.SK_DriverID&#xA;         ,evc.EndorsementVehicleID AS BK_EndorsementVehicleID&#xA;         ,evc.Premium&#xA;         ,evc.ProgramCoverageID&#xA;        FROM [Extract].[P1_EndorsementVehicleCoverage] AS evc&#xA;        JOIN [Extract].[P1_EndorsementVehicle] AS ev ON ev.EndorsementVehicleID = evc.EndorsementVehicleID&#xA;        JOIN [Extract].[P1_EndorsementPolicyTerm] AS ept ON ev.EndorsementPolicyTermID = ept.EndorsementPolicyTermID&#xA;        JOIN [Extract].[P1_Driver] AS d ON evc.AssignedDriverGuid = d.[Guid]&#xA;         AND d.PolicyTermID = ept.PolicyTermID&#xA;        JOIN [Extract].[P1_EndorsementDriver] AS ed ON ed.DriverID = d.PopulationID&#xA;         AND ev.EndorsementPolicyTermID = ed.EndorsementPolicyTermID&#xA;        JOIN [Staging].[DriverID] AS sd ON sd.BK_EndorsementPopulationID = ed.EndorsementPopulationID&#xA;        WHERE NOT EXISTS (&#xA;          SELECT 1&#xA;          FROM [Staging].[EndorsementVehicleCoverage_DriverID] evc_did&#xA;          WHERE evc_did.SK_DriverID = sd.SK_DriverID&#xA;          )&#xA;&#xA;                INSERT INTO [Staging].[DriversID] (&#xA;                 SK_DriversID&#xA;                 ,BK_EndorsementID&#xA;                 )&#xA;                SELECT NEXT VALUE&#xA;                FOR dbo.DriversSequence AS SK_DriversID&#xA;                 ,ept.EndorsementID AS BK_EndorsementID&#xA;                FROM [Extract].[P1_EndorsementDriver] AS ed&#xA;                JOIN [Extract].[P1_EndorsementPolicyTerm] AS ept ON ed.EndorsementPolicyTermID = ept.EndorsementPolicyTermID&#xA;                WHERE ept.EndorsementID NOT IN (&#xA;                  SELECT BK_EndorsementID&#xA;                  FROM [Staging].[DriversID]&#xA;                  )&#xA;                GROUP BY ept.EndorsementID&#xA;                &#xA;    &#xA;                --Update dimDriver table &#xA;                ;WITH DriverData&#xA;                AS&#xA;                (&#xA;                SELECT  did.SK_DriverID AS SK_DriverID,          &#xA;                  did.BK_EndorsementID,&#xA;                  did.BK_EndorsementPolicyTermID,&#xA;                  did.BK_EndorsementPopulationID,&#xA;                  did.BK_DriverID AS BK_DriverID,&#xA;                  ept.PolicyTermID AS BK_PolicyTermID,&#xA;                  --LastName&#xA;                  epop.LastName,&#xA;                  --MiddleName&#xA;                  epop.MiddleName,&#xA;                  --FirstName&#xA;                  epop.FirstName,&#xA;                  --DriverType&#xA;                  CASE WHEN ed.IsExcluded = 0 THEN 'Rated' &#xA;                    WHEN ed.IsExcluded = 1 THEN 'Excluded' &#xA;                    ELSE @NotApplicable &#xA;                  END AS DriverType,&#xA;                  --Sex &#xA;                  CAST(CASE WHEN LTRIM(RTRIM(epop.Gender)) IN ('F', 'Female') THEN 'Female'&#xA;                    WHEN LTRIM(RTRIM(epop.Gender)) IN ('M', 'Male') THEN 'Male'          &#xA;                    ELSE @NotApplicable&#xA;                  END AS VARCHAR(7)) AS Sex,&#xA;                  --MaritalStatus&#xA;                  CASE WHEN LEN(ISNULL(epop.MaritalStatus, '')) &gt; 0 THEN epop.MaritalStatus ELSE 'N/A' END AS MaritalStatus,&#xA;                  --RelationToInsured&#xA;                  CASE WHEN rel.RelationToApplicantName = 'Applicant' THEN 'Self'&#xA;                    WHEN LEN(ISNULL(rel.RelationToApplicantName, '')) = 0 THEN @NotApplicable&#xA;                    ELSE rel.RelationToApplicantName END &#xA;                  AS RelationToInsured,&#xA;                  -- Age&#xA;                  IIF(Ages.Age &gt; 12, CAST(Ages.Age AS VARCHAR(7)), @NotApplicable) AS Age,  &#xA;                  -- AgeGroup   &#xA;                  CAST(ISNULL(AgeGroups.AgeGroup, @NotApplicable) AS VARCHAR(7)) AS AgeGroup,&#xA;                  --YearsLicensedUS&#xA;                  CASE WHEN ed.YearsLicensedUS &gt;0 THEN CAST(ed.YearsLicensedUS AS VARCHAR(6)) ELSE @NotApplicable END AS YearsLicensedUS,&#xA;                  --YearsLicensedForeign&#xA;                  CASE WHEN ed.YearsLicensedForeign &gt;0 THEN CAST(ed.YearsLicensedForeign AS VARCHAR(6)) ELSE @NotApplicable END AS YearsLicensedForeign,&#xA;                  --GoodDriver&#xA;                  CAST(CASE ed.GoodDriver&#xA;                   WHEN @Yes&#xA;                    THEN @YesStr&#xA;                   WHEN @No&#xA;                    THEN @NoStr&#xA;                   ELSE @NotApplicable&#xA;                   END AS VARCHAR(6)) AS GoodDriver,&#xA;                  --GoodStudent&#xA;                  CAST(CASE ed.GoodStudent&#xA;                   WHEN @Yes&#xA;                    THEN @YesStr&#xA;                   WHEN @No&#xA;                    THEN @NoStr&#xA;                   ELSE @NotApplicable&#xA;                   END AS VARCHAR(6)) AS GoodStudent,&#xA;                  --GoodStudent&#xA;                  CAST(CASE ed.MatureDriver&#xA;                   WHEN @Yes&#xA;                    THEN @YesStr&#xA;                   WHEN @No&#xA;                    THEN @NoStr&#xA;                   ELSE @NotApplicable&#xA;                   END AS VARCHAR(6)) AS MatureDriver,&#xA;                  --AlcoholEducationalProgram&#xA;                  CAST(CASE ed.AlcoholEducationalProgram&#xA;                   WHEN @Yes&#xA;                    THEN @YesStr&#xA;                   WHEN @No&#xA;                    THEN @NoStr&#xA;                   ELSE @NotApplicable&#xA;                   END AS VARCHAR(6)) AS AlcoholEducationalProgram,&#xA;                  --EmploymentCategory&#xA;                  CASE WHEN LEN(ISNULL(oc.OccupationCategoryName, '')) &gt;0 THEN oc.OccupationCategoryName ELSE @NotApplicable END AS EmploymentCategory,&#xA;                  --EmploymentSubcategory&#xA;                  CASE WHEN LEN(ISNULL(o.OccupationName, '')) &gt;0 THEN o.OccupationName ELSE @NotApplicable END AS EmploymentSubcategory,&#xA;                  --RequiresSR22&#xA;                  CAST(CASE ed.SR22Filing&#xA;                   WHEN @Yes&#xA;                    THEN @YesStr&#xA;                   WHEN @No&#xA;                    THEN @NoStr&#xA;                   ELSE @NotApplicable&#xA;                   END AS VARCHAR(6)) AS RequiresSR22,&#xA;                  --Homeowner&#xA;                  CASE &#xA;                      WHEN ed.HomeOwner = @None&#xA;                       THEN @NoStr&#xA;                      WHEN LEN(ISNULL(ed.HomeOwner, '')) = 0&#xA;                       THEN @NotApplicable&#xA;                      ELSE ed.HomeOwner&#xA;                      END AS HomeOwner,&#xA;                  --PriorBILimit&#xA;                  CASE &#xA;                      WHEN LEN(ISNULL(ed.PriorBILimit, '')) = 0&#xA;                       THEN @NotApplicable&#xA;                      ELSE ed.PriorBILimit&#xA;                      END AS PriorBILimit,&#xA;                  --InternationallyLicensed&#xA;                  CAST(CASE ed.IsInternationalDriver&#xA;                   WHEN @Yes&#xA;                    THEN @YesStr&#xA;                   WHEN @No&#xA;                    THEN @NoStr&#xA;                   ELSE @NotApplicable&#xA;                   END AS VARCHAR(6)) AS InternationallyLicensed,&#xA;                  --EmploymentStatus&#xA;                  CASE &#xA;                      WHEN LEN(ISNULL(empst.EmploymentStatusName, '')) = 0&#xA;                       THEN @NotApplicable&#xA;                      ELSE empst.EmploymentStatusName&#xA;                      END AS EmploymentStatus,&#xA;                  --LicenseStatus&#xA;                  CASE &#xA;                      WHEN LEN(ISNULL(licst.LicenseStatusTypeName, '')) = 0&#xA;                       THEN @NotApplicable&#xA;                      ELSE licst.LicenseStatusTypeName&#xA;                      END AS LicenseStatus,&#xA;                  --LicenseState&#xA;                  CASE &#xA;                      WHEN LEN(ISNULL(licstate.StateCodeName, '')) = 0&#xA;                       THEN @NotApplicable&#xA;                      ELSE licstate.StateCodeName&#xA;                      END AS LicenseState,&#xA;                  --Surcharge Points&#xA;                  CAST(ISNULL(ed.Points, 0) AS VARCHAR(6)) AS SurchargePoints,&#xA;                  --StudentAtSchool_Discount&#xA;                  CAST(CASE ed.DiscountStudentAtSchool&#xA;                   WHEN @Yes&#xA;                    THEN @YesStr&#xA;                   WHEN @No&#xA;                    THEN @NoStr&#xA;                   ELSE @NotApplicable&#xA;                   END AS VARCHAR(6)) AS StudentAtSchool_Discount,&#xA;                  --CreditScore&#xA;                  CAST(CASE WHEN ed.CreditScore &gt;= 0 THEN CAST(ed.CreditScore AS VARCHAR(6))       &#xA;                     ELSE @NotApplicable&#xA;                  END AS VARCHAR(6)) AS CreditScore,&#xA;                  --CreditScoreGroup&#xA;                  ISNULL(scores.[Text], @NotApplicable) AS CreditScoreGroup,&#xA;                  --CreditScoreGroupOrderBy&#xA;                  CAST(ISNULL(scores.OrderNum, 0) AS VARCHAR(8)) AS CreditScoreGroupOrderBy,&#xA;                  --AccidentPreventionCourse_Discount&#xA;                  CAST(CASE ed.DiscountAccidentPreventionCourse&#xA;                   WHEN @Yes&#xA;                    THEN @YesStr&#xA;                   WHEN @No&#xA;                    THEN @NoStr&#xA;                   ELSE @NotApplicable&#xA;                   END AS VARCHAR(6)) AS AccidentPreventionCourse_Discount,&#xA;                  --InexperiencedDriver_Surcharge&#xA;                  CAST(CASE ed.SurchargeInexperiencedDriver&#xA;                   WHEN @Yes&#xA;                    THEN @YesStr&#xA;                   WHEN @No&#xA;                    THEN @NoStr&#xA;                   ELSE @NotApplicable&#xA;                   END AS VARCHAR(6)) AS InexperiencedDriver_Surcharge,&#xA;                  --HasPersonalLicense&#xA;                  CAST(CASE ed.HasPersonalLicense&#xA;                   WHEN @Yes&#xA;                    THEN @YesStr&#xA;                   WHEN @No&#xA;                    THEN @NoStr&#xA;                   ELSE @NotApplicable&#xA;                   END AS VARCHAR(6)) AS HasPersonalLicense,&#xA;                  --DistantStudent&#xA;                  CAST(CASE ed.DistantStudent&#xA;                   WHEN @Yes&#xA;                    THEN @YesStr&#xA;                   WHEN @No&#xA;                    THEN @NoStr&#xA;                   ELSE @NotApplicable&#xA;                   END AS VARCHAR(6)) AS DistantStudent,&#xA;                  --TeenSafe&#xA;                  CAST(CASE ed.TeenSafe&#xA;                   WHEN @Yes&#xA;                    THEN @YesStr&#xA;                   WHEN @No&#xA;                    THEN @NoStr&#xA;                   ELSE @NotApplicable&#xA;                   END AS VARCHAR(6)) AS TeenSafe,&#xA;                  --FirstResponder_Discount&#xA;                  CAST(CASE ed.FirstResponder&#xA;                   WHEN @Yes&#xA;                    THEN @YesStr&#xA;                   WHEN @No&#xA;                    THEN @NoStr&#xA;                   ELSE @NotApplicable&#xA;                   END AS VARCHAR(6)) AS FirstResponder_Discount,&#xA;                  --ExtendedNonOwned&#xA;                  CAST(CASE ed.ExtendedNonOwned&#xA;                   WHEN @Yes&#xA;                    THEN @YesStr&#xA;                   WHEN @No&#xA;                    THEN @NoStr&#xA;                   ELSE @NotApplicable&#xA;                   END AS VARCHAR(6)) AS ExtendedNonOwned,&#xA;                  --ExtendedNonOwnedLawEnforcement&#xA;                  CAST(CASE ed.ExtendedNonOwnedLawEnforcement&#xA;                   WHEN @Yes&#xA;                    THEN @YesStr&#xA;                   WHEN @No&#xA;                    THEN @NoStr&#xA;                   ELSE @NotApplicable&#xA;                   END AS VARCHAR(6)) AS ExtendedNonOwnedLawEnforcement,&#xA;                  --FR44Filling&#xA;                  CAST(CASE ed.FR44Filling&#xA;                   WHEN @Yes&#xA;                    THEN @YesStr&#xA;                   WHEN @No&#xA;                    THEN @NoStr&#xA;                   ELSE @NotApplicable&#xA;                   END AS VARCHAR(6)) AS FR44Filling,&#xA;                  --CalculatedPriorDaysLapse&#xA;                  CAST(CASE WHEN ed.CalculatedPriorDaysLapse &gt;= 0 THEN CAST(ed.CalculatedPriorDaysLapse AS VARCHAR(6))       &#xA;                     ELSE @NotApplicable&#xA;                  END AS VARCHAR(6)) AS CalculatedPriorDaysLapse,   &#xA;                  --CalculatedPriorDaysLapseGroup&#xA;                  ISNULL(lapses.[Text], @NotApplicable) AS CalculatedPriorDaysLapseGroup,&#xA;                  --CalculatedPriorDaysLapseGroupOrderByOrderBy&#xA;                  CAST(ISNULL(lapses.OrderNum, 0) AS VARCHAR(8)) AS CalculatedPriorDaysLapseGroupOrderBy,&#xA;                  --MvrObtainedWithoutLicense&#xA;                  CAST(CASE ed.MvrObtainedWithoutLicense&#xA;                   WHEN @Yes&#xA;                    THEN @YesStr&#xA;                   WHEN @No&#xA;                    THEN @NoStr&#xA;                   ELSE @NotApplicable&#xA;                   END AS VARCHAR(6)) AS MvrObtainedWithoutLicense,&#xA;                  --IsCoinsured&#xA;                     CAST(CASE ed.IsCoinsured&#xA;                   WHEN @Yes&#xA;                    THEN @YesStr&#xA;                   WHEN @No&#xA;                    THEN @NoStr&#xA;                   ELSE @NotApplicable&#xA;                   END AS VARCHAR(6)) AS IsCoinsured,&#xA;                  --MaybeTeenSafe&#xA;                     CAST(CASE ed.MaybeTeenSafe&#xA;                   WHEN @Yes&#xA;                    THEN @YesStr&#xA;                   WHEN @No&#xA;                    THEN @NoStr&#xA;                   ELSE @NotApplicable&#xA;                   END AS VARCHAR(6)) AS MaybeTeenSafe,&#xA;                  --MaybeFirstResponder&#xA;                  CAST(CASE ed.MaybeFirstResponder&#xA;                   WHEN @Yes&#xA;                    THEN @YesStr&#xA;                   WHEN @No&#xA;                    THEN @NoStr&#xA;                   ELSE @NotApplicable&#xA;                   END AS VARCHAR(6)) AS MaybeFirstResponder,&#xA;                  --MinorChild_Discount&#xA;                  CAST(CASE ed.DiscountMinorChild&#xA;                   WHEN @Yes&#xA;                    THEN @YesStr&#xA;                   WHEN @No&#xA;                    THEN @NoStr&#xA;                   ELSE @NotApplicable&#xA;                   END AS VARCHAR(6)) AS MinorChild_Discount,&#xA;                  --OccasionalOperator_Discount&#xA;                  CAST(CASE ed.DiscountOccasionalOperator&#xA;                   WHEN @Yes&#xA;                    THEN @YesStr&#xA;                   WHEN @No&#xA;                    THEN @NoStr&#xA;                   ELSE @NotApplicable&#xA;                   END AS VARCHAR(6)) AS OccasionalOperator_Discount                       &#xA;         &#xA;                FROM [Extract].[P1_EndorsementDriver] AS ed         &#xA;                JOIN [Extract].[P1_EndorsementPopulation] AS epop ON ed.EndorsementPopulationID = epop.EndorsementPopulationID&#xA;                JOIN [Extract].[P1_EndorsementPolicyTerm] AS ept ON ed.EndorsementPolicyTermID = ept.EndorsementPolicyTermID&#xA;                JOIN [Extract].[P1_Endorsement] as endo ON ept.EndorsementID = endo.EndorsementID&#xA;                JOIN [Staging].[DriverID] AS did ON ept.EndorsementID = did.BK_EndorsementID AND ed.DriverID = did.BK_DriverID&#xA;                JOIN [Extract].[P1_PolicyTerm]  AS pt ON ept.PolicyTermID = pt.PolicyTermID&#xA;                JOIN [Extract].[P1_Program] AS prog ON prog.ProgramID = pt.ProgramID&#xA;                JOIN [Extract].[P1_ProgramGroup] AS proggrp ON prog.ProgramGroupID = proggrp.ProgramGroupID                  &#xA;                LEFT JOIN [Extract].[P1_RelationToApplicant] AS rel ON rel.RelationToApplicantID = ed.RelationToApplicant&#xA;                LEFT JOIN [Extract].[P1_OccupationCategory] AS oc ON oc.OccupationCategoryID = ed.EmploymentCategory&#xA;                LEFT JOIN [Extract].[P1_Occupation] AS o ON o.OccupationID = ed.EmploymentSubcategory&#xA;                LEFT JOIN [Extract].[P1_EmploymentStatus] AS empst ON empst.EmploymentStatusID = ed.EmploymentStatus&#xA;                LEFT JOIN [Extract].[P1_LicenseStatusType] AS licst ON licst.LicenseStatusTypeID = ed.MVRLicenseStatusTypeID&#xA;                LEFT JOIN [Extract].[P1_StateCode] AS licstate ON licstate.StateCodeID = ed.LicenseIssueState&#xA;                CROSS APPLY (&#xA;                 SELECT DATEDIFF(yy, epop.DOB, Dates.LocalDatetime) AS Age&#xA;                 FROM dbo.fGetUtcToLocalDatetimeConverter(proggrp.TimeZone, endo.EffectiveDate) AS Dates&#xA;                 ) AS Ages&#xA;                OUTER APPLY (&#xA;                 SELECT TOP 1 Art.[Text] AS AgeGroup&#xA;                 FROM [Staging].[AgeGroupRangeText] art&#xA;                 WHERE art.LowestValue &lt;= Ages.Age&#xA;                 ORDER BY art.LowestValue DESC&#xA;                 ) AS AgeGroups&#xA;                OUTER APPLY (&#xA;                 SELECT TOP 1 sc.[Text]&#xA;                  ,sc.OrderNum&#xA;                 FROM [Staging].[CreditScoreRangeText] sc&#xA;                 WHERE sc.LowestValue &lt;= ed.CreditScore&#xA;                 ORDER BY sc.LowestValue DESC&#xA;                 ) AS scores&#xA;                OUTER APPLY (&#xA;                 SELECT TOP 1 dl.[Text]&#xA;                  ,dl.OrderNum&#xA;                 FROM [Staging].[DaysLapseRangeText] dl&#xA;                 WHERE dl.LowestValue &lt;= ed.CalculatedPriorDaysLapse&#xA;                 ORDER BY dl.LowestValue DESC&#xA;                 ) AS lapses&#xA;                )&#xA;                MERGE [DataMart].[dimDriver] AS TGT&#xA;                USING (SELECT * FROM DriverData)&#xA;                AS Drivers&#xA;                 ON Drivers.BK_EndorsementID = TGT.BK_EndorsementID AND Drivers.BK_DriverID = TGT.BK_DriverID&#xA;                WHEN MATCHED THEN UPDATE&#xA;                 SET TGT.[LastName] = Drivers.[LastName],&#xA;                  TGT.[MiddleName] = Drivers.[MiddleName],&#xA;                  TGT.[FirstName] = Drivers.[FirstName],&#xA;                  TGT.[DriverType] = Drivers.[DriverType],&#xA;                  TGT.[Sex] = Drivers.[Sex],&#xA;                  TGT.[MaritalStatus] = Drivers.[MaritalStatus],&#xA;                  TGT.[RelationToInsured] = Drivers.[RelationToInsured],&#xA;                  TGT.[Age] = Drivers.[Age],&#xA;                  TGT.[AgeGroup] = Drivers.[AgeGroup],&#xA;                  TGT.[YearsLicensedUS] = Drivers.[YearsLicensedUS],&#xA;                  TGT.[YearsLicensedForeign] = Drivers.[YearsLicensedForeign],&#xA;                  TGT.[GoodDriver] = Drivers.[GoodDriver],&#xA;                  TGT.[GoodStudent] = Drivers.[GoodStudent],&#xA;                  TGT.[MatureDriver] = Drivers.[MatureDriver],&#xA;                  TGT.[AlcoholEducationalProgram] = Drivers.[AlcoholEducationalProgram],&#xA;                  TGT.[EmploymentCategory] = Drivers.[EmploymentCategory],&#xA;                  TGT.[EmploymentSubcategory] = Drivers.[EmploymentSubcategory],&#xA;                  TGT.[RequiresSR22] = Drivers.[RequiresSR22],&#xA;                  TGT.[HomeOwner] = Drivers.[HomeOwner],&#xA;                  TGT.[PriorBILimit] = Drivers.[PriorBILimit],&#xA;                  TGT.[InternationallyLicensed] = Drivers.[InternationallyLicensed],&#xA;                  TGT.[EmploymentStatus] = Drivers.[EmploymentStatus],&#xA;                  TGT.[LicenseStatus] = Drivers.[LicenseStatus],&#xA;                  TGT.[LicenseState] = Drivers.[LicenseState],&#xA;                  TGT.[SurchargePoints] = Drivers.[SurchargePoints],&#xA;                  TGT.[StudentAtSchool_Discount] = Drivers.[StudentAtSchool_Discount],&#xA;                  TGT.[CreditScore] = Drivers.[CreditScore],&#xA;                  TGT.[CreditScoreGroup] = Drivers.[CreditScoreGroup],&#xA;                  TGT.[CreditScoreGroupOrderBy] = Drivers.[CreditScoreGroupOrderBy],&#xA;                  TGT.[AccidentPreventionCourse_Discount] = Drivers.[AccidentPreventionCourse_Discount],&#xA;                  TGT.[InexperiencedDriver_Surcharge] = Drivers.[InexperiencedDriver_Surcharge],&#xA;                  TGT.[HasPersonalLicense] = Drivers.[HasPersonalLicense],&#xA;                  TGT.[DistantStudent] = Drivers.[DistantStudent],&#xA;                  TGT.[TeenSafe] = Drivers.[TeenSafe],&#xA;                  TGT.[FirstResponder_Discount] = Drivers.[FirstResponder_Discount],&#xA;                  TGT.[ExtendedNonOwned] = Drivers.[ExtendedNonOwned],&#xA;                  TGT.[ExtendedNonOwnedLawEnforcement] = Drivers.[ExtendedNonOwnedLawEnforcement],&#xA;                  TGT.[FR44Filling] = Drivers.[FR44Filling],&#xA;                  TGT.[CalculatedPriorDaysLapse] = Drivers.[CalculatedPriorDaysLapse],&#xA;                  TGT.[CalculatedPriorDaysLapseGroup] = Drivers.[CalculatedPriorDaysLapseGroup],&#xA;                  TGT.[CalculatedPriorDaysLapseGroupOrderBy] = Drivers.[CalculatedPriorDaysLapseGroupOrderBy],&#xA;                  TGT.[MvrObtainedWithoutLicense] = Drivers.[MvrObtainedWithoutLicense],&#xA;                  TGT.[IsCoinsured] = Drivers.[IsCoinsured],&#xA;                  TGT.[MaybeTeenSafe] = Drivers.[MaybeTeenSafe],&#xA;                  TGT.[MaybeFirstResponder] = Drivers.[MaybeFirstResponder],&#xA;                  TGT.[MinorChild_Discount] = Drivers.[MinorChild_Discount],&#xA;                  TGT.[OccasionalOperator_Discount] = Drivers.[OccasionalOperator_Discount]&#xA;                WHEN NOT MATCHED THEN&#xA;                INSERT&#xA;                 ([SK_DriverID],&#xA;                 [BK_EndorsementID],&#xA;                 [BK_EndorsementPolicyTermID],&#xA;     [BK_EndorsementPopulationID],&#xA;                 [BK_DriverID],&#xA;                 [BK_PolicyTermID],&#xA;                 [LastName],&#xA;                 [MiddleName],&#xA;                 [FirstName],&#xA;                 [DriverType],&#xA;                 [Sex],&#xA;                 [MaritalStatus],&#xA;                 [RelationToInsured],&#xA;                 [Age],&#xA;                 [AgeGroup],&#xA;                 [YearsLicensedUS],&#xA;                 [YearsLicensedForeign],&#xA;                 [GoodDriver],&#xA;                 [GoodStudent],&#xA;                 [MatureDriver],&#xA;                 [AlcoholEducationalProgram],&#xA;                 [EmploymentCategory],&#xA;                 [EmploymentSubcategory],&#xA;                 [RequiresSR22],&#xA;                 [HomeOwner],&#xA;                 [PriorBILimit],&#xA;                 [InternationallyLicensed],&#xA;                 [EmploymentStatus],&#xA;                 [LicenseStatus],&#xA;                 [LicenseState],&#xA;                 [SurchargePoints],&#xA;                 [StudentAtSchool_Discount],&#xA;                 [CreditScore],&#xA;                 [CreditScoreGroup],&#xA;                 [CreditScoreGroupOrderBy],&#xA;                 [AccidentPreventionCourse_Discount],&#xA;                 [InexperiencedDriver_Surcharge],&#xA;                 [HasPersonalLicense],&#xA;                 [DistantStudent],&#xA;                 [TeenSafe],&#xA;                 [FirstResponder_Discount],&#xA;                 [ExtendedNonOwned],&#xA;                 [ExtendedNonOwnedLawEnforcement],&#xA;                 [FR44Filling],&#xA;                 [CalculatedPriorDaysLapse],&#xA;                 [CalculatedPriorDaysLapseGroup],&#xA;                 [CalculatedPriorDaysLapseGroupOrderBy],&#xA;                 [MvrObtainedWithoutLicense],&#xA;                 [IsCoinsured],&#xA;                 [MaybeTeenSafe],&#xA;                 [MaybeFirstResponder],&#xA;                 [MinorChild_Discount],&#xA;                 [OccasionalOperator_Discount])&#xA;                VALUES&#xA;                 ([SK_DriverID],&#xA;                 [BK_EndorsementID],&#xA;                 [BK_EndorsementPolicyTermID],&#xA;     [BK_EndorsementPopulationID],&#xA;                 [BK_DriverID],&#xA;                 [BK_PolicyTermID],&#xA;                 [LastName],&#xA;                 [MiddleName],&#xA;                 [FirstName],&#xA;                 [DriverType],&#xA;                 [Sex],&#xA;                 [MaritalStatus],&#xA;                 [RelationToInsured],&#xA;                 [Age],&#xA;                 [AgeGroup],&#xA;                 [YearsLicensedUS],&#xA;                 [YearsLicensedForeign],&#xA;                 [GoodDriver],&#xA;                 [GoodStudent],&#xA;                 [MatureDriver],&#xA;                 [AlcoholEducationalProgram],&#xA;                 [EmploymentCategory],&#xA;                 [EmploymentSubcategory],&#xA;                 [RequiresSR22],&#xA;                 [HomeOwner],&#xA;                 [PriorBILimit],&#xA;                 [InternationallyLicensed],&#xA;                 [EmploymentStatus],&#xA;                 [LicenseStatus],&#xA;                 [LicenseState],&#xA;                 [SurchargePoints],&#xA;                 [StudentAtSchool_Discount],&#xA;                 [CreditScore],&#xA;                 [CreditScoreGroup],&#xA;                 [CreditScoreGroupOrderBy],&#xA;                 [AccidentPreventionCourse_Discount],&#xA;                 [InexperiencedDriver_Surcharge],&#xA;                 [HasPersonalLicense],&#xA;                 [DistantStudent],&#xA;                 [TeenSafe],&#xA;                 [FirstResponder_Discount],&#xA;                 [ExtendedNonOwned],&#xA;                 [ExtendedNonOwnedLawEnforcement],&#xA;                 [FR44Filling],&#xA;                 [CalculatedPriorDaysLapse],&#xA;                 [CalculatedPriorDaysLapseGroup],&#xA;                 [CalculatedPriorDaysLapseGroupOrderBy],&#xA;                 [MvrObtainedWithoutLicense],&#xA;                 [IsCoinsured],&#xA;                 [MaybeTeenSafe],&#xA;                 [MaybeFirstResponder],&#xA;                 [MinorChild_Discount],&#xA;                 [OccasionalOperator_Discount]);  &#xA;                   &#xA;         --Prepare factlessDriver and dimDrivers  &#xA;&#xA;                  &#xA;                   INSERT INTO [DataMart].[factlessDrivers](SK_DriversID, SK_DriverID, BK_DriverID)&#xA;          SELECT ISNULL(id.SK_DriversID, -1) AS SK_DriversID&#xA;           ,dr.SK_DriverID&#xA;           ,dr.BK_DriverID          &#xA;          FROM [DataMart].[dimDriver] AS dr&#xA;             LEFT JOIN [Staging].[DriversID] AS id ON dr.BK_EndorsementID = id.BK_EndorsementID&#xA;                    WHERE dr.SK_DriverID  NOT IN (SELECT  SK_DriverID FROM [DataMart].[factlessDrivers])&#xA;                       &#xA;                    INSERT INTO [DataMart].[dimDrivers]     &#xA;                    SELECT fd.SK_DriversID AS SK_DriversID&#xA;                    FROM [DataMart].[factlessDrivers] fd&#xA;                    WHERE fd.SK_DriversID NOT IN (SELECT SK_DriversID FROM [DataMart].[dimDrivers])&#xA;                    GROUP BY fd.SK_DriversID;&#xA;       &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{419266A9-D570-4499-9E0E-B6028CB5CD0D}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create dimQuoteDriver" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create dimQuoteDriver" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                                DECLARE @Yes INT = 1;&#xA;                                DECLARE @No INT = 0;&#xA;                                DECLARE @NotApplicable VARCHAR(3) = 'N/A';&#xA;                                DECLARE @YesStr VARCHAR(3) = 'Yes';&#xA;                                DECLARE @NoStr VARCHAR(3) = 'No';&#xA;                                DECLARE @None VARCHAR(3) = 'None';&#xA;                                DECLARE @Active VARCHAR(7) = 'Active';&#xA;                                DECLARE @Passive VARCHAR(7) = 'Passive';&#xA;                                DECLARE @DeductibleComp VARCHAR(5) = 'COMP';&#xA;                                DECLARE @DeductibleColl VARCHAR(5) = 'COLL';&#xA;                                DECLARE @DeductibleComgl VARCHAR(5) = 'COMGL';&#xA;                                DECLARE @EmptyString VARCHAR(10) = '';&#xA;&#xA;                                WITH QuoteDriversData AS&#xA;                                (&#xA;                                SELECT &#xA;                                 - 1 AS BK_EndorsementID&#xA;                                 ,qd.QuotePolicyTermId AS BK_QuotePolicyTermId&#xA;                                 ,qd.QuoteDriverId AS BK_DriverID&#xA;                                 ,qd.QuotePolicyTermId AS BK_PolicyTermID&#xA;                                 ,qd.LastName&#xA;                                 ,qd.MiddleName&#xA;                                 ,qd.FirstName&#xA;                                 ,CASE &#xA;                                  WHEN qd.IsExcluded = @No&#xA;                                   THEN 'Rated'&#xA;                                  WHEN qd.IsExcluded = @Yes&#xA;                                   THEN 'Excluded'&#xA;                                  ELSE @NotApplicable&#xA;                                  END AS DriverType&#xA;                                 ,CAST(CASE &#xA;                                   WHEN LTRIM(RTRIM(qd.Gender)) IN ('F', 'Female')&#xA;                                    THEN 'Female'&#xA;                                   WHEN LTRIM(RTRIM(qd.Gender)) IN ('M', 'Male')&#xA;                                    THEN 'Male'&#xA;                                   ELSE @NotApplicable&#xA;                                   END AS VARCHAR(7)) AS Sex&#xA;                                 ,dbo.Proper(qd.MaritalStatus) AS MaritalStatus&#xA;                                 ,CASE &#xA;                                  WHEN rel.RelationToApplicantName = 'Applicant'&#xA;                                   THEN 'Self'&#xA;                                  WHEN LEN(ISNULL(rel.RelationToApplicantName, '')) = 0&#xA;                                   THEN @NotApplicable&#xA;                                  ELSE rel.RelationToApplicantName&#xA;                                  END AS RelationToInsured&#xA;                                 ,IIF(Ages.Age &gt; 12, CAST(Ages.Age AS VARCHAR(7)), @NotApplicable) AS Age&#xA;                                 ,CAST(ISNULL(AgeGroups.AgeGroup, @NotApplicable) AS VARCHAR(7)) AS AgeGroup&#xA;                                 ,IIF(qd.YearsLicensedUS &gt; 0, CAST(qd.YearsLicensedUS AS VARCHAR(6)), @NotApplicable) AS YearsLicensedUS&#xA;                                 ,IIF(qd.YearsLicensedForeign &gt; 0, CAST(qd.YearsLicensedForeign AS VARCHAR(6)), @NotApplicable) AS YearsLicensedForeign&#xA;                                 ,CAST(CASE qd.GoodDriver&#xA;                                   WHEN @Yes&#xA;                                    THEN @YesStr&#xA;                                   WHEN @No&#xA;                                    THEN @NoStr&#xA;                                   ELSE @NotApplicable&#xA;                                   END AS VARCHAR(6)) AS GoodDriver&#xA;                                 ,CAST(CASE qd.GoodStudent&#xA;                                   WHEN @Yes&#xA;                                    THEN @YesStr&#xA;                                   WHEN @No&#xA;                                    THEN @NoStr&#xA;                                   ELSE @NotApplicable&#xA;                                   END AS VARCHAR(6)) AS GoodStudent&#xA;                                 ,CAST(CASE qd.MatureDriver&#xA;                                   WHEN @Yes&#xA;                                    THEN @YesStr&#xA;                                   WHEN @No&#xA;                                    THEN @NoStr&#xA;                                   ELSE @NotApplicable&#xA;                                   END AS VARCHAR(6)) AS MatureDriver&#xA;                                 ,CAST(CASE qd.AlcoholEducationalProgram&#xA;                                   WHEN @Yes&#xA;                                    THEN @YesStr&#xA;                                   WHEN @No&#xA;                                    THEN @NoStr&#xA;                                   ELSE @NotApplicable&#xA;                                   END AS VARCHAR(6)) AS AlcoholEducationalProgram&#xA;                                 ,IIF(LEN(ISNULL(oc.OccupationCategoryName, '')) &gt; 0, oc.OccupationCategoryName, @NotApplicable) AS EmploymentCategory&#xA;                                 ,IIF(LEN(ISNULL(o.OccupationName, '')) &gt; 0, o.OccupationName, @NotApplicable) AS EmploymentSubcategory&#xA;                                 ,CAST(CASE qd.SR22Filing&#xA;                                   WHEN @Yes&#xA;                                    THEN @YesStr&#xA;                                   WHEN @No&#xA;                                    THEN @NoStr&#xA;                                   ELSE @NotApplicable&#xA;                                   END AS VARCHAR(6)) AS RequiresSR22&#xA;                                 ,CASE &#xA;                                  WHEN qd.HomeOwner = @None&#xA;                                   THEN @NoStr&#xA;                                  WHEN LEN(ISNULL(qd.HomeOwner, '')) = 0&#xA;                                   THEN @NotApplicable&#xA;                                  ELSE qd.HomeOwner&#xA;                                  END AS HomeOwner&#xA;                                 ,CASE &#xA;                                  WHEN LEN(ISNULL(qd.PriorBILimit, '')) = 0&#xA;                                   THEN @NotApplicable&#xA;                                  ELSE qd.PriorBILimit&#xA;                                  END AS PriorBILimit&#xA;                                 ,CAST(CASE qd.IsInternationalDriver&#xA;                                   WHEN @Yes&#xA;                                    THEN @YesStr&#xA;                                   WHEN @No&#xA;                                    THEN @NoStr&#xA;                                   ELSE @NotApplicable&#xA;                                   END AS VARCHAR(6)) AS InternationallyLicensed&#xA;                                 ,CASE &#xA;                                  WHEN LEN(ISNULL(empst.EmploymentStatusName, '')) = 0&#xA;                                   THEN @NotApplicable&#xA;                                  ELSE empst.EmploymentStatusName&#xA;                                  END AS EmploymentStatus&#xA;                                 ,CASE &#xA;                                  WHEN LEN(ISNULL(licst.LicenseStatusTypeName, '')) = 0&#xA;                                   THEN @NotApplicable&#xA;                                  ELSE licst.LicenseStatusTypeName&#xA;                                  END AS LicenseStatus&#xA;                                 ,CASE &#xA;                                  WHEN LEN(ISNULL(licstate.StateCodeName, '')) = 0&#xA;                                   THEN @NotApplicable&#xA;                                  ELSE licstate.StateCodeName&#xA;                                  END AS LicenseState&#xA;                                 ,CAST(qd.Points AS VARCHAR(6)) AS SurchargePoints&#xA;                                 ,CAST(CASE qd.DiscountStudentAtSchool&#xA;                                   WHEN @Yes&#xA;                                    THEN @YesStr&#xA;                                   WHEN @No&#xA;                                    THEN @NoStr&#xA;                                   ELSE @NotApplicable&#xA;                                   END AS VARCHAR(6)) AS StudentAtSchool_Discount&#xA;                                 ,CAST(IIF(qd.CreditScore &gt;= 0, CAST(qd.CreditScore AS VARCHAR(6)), @NotApplicable) AS VARCHAR(6)) AS CreditScore&#xA;                                 ,ISNULL(scores.[Text], @NotApplicable) AS CreditScoreGroup&#xA;                                 ,CAST(ISNULL(scores.OrderNum, 0) AS VARCHAR(8)) AS CreditScoreGroupOrderBy&#xA;                                 ,CAST(CASE qd.DiscountAccidentPreventionCourse&#xA;                                   WHEN @Yes&#xA;                                    THEN @YesStr&#xA;                                   WHEN @No&#xA;                                    THEN @NoStr&#xA;                                   ELSE @NotApplicable&#xA;                                   END AS VARCHAR(6)) AS AccidentPreventionCourse_Discount&#xA;                                 ,CAST(CASE qd.SurchargeInexperiencedDriver&#xA;                                   WHEN @Yes&#xA;                                    THEN @YesStr&#xA;                                   WHEN @No&#xA;                                    THEN @NoStr&#xA;                                   ELSE @NotApplicable&#xA;                                   END AS VARCHAR(6)) AS InexperiencedDriver_Surcharge&#xA;                                 ,CAST(CASE qd.HasPersonalLicense&#xA;                                   WHEN @Yes&#xA;                                    THEN @YesStr&#xA;                                   WHEN @No&#xA;                                    THEN @NoStr&#xA;                                   ELSE @NotApplicable&#xA;                                   END AS VARCHAR(6)) AS HasPersonalLicense&#xA;                                 ,CAST(CASE qd.DistantStudent&#xA;                                   WHEN @Yes&#xA;                                    THEN @YesStr&#xA;                                   WHEN @No&#xA;                                    THEN @NoStr&#xA;                                   ELSE @NotApplicable&#xA;                                   END AS VARCHAR(6)) AS DistantStudent&#xA;                                 ,CAST(CASE qd.TeenSafe&#xA;                                   WHEN @Yes&#xA;                                    THEN @YesStr&#xA;                                   WHEN @No&#xA;                                    THEN @NoStr&#xA;                                   ELSE @NotApplicable&#xA;                                   END AS VARCHAR(6)) AS TeenSafe&#xA;                                 ,CAST(CASE qd.FirstResponder&#xA;                                   WHEN @Yes&#xA;                                    THEN @YesStr&#xA;                                   WHEN @No&#xA;                                    THEN @NoStr&#xA;                                   ELSE @NotApplicable&#xA;                                   END AS VARCHAR(6)) AS FirstResponder_Discount&#xA;                                 ,CAST(CASE qd.ExtendedNonOwned&#xA;                                   WHEN @Yes&#xA;                                    THEN @YesStr&#xA;                                   WHEN @No&#xA;                                    THEN @NoStr&#xA;                                   ELSE @NotApplicable&#xA;                                   END AS VARCHAR(6)) AS ExtendedNonOwned&#xA;                                 ,CAST(CASE qd.ExtendedNonOwnedLawEnforcement&#xA;                                   WHEN @Yes&#xA;                                    THEN @YesStr&#xA;                                   WHEN @No&#xA;                                    THEN @NoStr&#xA;                                   ELSE @NotApplicable&#xA;                                   END AS VARCHAR(6)) AS ExtendedNonOwnedLawEnforcement&#xA;                                 ,CAST(CASE qd.FR44Filling&#xA;                                   WHEN @Yes&#xA;                                    THEN @YesStr&#xA;                                   WHEN @No&#xA;                                    THEN @NoStr&#xA;                                   ELSE @NotApplicable&#xA;                                   END AS VARCHAR(6)) AS FR44Filling&#xA;                                 ,CAST(IIF(qd.CalculatedPriorDaysLapse &gt;= 0, CAST(qd.CalculatedPriorDaysLapse AS VARCHAR(6)), @NotApplicable) AS VARCHAR(6)) AS CalculatedPriorDaysLapse&#xA;                                 ,ISNULL(lapses.[Text], @NotApplicable) AS CalculatedPriorDaysLapseGroup&#xA;                                 ,CAST(ISNULL(lapses.OrderNum, 0) AS VARCHAR(8)) AS CalculatedPriorDaysLapseGroupOrderBy&#xA;                                 ,CAST(CASE qd.MvrObtainedWithoutLicense&#xA;                                   WHEN @Yes&#xA;                                    THEN @YesStr&#xA;                                   WHEN @No&#xA;                                    THEN @NoStr&#xA;                                   ELSE @NotApplicable&#xA;                                   END AS VARCHAR(6)) AS MvrObtainedWithoutLicense&#xA;                                 ,CAST(CASE qd.IsCoinsured&#xA;                                   WHEN @Yes&#xA;                                    THEN @YesStr&#xA;                                   WHEN @No&#xA;                                    THEN @NoStr&#xA;                                   ELSE @NotApplicable&#xA;                                   END AS VARCHAR(6)) AS IsCoinsured&#xA;                                 ,CAST(CASE qd.MaybeTeenSafe&#xA;                                   WHEN @Yes&#xA;                                    THEN @YesStr&#xA;                                   WHEN @No&#xA;                                    THEN @NoStr&#xA;                                   ELSE @NotApplicable&#xA;                                   END AS VARCHAR(6)) AS MaybeTeenSafe&#xA;                                 ,CAST(CASE qd.MaybeFirstResponder&#xA;                                   WHEN @Yes&#xA;                                    THEN @YesStr&#xA;                                   WHEN @No&#xA;                                    THEN @NoStr&#xA;                                   ELSE @NotApplicable&#xA;                                   END AS VARCHAR(6)) AS MaybeFirstResponder&#xA;                                 ,CAST(CASE qd.DiscountMinorChild&#xA;                                   WHEN @Yes&#xA;                                    THEN @YesStr&#xA;                                   WHEN @No&#xA;                                    THEN @NoStr&#xA;                                   ELSE @NotApplicable&#xA;                                   END AS VARCHAR(6)) AS MinorChild_Discount&#xA;                                 ,CAST(CASE qd.DiscountOccasionalOperator&#xA;                                   WHEN @Yes&#xA;                                    THEN @YesStr&#xA;                                   WHEN @No&#xA;                                    THEN @NoStr&#xA;                                   ELSE @NotApplicable&#xA;                                   END AS VARCHAR(6)) AS OccasionalOperator_Discount                                &#xA;                                FROM [Extract].[P1_QuoteDriver] qd&#xA;                                JOIN [Extract].P1_QuotePolicyTerm qpt ON qd.QuotePolicyTermId = qpt.QuotePolicyTermId&#xA;                                JOIN [Extract].[P1_RelationToApplicant] AS rel ON rel.RelationToApplicantID = qd.RelationToApplicantId&#xA;                                LEFT JOIN [Extract].[P1_Program] AS prog ON prog.ProgramID = qpt.ProgramID&#xA;                                LEFT JOIN [Extract].[P1_ProgramGroup] AS proggrp ON prog.ProgramGroupID = proggrp.ProgramGroupID&#xA;                                LEFT JOIN [Extract].[P1_OccupationCategory] AS oc ON oc.OccupationCategoryID = qd.EmploymentCategory&#xA;                                LEFT JOIN [Extract].[P1_Occupation] AS o ON o.OccupationID = qd.EmploymentSubcategory&#xA;                                LEFT JOIN [Extract].[P1_EmploymentStatus] AS empst ON empst.EmploymentStatusID = qd.EmploymentStatusId&#xA;                                LEFT JOIN [Extract].[P1_LicenseStatusType] AS licst ON licst.LicenseStatusTypeID = qd.MVRLicenseStatusTypeID&#xA;                                LEFT JOIN [Extract].[P1_StateCode] AS licstate ON licstate.StateCodeID = qd.LicenseIssueStateId&#xA;                                CROSS APPLY (&#xA;                                 SELECT DATEDIFF(yy, qd.DOB, Dates.LocalDatetime) AS Age&#xA;                                 FROM dbo.fGetUtcToLocalDatetimeConverter(proggrp.TimeZone, qpt.EffectiveDate) AS Dates&#xA;                                 ) AS Ages&#xA;                                OUTER APPLY (&#xA;                                 SELECT TOP 1 Art.[Text] AS AgeGroup&#xA;                                 FROM [Staging].[AgeGroupRangeText] art&#xA;                                 WHERE art.LowestValue &lt;= Ages.Age&#xA;                                 ORDER BY art.LowestValue DESC&#xA;                                 ) AS AgeGroups&#xA;                                OUTER APPLY (&#xA;                                 SELECT TOP 1 sc.[Text]&#xA;                                  ,sc.OrderNum&#xA;                                 FROM [Staging].[CreditScoreRangeText] sc&#xA;                                 WHERE sc.LowestValue &lt;= qd.CreditScore&#xA;                                 ORDER BY sc.LowestValue DESC&#xA;                                 ) AS scores&#xA;                                OUTER APPLY (&#xA;                                 SELECT TOP 1 dl.[Text]&#xA;                                  ,dl.OrderNum&#xA;                                 FROM [Staging].[DaysLapseRangeText] dl&#xA;                                 WHERE dl.LowestValue &lt;= qd.CalculatedPriorDaysLapse&#xA;                                 ORDER BY dl.LowestValue DESC&#xA;                                 ) AS lapses&#xA;                                )&#xA;                                MERGE [DataMart].[dimQuoteDriver] AS TGT&#xA;                                USING (SELECT * FROM QuoteDriversData)&#xA;                                AS QuoteDrivers&#xA;                                 ON QuoteDrivers.BK_DriverID = TGT.BK_DriverID&#xA;                                WHEN MATCHED THEN UPDATE&#xA;                                SET&#xA;                                 TGT.[BK_EndorsementID] = QuoteDrivers.[BK_EndorsementID],&#xA;                                 TGT.[BK_QuotePolicyTermId] = QuoteDrivers.[BK_QuotePolicyTermId],&#xA;                                 TGT.[BK_DriverID] = QuoteDrivers.[BK_DriverID],&#xA;                                 TGT.[BK_PolicyTermID] = QuoteDrivers.[BK_PolicyTermID],&#xA;                                 TGT.[LastName] = QuoteDrivers.[LastName],&#xA;                                 TGT.[MiddleName] = QuoteDrivers.[MiddleName],&#xA;                                 TGT.[FirstName] = QuoteDrivers.[FirstName],&#xA;                                 TGT.[DriverType] = QuoteDrivers.[DriverType],&#xA;                                 TGT.[Sex] = QuoteDrivers.[Sex],&#xA;                                 TGT.[MaritalStatus] = QuoteDrivers.[MaritalStatus],&#xA;                                 TGT.[RelationToInsured] = QuoteDrivers.[RelationToInsured],&#xA;                                 TGT.[Age] = QuoteDrivers.[Age],&#xA;                                 TGT.[AgeGroup] = QuoteDrivers.[AgeGroup],&#xA;                                 TGT.[YearsLicensedUS] = QuoteDrivers.[YearsLicensedUS],&#xA;                                 TGT.[YearsLicensedForeign] = QuoteDrivers.[YearsLicensedForeign],&#xA;                                 TGT.[GoodDriver] = QuoteDrivers.[GoodDriver],&#xA;                                 TGT.[GoodStudent] = QuoteDrivers.[GoodStudent],&#xA;                                 TGT.[MatureDriver] = QuoteDrivers.[MatureDriver],&#xA;                                 TGT.[AlcoholEducationalProgram] = QuoteDrivers.[AlcoholEducationalProgram],&#xA;                                 TGT.[EmploymentCategory] = QuoteDrivers.[EmploymentCategory],&#xA;                                 TGT.[EmploymentSubcategory] = QuoteDrivers.[EmploymentSubcategory],&#xA;                                 TGT.[RequiresSR22] = QuoteDrivers.[RequiresSR22],&#xA;                                 TGT.[HomeOwner] = QuoteDrivers.[HomeOwner],&#xA;                                 TGT.[PriorBILimit] = QuoteDrivers.[PriorBILimit],&#xA;                                 TGT.[InternationallyLicensed] = QuoteDrivers.[InternationallyLicensed],&#xA;                                 TGT.[EmploymentStatus] = QuoteDrivers.[EmploymentStatus],&#xA;                                 TGT.[LicenseStatus] = QuoteDrivers.[LicenseStatus],&#xA;                                 TGT.[LicenseState] = QuoteDrivers.[LicenseState],&#xA;                                 TGT.[SurchargePoints] = QuoteDrivers.[SurchargePoints],&#xA;                                 TGT.[StudentAtSchool_Discount] = QuoteDrivers.[StudentAtSchool_Discount],&#xA;                                 TGT.[CreditScore] = QuoteDrivers.[CreditScore],&#xA;                                 TGT.[CreditScoreGroup] = QuoteDrivers.[CreditScoreGroup],&#xA;                                 TGT.[CreditScoreGroupOrderBy] = QuoteDrivers.[CreditScoreGroupOrderBy],&#xA;                                 TGT.[AccidentPreventionCourse_Discount] = QuoteDrivers.[AccidentPreventionCourse_Discount],&#xA;                                 TGT.[InexperiencedDriver_Surcharge] = QuoteDrivers.[InexperiencedDriver_Surcharge],&#xA;                                 TGT.[HasPersonalLicense] = QuoteDrivers.[HasPersonalLicense],&#xA;                                 TGT.[DistantStudent] = QuoteDrivers.[DistantStudent],&#xA;                                 TGT.[TeenSafe] = QuoteDrivers.[TeenSafe],&#xA;                                 TGT.[FirstResponder_Discount] = QuoteDrivers.[FirstResponder_Discount],&#xA;                                 TGT.[ExtendedNonOwned] = QuoteDrivers.[ExtendedNonOwned],&#xA;                                 TGT.[ExtendedNonOwnedLawEnforcement] = QuoteDrivers.[ExtendedNonOwnedLawEnforcement],&#xA;                                 TGT.[FR44Filling] = QuoteDrivers.[FR44Filling],&#xA;                                 TGT.[CalculatedPriorDaysLapse] = QuoteDrivers.[CalculatedPriorDaysLapse],&#xA;                                 TGT.[CalculatedPriorDaysLapseGroup] = QuoteDrivers.[CalculatedPriorDaysLapseGroup],&#xA;                                 TGT.[CalculatedPriorDaysLapseGroupOrderBy] = QuoteDrivers.[CalculatedPriorDaysLapseGroupOrderBy],&#xA;                                 TGT.[MvrObtainedWithoutLicense] = QuoteDrivers.[MvrObtainedWithoutLicense],&#xA;                                 TGT.[IsCoinsured] = QuoteDrivers.[IsCoinsured],&#xA;                                 TGT.[MaybeTeenSafe] = QuoteDrivers.[MaybeTeenSafe],&#xA;                                 TGT.[MaybeFirstResponder] = QuoteDrivers.[MaybeFirstResponder],&#xA;                                 TGT.[MinorChild_Discount] = QuoteDrivers.[MinorChild_Discount],&#xA;                                 TGT.[OccasionalOperator_Discount] = QuoteDrivers.[OccasionalOperator_Discount]&#xA;                                WHEN NOT MATCHED THEN&#xA;                                INSERT&#xA;                                (&#xA;                                 [BK_EndorsementID],&#xA;                                 [BK_QuotePolicyTermId],&#xA;                                 [BK_DriverID],&#xA;                                 [BK_PolicyTermID],&#xA;                                 [LastName],&#xA;                                 [MiddleName],&#xA;                                 [FirstName],&#xA;                                 [DriverType],&#xA;                                 [Sex],&#xA;                                 [MaritalStatus],&#xA;                                 [RelationToInsured],&#xA;                                 [Age],&#xA;                                 [AgeGroup],&#xA;                                 [YearsLicensedUS],&#xA;                                 [YearsLicensedForeign],&#xA;                                 [GoodDriver],&#xA;                                 [GoodStudent],&#xA;                                 [MatureDriver],&#xA;                                 [AlcoholEducationalProgram],&#xA;                                 [EmploymentCategory],&#xA;                                 [EmploymentSubcategory],&#xA;                                 [RequiresSR22],&#xA;                                 [HomeOwner],&#xA;                                 [PriorBILimit],&#xA;                                 [InternationallyLicensed],&#xA;                                 [EmploymentStatus],&#xA;                                 [LicenseStatus],&#xA;                                 [LicenseState],&#xA;                                 [SurchargePoints],&#xA;                                 [StudentAtSchool_Discount],&#xA;                                 [CreditScore],&#xA;                                 [CreditScoreGroup],&#xA;                                 [CreditScoreGroupOrderBy],&#xA;                                 [AccidentPreventionCourse_Discount],&#xA;                                 [InexperiencedDriver_Surcharge],&#xA;                                 [HasPersonalLicense],&#xA;                                 [DistantStudent],&#xA;                                 [TeenSafe],&#xA;                                 [FirstResponder_Discount],&#xA;                                 [ExtendedNonOwned],&#xA;                                 [ExtendedNonOwnedLawEnforcement],&#xA;                                 [FR44Filling],&#xA;                                 [CalculatedPriorDaysLapse],&#xA;                                 [CalculatedPriorDaysLapseGroup],&#xA;                                 [CalculatedPriorDaysLapseGroupOrderBy],&#xA;                                 [MvrObtainedWithoutLicense],&#xA;                                 [IsCoinsured],&#xA;                                 [MaybeTeenSafe],&#xA;                                 [MaybeFirstResponder],&#xA;                                 [MinorChild_Discount],&#xA;                                 [OccasionalOperator_Discount]&#xA;                                )&#xA;                                VALUES&#xA;                                (&#xA;                                 [BK_EndorsementID],&#xA;                                 [BK_QuotePolicyTermId],&#xA;                                 [BK_DriverID],&#xA;                                 [BK_PolicyTermID],&#xA;                                 [LastName],&#xA;                                 [MiddleName],&#xA;                                 [FirstName],&#xA;                                 [DriverType],&#xA;                                 [Sex],&#xA;                                 [MaritalStatus],&#xA;                                 [RelationToInsured],&#xA;                                 [Age],&#xA;                                 [AgeGroup],&#xA;                                 [YearsLicensedUS],&#xA;                                 [YearsLicensedForeign],&#xA;                                 [GoodDriver],&#xA;                                 [GoodStudent],&#xA;                                 [MatureDriver],&#xA;                                 [AlcoholEducationalProgram],&#xA;                                 [EmploymentCategory],&#xA;                                 [EmploymentSubcategory],&#xA;                                 [RequiresSR22],&#xA;                                 [HomeOwner],&#xA;                                 [PriorBILimit],&#xA;                                 [InternationallyLicensed],&#xA;                                 [EmploymentStatus],&#xA;                                 [LicenseStatus],&#xA;                                 [LicenseState],&#xA;                                 [SurchargePoints],&#xA;                                 [StudentAtSchool_Discount],&#xA;                                 [CreditScore],&#xA;                                 [CreditScoreGroup],&#xA;                                 [CreditScoreGroupOrderBy],&#xA;                                 [AccidentPreventionCourse_Discount],&#xA;                                 [InexperiencedDriver_Surcharge],&#xA;                                 [HasPersonalLicense],&#xA;                                 [DistantStudent],&#xA;                                 [TeenSafe],&#xA;                                 [FirstResponder_Discount],&#xA;                                 [ExtendedNonOwned],&#xA;                                 [ExtendedNonOwnedLawEnforcement],&#xA;                                 [FR44Filling],&#xA;                                 [CalculatedPriorDaysLapse],&#xA;                                 [CalculatedPriorDaysLapseGroup],&#xA;                                 [CalculatedPriorDaysLapseGroupOrderBy],&#xA;                                 [MvrObtainedWithoutLicense],&#xA;                                 [IsCoinsured],&#xA;                                 [MaybeTeenSafe],&#xA;                                 [MaybeFirstResponder],&#xA;                                 [MinorChild_Discount],&#xA;                                 [OccasionalOperator_Discount]&#xA;                                );&#xA;                              &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{EDDE0B55-C5B1-4338-A5CE-1FE990A7EAC2}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create quote drivers assignment" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create quote drivers assignment" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                                WITH QuoteCoverageDriversData AS&#xA;                                (&#xA;                                 SELECT DISTINCT qvc.QuoteVehicleCoverageId AS QuoteVehicleCoverageId&#xA;                                  ,qd.QuoteDriverId AS BK_DriverId&#xA;                                  ,dqd.SK_DriverID                                 &#xA;                                 FROM [Extract].P1_QuoteVehicleCoverage qvc&#xA;                                 JOIN [Extract].P1_QuoteVehicle qv ON qvc.QuoteVehicleId = qv.QuoteVehicleId&#xA;                                 JOIN [Extract].P1_QuoteDriverAssignment qda ON qda.QuoteVehicleId = qv.QuoteVehicleId&#xA;                                 JOIN [Extract].[P1_QuotePolicyTerm] qpt ON qv.QuotePolicyTermId = qpt.QuotePolicyTermId&#xA;                                 JOIN [Extract].[P1_QuoteDriver] qd ON qd.QuotePolicyTermId = qpt.QuotePolicyTermId&#xA;                                  AND qd.[Guid] = qda.DriverGuid&#xA;                                 JOIN [DataMart].[dimQuoteDriver] dqd ON dqd.BK_DriverID = qd.QuoteDriverId &#xA;                                )&#xA;                                INSERT INTO [Staging].[QuoteVehicleCoverage_DriverID] (QuoteVehicleCoverageId, BK_DriverId, SK_DriverID)&#xA;                                SELECT QuoteVehicleCoverageId, BK_DriverId, SK_DriverID&#xA;                                FROM QuoteCoverageDriversData  qcdd&#xA;                                WHERE NOT EXISTS (&#xA;                                 SELECT TOP 1 1 FROM [Staging].[QuoteVehicleCoverage_DriverID] qvcd&#xA;                                  WHERE qvcd.QuoteVehicleCoverageId = qcdd.QuoteVehicleCoverageId&#xA;                                   AND qvcd.BK_DriverId = qcdd.BK_DriverId&#xA;                                   AND qvcd.SK_DriverID = qcdd.SK_DriverID&#xA;                                );&#xA;                              &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{F548A48D-5E54-4313-A11E-F473F6D4E043}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create dimClaim" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create dimClaim" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                      &#xA;       CREATE TABLE [DataMart].[dimClaim](&#xA;        [SK_ClaimID] [int] IDENTITY(1,1) NOT NULL,&#xA;        [BK_ClaimID] [varchar](20) NULL,&#xA;        [BK_ClaimNumber] [varchar](20) NULL,&#xA;        [BK_PolicyTermID] [int],&#xA;        [BK_PolicyNumber] varchar(20),&#xA;        [ClaimStatus] [varchar](15) NULL,&#xA;        [ClaimClosureType] [varchar](50) NULL,&#xA;                [LossDate] [datetime2],&#xA;                [ReportedDate] [datetime2],&#xA;                [ClosedDate] [datetime2],&#xA;                [IsPaid] [varchar](3),&#xA;        CONSTRAINT [PK_SK_ClaimIC] PRIMARY KEY CLUSTERED &#xA;       (&#xA;        [SK_ClaimID] ASC&#xA;       ) WITH (DATA_COMPRESSION = PAGE)&#xA;       )&#xA;        &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{746946DB-8A18-446F-82DC-7B20A522B47A}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create dimFeature" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create dimFeature" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;       CREATE TABLE [DataMart].[dimFeature](&#xA;        [SK_FeatureID] [int] IDENTITY(1,1) NOT NULL,&#xA;                [SK_CoverageID] int NOT NULL,&#xA;                [SK_ClaimID] int NOT NULL,&#xA;         [BK_FeatureID] [varchar](20) NULL,&#xA;        [BK_FeatureNumber] [varchar](50) NULL,&#xA;        [BK_ClaimID] [varchar](20) NULL,&#xA;        [BK_ClaimNumber] [varchar](50) NULL,&#xA;        [FeatureType] [varchar](50) NULL,&#xA;        [FaultType] [varchar](50) NULL,&#xA;        [FeatureStatus] [varchar](15) NULL,&#xA;        [FeatureClosureType] [varchar](50) NULL,&#xA;                [VIN] varchar(17),&#xA;                [OpenDate] datetime2,&#xA;                [IsPaid] varchar(3),&#xA;        CONSTRAINT [PK_SK_FeatureID] PRIMARY KEY CLUSTERED &#xA;       (&#xA;        [SK_FeatureID] ASC&#xA;       ) WITH (DATA_COMPRESSION = PAGE)&#xA;       )        &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{FDA02A22-CD1A-4D08-9DED-CDC41348B3BE}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create dimEndorsement" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create dimEndorsement" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;       -- Prepare dimEndorsement&#xA;              INSERT INTO [Staging].[EndorsementID]&#xA;              SELECT EndorsementID AS BK_EndorsementID&#xA;              FROM [Extract].[P1_Endorsement]&#xA;              WHERE EndorsementID NOT IN (&#xA;                SELECT BK_EndorsementID&#xA;                FROM [Staging].[EndorsementID]&#xA;                );       &#xA;&#xA;              WITH EndorsementData&#xA;              AS&#xA;              (&#xA;              SELECT ISNULL(SK_EndorsementID, -1) AS SK_EndorsementID,&#xA;                BK_EndorsementID,&#xA;                endot.EndorsementType,&#xA;                endot.EndorsementTypeID,&#xA;                IsFuture,&#xA;                IsVoid&#xA;              FROM [Extract].[P1_Endorsement] AS endo&#xA;                JOIN [Staging].[EndorsementID] as sendoid ON sendoid.BK_EndorsementID = endo.EndorsementID&#xA;                JOIN [Extract].[P1_EndorsementType] AS endot on endo.EndorsementTypeID = endot.EndorsementTypeID&#xA;              )&#xA;              MERGE [DataMart].[dimEndorsement] AS TGT&#xA;              USING  (SELECT * FROM EndorsementData)&#xA;              AS Endorsements&#xA;               ON Endorsements.BK_EndorsementID = TGT.BK_EndorsementID&#xA;              WHEN MATCHED THEN UPDATE&#xA;               SET TGT.EndorsementType = Endorsements.EndorsementType,&#xA;                TGT.EndorsementTypeID = Endorsements.EndorsementTypeID,&#xA;                TGT.IsFuture = Endorsements.IsFuture,&#xA;                TGT.IsVoid = Endorsements.IsVoid&#xA;              WHEN NOT MATCHED THEN&#xA;              INSERT&#xA;               (SK_EndorsementID,&#xA;               BK_EndorsementID,&#xA;               EndorsementType,&#xA;               EndorsementTypeID,&#xA;               IsFuture,&#xA;               IsVoid)&#xA;              VALUES&#xA;               (SK_EndorsementID,&#xA;               BK_EndorsementID,&#xA;               EndorsementType,&#xA;               EndorsementTypeID,&#xA;               IsFuture,&#xA;               IsVoid);              &#xA;       &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{398A4667-730B-4F1F-AFBE-223C844DB6C8}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create dimPaymentTransaction" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create dimPaymentTransaction" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                                INSERT INTO [DataMart].[dimPaymentTransaction](BK_PaymentTransactionID, PaymentVoided, PaymentType, BK_PolicyTermID)&#xA;                                SELECT       &#xA;                                  pt.PaymentTransactionID AS BK_PaymentTransactionID&#xA;                                  ,CASE WHEN pay.VoidedPaymentID = -1 THEN 'No' &#xA;                                   ELSE 'Yes'&#xA;                                   END AS PaymentVoided&#xA;                                  ,ptype.EnumStringValue AS PaymentType        &#xA;                                  ,pt.PolicyTermID&#xA;                                FROM  [Extract].[P1_PaymentTransaction] AS pt&#xA;                                  LEFT JOIN [Extract].[P1_Payment] AS pay ON pt.PaymentID = pay.PaymentID&#xA;                                   LEFT JOIN [Extract].[P1_PaymentType] AS ptype on ptype.PaymentTypeID = pay.PaymentType&#xA;                                WHERE pt.PaymentTransactionID NOT IN (SELECT BK_PaymentTransactionID FROM [DataMart].[dimPaymentTransaction]) &#xA;                       &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{2E50CA0B-06BA-4639-A46A-0EC2C1909199}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create dimCarrier" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create dimCarrier" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                                MERGE [DataMart].[dimCarrier] AS TGT&#xA;                                USING (&#xA;                                 SELECT&#xA;                                 carrier.CarrierID AS BK_CarrierID,        &#xA;                                 Carrier.[Name]  &#xA;                                 FROM (SELECT DISTINCT CarrierID FROM [Extract].[P1_Program]) AS prog&#xA;                                 LEFT JOIN [Extract].[P1_Carrier] AS carrier ON carrier.CarrierID = prog.CarrierID&#xA;                                ) as carriers&#xA;                                 ON carriers.BK_CarrierID = TGT.BK_CarrierID&#xA;                                WHEN MATCHED THEN UPDATE&#xA;                                SET                                 &#xA;                                 TGT.[Name] = carriers.[Name]&#xA;                                WHEN NOT MATCHED THEN&#xA;                                INSERT&#xA;                                 (&#xA;                                 [BK_CarrierID],&#xA;                                 [Name])&#xA;                                VALUES&#xA;                                 (&#xA;                                 [BK_CarrierID],&#xA;                                 [Name]);&#xA;                     &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{0184DB41-AC2F-4E22-84B9-319D0E336E7F}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create dimSecurityUser" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create dimSecurityUser" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                                  -- Create security use dimension&#xA;                                  IF OBJECT_ID('tempdb..#SecurityUsers') IS NOT NULL&#xA;                                   DROP TABLE #SecurityUsers&#xA;&#xA;                                  SELECT  IDENTITY( INT, 1, 1 ) AS SK_UserID&#xA;                                    ,u.UserID AS BK_UserID&#xA;                                    ,pu.FirstName&#xA;                                    ,pu.LastName&#xA;                                  INTO    #SecurityUsers&#xA;                                  FROM    ( SELECT    UserID&#xA;                                     FROM      [Extract].[P1_SecurityUserCarrier]&#xA;                                     UNION&#xA;                                     SELECT    UserID&#xA;                                     FROM      [Extract].[P1_SecurityUserProducer]&#xA;                                    ) AS u&#xA;                                  JOIN    [Extract].P1_User AS pu&#xA;                                    ON pu.UserID = u.UserID&#xA;                                  ORDER BY u.UserID;&#xA;&#xA;                                  MERGE [DataMart].[dimSecurityUser] AS TGT&#xA;                                  USING &#xA;                                  (&#xA;                                   SELECT * FROM #SecurityUsers&#xA;                                  ) as users&#xA;                                   ON users.BK_UserID = TGT.BK_UserID&#xA;                                  WHEN MATCHED THEN UPDATE&#xA;                                  SET&#xA;                                   TGT.[FirstName] = users.[FirstName],&#xA;                                   TGT.[LastName] = users.[LastName]&#xA;                                  WHEN NOT MATCHED THEN&#xA;                                  INSERT&#xA;                                  (&#xA;                                   [BK_UserID],&#xA;                                   [FirstName],&#xA;                                   [LastName]&#xA;                                  )&#xA;                                  VALUES&#xA;                                  (&#xA;                                   [BK_UserID],&#xA;                                   [FirstName],&#xA;                                   [LastName]&#xA;                                  );&#xA;&#xA;                                  DROP TABLE #SecurityUsers&#xA;                   &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{00DDA882-D4CF-4F9F-A72E-91D05C0646C6}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create dimProgramGroup" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create dimProgramGroup" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                                  MERGE [DataMart].[dimProgramGroup] AS TGT&#xA;                                  USING (&#xA;                                   SELECT  &#xA;                                     pg.ProgramGroupID AS BK_ProgramGroupID&#xA;                                     ,pg.ProgramGroupName AS ProgramGroupName               &#xA;                                   FROM    Extract.P1_ProgramGroup AS pg&#xA;                                  )&#xA;                                  as programGroups&#xA;                                   ON programGroups.BK_ProgramGroupID = TGT.BK_ProgramGroupID&#xA;                                  WHEN MATCHED THEN UPDATE&#xA;                                  SET &#xA;                                   TGT.ProgramGroupName = programGroups.ProgramGroupName&#xA;                                  WHEN NOT MATCHED THEN&#xA;                                  INSERT&#xA;                                  (&#xA;                                   BK_ProgramGroupID,&#xA;                                   ProgramGroupName&#xA;                                  )&#xA;                                  VALUES&#xA;                                  (&#xA;                                   BK_ProgramGroupID,&#xA;                                   ProgramGroupName&#xA;                                  );&#xA;               &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{98B17A19-0BF6-432C-8359-322B1AF3B6AF}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create dimProgram" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create dimProgram" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                              MERGE [DataMart].[dimProgram] AS TGT&#xA;                              USING (SELECT &#xA;                                p.ProgramID AS BK_ProgramID&#xA;                                ,pg.ProgramGroupID AS BK_ProgramGroupID&#xA;                                ,pg.ProgramGroupName AS ProgramName&#xA;                                ,p.ProgramName AS ProgramVersion&#xA;                                ,st.StateCodeName AS ProgramState&#xA;                               FROM    Extract.P1_Program AS p&#xA;                               LEFT JOIN Extract.P1_ProgramGroup AS pg&#xA;                                 ON p.ProgramGroupID = pg.ProgramGroupID&#xA;                               LEFT JOIN [Extract].[P1_StateCode] AS st&#xA;                                 ON pg.StateCodeID = st.StateCodeID&#xA;                              ) AS programs&#xA;                               ON programs.BK_ProgramID = TGT.BK_ProgramID&#xA;                              WHEN MATCHED THEN UPDATE&#xA;                              SET&#xA;                               TGT.BK_ProgramGroupID = programs.BK_ProgramGroupID,&#xA;                               TGT.ProgramName = programs.ProgramName,&#xA;                               TGT.ProgramVersion = programs.ProgramVersion,&#xA;                               TGT.ProgramState = programs.ProgramState&#xA;                              WHEN NOT MATCHED THEN&#xA;                              INSERT&#xA;                               (BK_ProgramID,&#xA;                               BK_ProgramGroupID,&#xA;                               ProgramName,&#xA;                               ProgramVersion,&#xA;                               ProgramState)&#xA;                              VALUES&#xA;                               (BK_ProgramID,&#xA;                               BK_ProgramGroupID,&#xA;                               ProgramName,&#xA;                               ProgramVersion,&#xA;                               ProgramState);&#xA;                     &#xA;&#xA;               -- Create supporting PolicyProgram translation table&#xA;                              MERGE [Staging].[PolicyProgram] AS TGT&#xA;                              USING (&#xA;                               SELECT  dpol.SK_PolicyID&#xA;                                 ,dpg.SK_ProgramGroupID&#xA;                                 ,dprog.SK_ProgramID&#xA;                               FROM    [DataMart].[dimPolicy] AS dpol&#xA;                               LEFT JOIN [DataMart].[dimProgram] AS dprog&#xA;                                 ON dpol.BK_ProgramID = dprog.BK_ProgramID&#xA;                               LEFT JOIN DataMart.dimProgramGroup AS dpg&#xA;                                 ON dpg.BK_ProgramGroupID = dprog.BK_ProgramGroupID&#xA;                              ) as PolicyPrograms&#xA;                               ON TGT.SK_PolicyID = PolicyPrograms.SK_PolicyID&#xA;                              WHEN MATCHED THEN UPDATE&#xA;                              SET&#xA;                               TGT.SK_ProgramGroupID = PolicyPrograms.SK_ProgramGroupID,&#xA;                               TGT.SK_ProgramID = PolicyPrograms.SK_ProgramID&#xA;                              WHEN NOT MATCHED THEN&#xA;                              INSERT&#xA;                               (SK_PolicyID,&#xA;                               SK_ProgramGroupID,&#xA;                               SK_ProgramID)&#xA;                              VALUES&#xA;                               (SK_PolicyID,&#xA;                               SK_ProgramGroupID,&#xA;                               SK_ProgramID);&#xA;               &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{4CB6FE68-58EF-4484-A6E0-4514E09615A6}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create Staging Quote A1 Advertising" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create Staging Quote A1 Advertising" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                              IF object_id('[Extract].[A1_Lead]') IS NOT NULL &#xA;                              BEGIN&#xA;                                SELECT cast(maxl.QuoteID as int) as BK_QuoteID,&#xA;                                    CAST(CASE WHEN LEN(ISNULL(mlc.Name, '')) = 0 THEN 'N/A' ELSE dbo.Proper(mlc.Name) END AS VARCHAR(50)) AS CampaignName,&#xA;                                    CAST(CASE WHEN LEN(ISNULL(mlct.Description, '')) = 0 THEN 'N/A' ELSE dbo.Proper(mlct.Description) END AS VARCHAR(200)) AS CampaignType,&#xA;                                    CAST(CASE WHEN LEN(ISNULL(ls.LeadSourceName, '')) = 0 THEN 'N/A' ELSE dbo.Proper(ls.LeadSourceName) END AS VARCHAR(200)) AS LeadSource,&#xA;                                    CAST(CASE WHEN LEN(ISNULL(lst.Name, '')) = 0 THEN 'N/A' ELSE dbo.Proper(lst.Name) END AS VARCHAR(100)) AS LeadSourceType&#xA;                                 INTO [Staging].[A1_Quote_Advertising]&#xA;                                 FROM (SELECT ExternalLeadID AS QuoteID, MAX(LeadID) AS MaxLeadID FROM Extract.A1_Lead WHERE ExternalLeadID &lt;&gt; '' GROUP BY ExternalLeadID) AS maxl&#xA;                                   LEFT JOIN Extract.A1_Lead AS l on l.LeadID = maxl.MaxLeadID&#xA;                                   LEFT JOIN Extract.A1_MasterLeadCampaign as mlc ON l.MasterLeadCampaignID = mlc.MasterLeadCampaignID&#xA;                                   LEFT JOIN Extract.A1_MasterLeadCampaignType as mlct ON mlc.MasterLeadCampaignTypeID = mlct.MasterLeadCampaignTypeID&#xA;                                   LEFT JOIN Extract.A1_LeadSource as ls ON l.LeadSourceID = ls.LeadSourceID&#xA;                                   LEFT JOIN Extract.A1_LeadSourceType as lst ON ls.LeadSourceTypeID = lst.LeadSourceTypeID&#xA;                                 WHERE l.ExternalLeadID &lt;&gt; ''&#xA;                              END&#xA;                    &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{BD9C4495-664D-4644-B650-97D5836FBA50}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create placeholder Staging Quote A1 Advertising if needed" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create placeholder Staging Quote A1 Advertising if needed" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                              IF object_id('[Staging].[A1_Quote_Advertising]') IS NULL &#xA;                              BEGIN&#xA;                                  CREATE TABLE [Staging].[A1_Quote_Advertising](&#xA;                                   [BK_QuoteID] [int] NULL,&#xA;                                   [CampaignName] [varchar](50) NULL,&#xA;                                   [CampaignType] [varchar](200) NULL,&#xA;                                   [LeadSource] [varchar](200) NULL,&#xA;                                   [LeadSourceType] [varchar](100) NULL&#xA;                                  )                              &#xA;                               END&#xA;                    &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{F677F3F0-E197-4CC5-A86C-F5A7BE3614CF}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create dimQuote" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create dimQuote" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                                              &#xA;                                  ;WITH QuotesData&#xA;                                  AS&#xA;                                  (&#xA;                                      SELECT  q.QuoteID AS BK_QuoteID&#xA;                                              ,q.Origin AS QuoteOriginID&#xA;                                              ,ISNULL(qo.QuoteOriginName, 'Uds') AS QuoteOrigin&#xA;                                              ,ISNULL(qv.QuoteValidationStatusName, 'Uds') AS QuoteValidationStatus&#xA;                                              ,CAST(CONVERT(VARCHAR(10), q.Created, 112) AS INT) AS SK_DateID&#xA;                                              ,ISNULL(dp.SK_ProducerID, -1) AS SK_ProducerID&#xA;                                              ,ISNULL(dprg.SK_ProgramID, -1) AS SK_ProgramID&#xA;                                              ,ISNULL(carr.SK_CarrierID, -1) AS SK_CarrierID&#xA;                                              ,CASE WHEN q.Premium = 0&#xA;                                                      AND ISNULL(ept_premium.Premium, 0) = 0 THEN 'No'&#xA;                                                  ELSE 'Yes'&#xA;                                              END AS Completed&#xA;                                              ,CASE WHEN q.PolicyTermID = -1&#xA;                                                      OR (&#xA;                                                          q.Premium = 0&#xA;                                                          AND ISNULL(ept_premium.Premium, 0) = 0&#xA;                                                          ) THEN 'No'&#xA;                                                  ELSE 'Yes'&#xA;                                              END AS PolicyCreated&#xA;                                              ,CASE WHEN q.Premium = 0 THEN ISNULL(ept_premium.Premium, 0)&#xA;                                                  ELSE q.Premium&#xA;                                              END AS Premium&#xA;                                              ,CASE WHEN IsRenewal = 'true' THEN 'Yes'&#xA;                                                  ELSE 'No'&#xA;                                              END AS IsRenewal&#xA;                                              ,CASE WHEN IsFromFSC = 'true' THEN 'Yes'&#xA;                                                  ELSE 'No'&#xA;                                              END AS IsFromFSC&#xA;                                              ,CASE WHEN ISNUMERIC(TermLength) = 1&#xA;                                                      AND TermLength &gt; 0 THEN CAST(TermLength AS VARCHAR(3))&#xA;                                                  ELSE 'N/A'&#xA;                                              END AS TermLemgth&#xA;                                              ,CAST((CASE WHEN ISNUMERIC(LEFT(GarageZip, 5)) = 1&#xA;                                                          THEN LEFT(GarageZip, 5)&#xA;                                                          ELSE 'N/A'&#xA;                                                  END) AS VARCHAR(5)) AS GarageZip&#xA;                                              ,CAST((CASE WHEN LTRIM(RTRIM(GarageCounty)) &lt;&gt; ''&#xA;                                                          THEN LTRIM(RTRIM(dbo.Proper(GarageCounty)))&#xA;                                                          ELSE 'N/A'&#xA;                                                  END) AS VARCHAR(50)) AS GarageCounty&#xA;                                              ,CAST((CASE WHEN ISNUMERIC(LEFT(MailZip, 5)) = 1 THEN LEFT(MailZip, 5)&#xA;                                                          ELSE 'N/A'&#xA;                                                  END) AS VARCHAR(5)) AS MailZip&#xA;                                              ,CAST((CASE WHEN LTRIM(RTRIM(MailCounty)) &lt;&gt; ''&#xA;                                                          THEN LTRIM(RTRIM(dbo.Proper(MailCounty)))&#xA;                                                          ELSE 'N/A'&#xA;                                                  END) AS VARCHAR(50)) AS MailCounty&#xA;                                              ,ISNULL(QuotedDriverCount, 0) AS DriverCount&#xA;                                              ,ISNULL(QuotedVehicleCount, 0) AS VehicleCount&#xA;                                              ,CASE WHEN ISNULL(quote_uwtier.EffectiveUnderwritingTier, '') = ''&#xA;                                                  THEN 'N/A'&#xA;                                                  ELSE quote_uwtier.EffectiveUnderwritingTier&#xA;                                              END AS EffectiveUnderwritingTier&#xA;                                              ,&#xA;                                      -- Comp Zip Territory&#xA;                                              CASE WHEN ISNULL(quote_compzipterr.CompZipTerritory, '') = ''&#xA;                                                  THEN 'N/A'&#xA;                                                  ELSE quote_compzipterr.CompZipTerritory&#xA;                                              END AS CompZipTerritory&#xA;                                              ,&#xA;                                      -- Zip Territory&#xA;                                              CASE WHEN ISNULL(quote_zipterr.ZipTerritory, '') = '' THEN 'N/A'&#xA;                                                  ELSE quote_zipterr.ZipTerritory&#xA;                                              END AS ZipTerritory&#xA;                                              ,CASE WHEN ISNULL(stg_qadv.CampaignName, '') = '' THEN 'N/A'&#xA;                                                  ELSE stg_qadv.CampaignName&#xA;                                              END AS CampaignName&#xA;                                              ,CASE WHEN ISNULL(stg_qadv.CampaignType, '') = '' THEN 'N/A'&#xA;                                                  ELSE stg_qadv.CampaignType&#xA;                                              END AS CampaignType&#xA;                                              ,CASE WHEN ISNULL(stg_qadv.LeadSource, '') = '' THEN 'N/A'&#xA;                                                  ELSE stg_qadv.LeadSource&#xA;                                              END AS LeadSource&#xA;                                              ,CASE WHEN ISNULL(stg_qadv.LeadSourceType, '') = '' THEN 'N/A'&#xA;                                                  ELSE stg_qadv.LeadSourceType&#xA;                                              END AS LeadSourceType&#xA;                                              ,q.Origin&#xA;&#xA;                                      FROM    Extract.P1_Quote AS q&#xA;                                      LEFT JOIN Extract.P1_QuoteOrigin AS qo&#xA;                                              ON qo.QuoteOriginID = q.Origin&#xA;                                      LEFT JOIN Extract.P1_QuoteValidationStatus AS qv&#xA;                                              ON qv.QuoteValidationStatusID = q.HardStopValidationStatus&#xA;                                      OUTER APPLY (SELECT TOP 1&#xA;                                                          pqp.ProducerID&#xA;                                                  FROM   [Extract].P1_QuoteProducer AS pqp&#xA;                                                  WHERE  pqp.QuoteID = q.QuoteID&#xA;                                                  ORDER BY pqp.Created DESC&#xA;                                                  ) AS Producer&#xA;                                      LEFT JOIN [DataMart].[dimProducer] AS dp&#xA;                                              ON dp.BK_ProducerID = Producer.ProducerID&#xA;                                      LEFT JOIN [DataMart].[dimProgram] AS dprg&#xA;                                              ON q.ProgramID = dprg.BK_ProgramID&#xA;                                      LEFT JOIN [Extract].[P1_Program] AS prg&#xA;                                              ON q.ProgramID = prg.ProgramID&#xA;                                      LEFT JOIN [DataMart].[dimCarrier] AS carr&#xA;                                              ON prg.CarrierID = carr.BK_CarrierID&#xA;                                      LEFT JOIN (SELECT   m.PolicyTermID&#xA;                                                          ,ept.Premium&#xA;                                                  FROM     (SELECT PolicyTermID&#xA;                                                                  ,MIN(EndorsementPolicyTermID) AS MinEndorsementPolicyTermID&#xA;                                                          FROM   Extract.P1_EndorsementPolicyTerm&#xA;                                                          GROUP BY PolicyTermID&#xA;                                                          ) AS m&#xA;                                                  LEFT JOIN Extract.P1_EndorsementPolicyTerm AS ept&#xA;                                                          ON m.MinEndorsementPolicyTermID = ept.EndorsementPolicyTermID&#xA;                                              ) AS ept_premium&#xA;                                              ON ept_premium.PolicyTermID = q.PolicyTermID&#xA;                                      LEFT JOIN (SELECT   QuoteID&#xA;                                                          ,MAX(Value) AS EffectiveUnderwritingTier&#xA;                                                  FROM     Extract.P1_QuoteCustomProperty AS e_qcp&#xA;                                                  WHERE    Name = 'EffectiveUwTier'&#xA;                                                  GROUP BY e_qcp.QuoteID&#xA;                                              ) AS quote_uwtier&#xA;                                              ON quote_uwtier.QuoteID = q.QuoteID&#xA;                                      LEFT JOIN (SELECT   QuoteID&#xA;                                                          ,MAX(Value) AS CompZipTerritory&#xA;                                                  FROM     Extract.P1_QuoteCustomProperty&#xA;                                                  WHERE    Name = 'CompZipTerritory'&#xA;                                                  GROUP BY QuoteID&#xA;                                              ) AS quote_compzipterr&#xA;                                              ON quote_compzipterr.QuoteID = q.QuoteID&#xA;                                      LEFT JOIN (SELECT   QuoteID&#xA;                                                          ,MAX(Value) AS ZipTerritory&#xA;                                                  FROM     Extract.P1_QuoteCustomProperty&#xA;                                                  WHERE    Name = 'ZipTerritory'&#xA;                                                  GROUP BY QuoteID&#xA;                                              ) AS quote_zipterr&#xA;                                              ON quote_zipterr.QuoteID = q.QuoteID&#xA;                                      LEFT JOIN [Staging].[A1_Quote_Advertising] AS stg_qadv&#xA;                                              ON q.QuoteID = stg_qadv.BK_QuoteID &#xA;                                  ) &#xA;                                  MERGE [Staging].[Quote] AS TGT&#xA;                                  USING (SELECT * FROM QuotesData)&#xA;                                  As Quotes&#xA;                                   ON Quotes.BK_QuoteID = TGT.BK_QuoteID&#xA;                                  WHEN MATCHED THEN UPDATE&#xA;                                  SET&#xA;                                  TGT.[QuoteOriginID] = Quotes.[QuoteOriginID],&#xA;                                  TGT.[QuoteOrigin] = Quotes.[QuoteOrigin],&#xA;                                  TGT.[QuoteValidationStatus] = Quotes.[QuoteValidationStatus],&#xA;                                  TGT.[SK_DateID] = Quotes.[SK_DateID],&#xA;                                  TGT.[SK_ProducerID] = Quotes.[SK_ProducerID],&#xA;                                  TGT.[SK_ProgramID] = Quotes.[SK_ProgramID],&#xA;                                  TGT.[SK_CarrierID] = Quotes.[SK_CarrierID],&#xA;                                  TGT.[Completed] = Quotes.[Completed],&#xA;                                  TGT.[PolicyCreated] = Quotes.[PolicyCreated],&#xA;                                  TGT.[Premium] = Quotes.[Premium],&#xA;                                  TGT.[IsRenewal] = Quotes.[IsRenewal],&#xA;                                  TGT.[IsFromFSC] = Quotes.[IsFromFSC],&#xA;                                  TGT.[TermLemgth] = Quotes.[TermLemgth],&#xA;                                  TGT.[GarageZip] = Quotes.[GarageZip],&#xA;                                  TGT.[GarageCounty] = Quotes.[GarageCounty],&#xA;                                  TGT.[MailZip] = Quotes.[MailZip],&#xA;                                  TGT.[MailCounty] = Quotes.[MailCounty],&#xA;                                  TGT.[DriverCount] = Quotes.[DriverCount],&#xA;                                  TGT.[VehicleCount] = Quotes.[VehicleCount],&#xA;                                  TGT.[EffectiveUnderwritingTier] = Quotes.[EffectiveUnderwritingTier],&#xA;                                  TGT.[CompZipTerritory] = Quotes.[CompZipTerritory],&#xA;                                  TGT.[ZipTerritory] = Quotes.[ZipTerritory],&#xA;                                  TGT.[CampaignName] = Quotes.[CampaignName],&#xA;                                  TGT.[CampaignType] = Quotes.[CampaignType],&#xA;                                  TGT.[LeadSource] = Quotes.[LeadSource],&#xA;                                  TGT.[LeadSourceType] = Quotes.[LeadSourceType],&#xA;                                  TGT.[QuoteOriginID] = Quotes.[QuoteOriginID]&#xA;                                  WHEN NOT MATCHED THEN&#xA;                                  INSERT&#xA;                                  (&#xA;                                   [BK_QuoteID],&#xA;                                    [QuoteOriginID],&#xA;                                   [QuoteOrigin],&#xA;                                   [QuoteValidationStatus],&#xA;                                   [SK_DateID],&#xA;                                   [SK_ProducerID],&#xA;                                   [SK_ProgramID],&#xA;                                   [SK_CarrierID],&#xA;                                   [Completed],&#xA;                                   [PolicyCreated],&#xA;                                   [Premium],&#xA;                                   [IsRenewal],&#xA;                                   [IsFromFSC],&#xA;                                   [TermLemgth],&#xA;                                   [GarageZip],&#xA;                                   [GarageCounty],&#xA;                                   [MailZip],&#xA;                                   [MailCounty],&#xA;                                   [DriverCount],&#xA;                                   [VehicleCount],&#xA;                                   [EffectiveUnderwritingTier],&#xA;                                   [CompZipTerritory],&#xA;                                   [ZipTerritory],&#xA;                                   [CampaignName],&#xA;                                   [CampaignType],&#xA;                                   [LeadSource],&#xA;                                   [LeadSourceType],&#xA;                                    [QuoteOriginID]&#xA;                                  )&#xA;                                  VALUES&#xA;                                  (&#xA;                                   [BK_QuoteID],&#xA;                                    [QuoteOriginID],&#xA;                                   [QuoteOrigin],&#xA;                                   [QuoteValidationStatus],&#xA;                                   [SK_DateID],&#xA;                                   [SK_ProducerID],&#xA;                                   [SK_ProgramID],&#xA;                                   [SK_CarrierID],&#xA;                                   [Completed],&#xA;                                   [PolicyCreated],&#xA;                                   [Premium],&#xA;                                   [IsRenewal],&#xA;                                   [IsFromFSC],&#xA;                                   [TermLemgth],&#xA;                                   [GarageZip],&#xA;                                   [GarageCounty],&#xA;                                   [MailZip],&#xA;                                   [MailCounty],&#xA;                                   [DriverCount],&#xA;                                   [VehicleCount],&#xA;                                   [EffectiveUnderwritingTier],&#xA;                                   [CompZipTerritory],&#xA;                                   [ZipTerritory],&#xA;                                   [CampaignName],&#xA;                                   [CampaignType],&#xA;                                   [LeadSource],&#xA;                                   [LeadSourceType],&#xA;                                    [QuoteOriginID]&#xA;                                  );     &#xA;                    &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
              </DTS:Executables>
              <DTS:PrecedenceConstraints>
                <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{EA2D4619-5483-4C22-9B08-605B06EBBB99}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create dimQuote" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL create dimQuote_To_SQL create dimQuotePolicyTerm" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions.PrecedenceConstraints[Constraint_SQL create dimQuote_To_SQL create dimQuotePolicyTerm]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create dimQuotePolicyTerm">
                </DTS:PrecedenceConstraint>
                <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{4FE8BBB5-9687-4FC7-98CA-3EB50AB40E70}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create dimPolicy" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL create dimPolicy_To_SQL create dimQuotePolicyTerm" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions.PrecedenceConstraints[Constraint_SQL create dimPolicy_To_SQL create dimQuotePolicyTerm]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create dimQuotePolicyTerm">
                </DTS:PrecedenceConstraint>
                <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{D8E62702-7CDE-4E9A-9109-B87626B76888}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create dimQuote" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL create dimQuote_To_SQL create dimQuoteVehicle" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions.PrecedenceConstraints[Constraint_SQL create dimQuote_To_SQL create dimQuoteVehicle]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create dimQuoteVehicle">
                </DTS:PrecedenceConstraint>
                <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{94D81917-B1D4-45D3-92AE-3710073B8F1E}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create dimVehicle" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL create dimVehicle_To_SQL create dimQuoteVehicle" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions.PrecedenceConstraints[Constraint_SQL create dimVehicle_To_SQL create dimQuoteVehicle]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create dimQuoteVehicle">
                </DTS:PrecedenceConstraint>
                <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{B646DE36-7566-410B-909F-D2468077C6C3}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create dimDriver" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL create dimDriver_To_SQL create dimQuoteDriver" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions.PrecedenceConstraints[Constraint_SQL create dimDriver_To_SQL create dimQuoteDriver]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create dimQuoteDriver">
                </DTS:PrecedenceConstraint>
                <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{3B9376ED-DB59-4021-BDA4-C182785096FC}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create dimQuoteDriver" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL create dimQuoteDriver_To_SQL create quote drivers assignment" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions.PrecedenceConstraints[Constraint_SQL create dimQuoteDriver_To_SQL create quote drivers assignment]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create quote drivers assignment">
                </DTS:PrecedenceConstraint>
                <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{A0D11356-8E60-4E7D-94A7-BADB3208597A}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create dimPolicy" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL create dimPolicy_To_SQL create dimProgramGroup" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions.PrecedenceConstraints[Constraint_SQL create dimPolicy_To_SQL create dimProgramGroup]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create dimProgramGroup">
                </DTS:PrecedenceConstraint>
                <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{BA3C3844-D9BA-48C8-A451-27CCBF602E5E}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create dimProgramGroup" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL create dimProgramGroup_To_SQL create dimProgram" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions.PrecedenceConstraints[Constraint_SQL create dimProgramGroup_To_SQL create dimProgram]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create dimProgram">
                </DTS:PrecedenceConstraint>
                <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{5FEA5F3B-F96F-4C03-9ADF-654BB332FADB}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create dimPolicy" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL create dimPolicy_To_SQL create dimProgram" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions.PrecedenceConstraints[Constraint_SQL create dimPolicy_To_SQL create dimProgram]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create dimProgram">
                </DTS:PrecedenceConstraint>
                <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{BD647421-6998-4B24-941E-666986BCCB71}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create Staging Quote A1 Advertising" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL create Staging Quote A1 Advertising_To_SQL create placeholder Staging Quote A1 Advertising if needed" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions.PrecedenceConstraints[Constraint_SQL create Staging Quote A1 Advertising_To_SQL create placeholder Staging Quote A1 Advertising if needed]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create placeholder Staging Quote A1 Advertising if needed">
                </DTS:PrecedenceConstraint>
                <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{D145CA15-3E0D-4E8C-8234-70DA1CF4AEA0}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create placeholder Staging Quote A1 Advertising if needed" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL create placeholder Staging Quote A1 Advertising if needed_To_SQL create dimQuote" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions.PrecedenceConstraints[Constraint_SQL create placeholder Staging Quote A1 Advertising if needed_To_SQL create dimQuote]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create dimQuote">
                </DTS:PrecedenceConstraint>
                <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{5BCD92B0-7719-4852-B808-4CEBDAA3896D}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create dimCarrier" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL create dimCarrier_To_SQL create dimQuote" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions.PrecedenceConstraints[Constraint_SQL create dimCarrier_To_SQL create dimQuote]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create dimQuote">
                </DTS:PrecedenceConstraint>
                <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{22FFFC54-46BE-4F20-8DC4-737D34DCC227}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create dimProgram" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL create dimProgram_To_SQL create dimQuote" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions.PrecedenceConstraints[Constraint_SQL create dimProgram_To_SQL create dimQuote]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create dimQuote">
                </DTS:PrecedenceConstraint>
                <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{5FDB7E85-1894-4FF8-8A01-AAEE75E8C5AA}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create dimProducer" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL create dimProducer_To_SQL create dimQuote" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions.PrecedenceConstraints[Constraint_SQL create dimProducer_To_SQL create dimQuote]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions\SQL create dimQuote">
                </DTS:PrecedenceConstraint>
              </DTS:PrecedenceConstraints>
            </DTS:Executable>
            <DTS:Executable DTS:CreationName="STOCK:SEQUENCE" DTS:DTSID="{83D98FA1-1086-4A24-B27F-18702771C521}" DTS:ExecutableType="STOCK:SEQUENCE" DTS:LocaleID="-1" DTS:ObjectName="SEQC for keys, indexes and Staging Periods process" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC for keys, indexes and Staging Periods process">
              <DTS:Executables>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{FAC22C2F-8BF1-4425-A367-C95AC17B53B7}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create Periods" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC for keys, indexes and Staging Periods process\SQL create Periods" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                                  DECLARE @Uds varchar(3) = 'Uds';&#xA;&#xA;                                  IF OBJECT_ID('tempdb..#Periods') IS NOT NULL&#xA;                                   DROP TABLE #Periods&#xA;&#xA;                                  SELECT &#xA;                                   d_pol.BK_PolicyTermID,&#xA;                                   d_veh.BK_VehicleID,&#xA;                                   stg_pid.SK_PolicyID,&#xA;                                   stg_vid.SK_VehicleID,        &#xA;                                   stg_drsd.SK_DriversID,&#xA;                                   dimprod.SK_ProducerID,&#xA;                                   ISNULL(d_cov.SK_CoverageID, -1) AS SK_CoverageID,&#xA;                                   CAST(CONVERT(varchar(10), d_pol.EffectiveDate, 112) AS INT) AS SK_PY_DateID,&#xA;                                   CAST(LEFT(CONVERT(varchar(10), d_pol.EffectiveDate, 112) , 6) AS INT) AS SK_PY_MonthID,&#xA;                                   CASE WHEN stg_evcd.SK_DriverID IS NULL THEN -2 ELSE stg_evcd.SK_DriverID END AS SK_RatedDriverID,&#xA;                                   CAST(CONVERT(varchar(10), EndorsementStartDate.LocalFlooredDatetime, 112) AS INT) AS SK_EndorsementDateID,&#xA;                                   CAST(CONVERT(varchar(10), EndorsementEndDate.LocalFlooredDatetime, 112) AS INT) AS SK_EndorsementEndDateID,&#xA;                                   ep.EndorsementPeriodID AS BK_EndorsementPeriodID,&#xA;                                   ep.EndorsementID AS BK_EndorsementID,&#xA;                                   dbo.fFloorDateTime(d_pol.EffectiveDate) AS EffectiveDate,&#xA;                                   dbo.fFloorDateTime(d_pol.ExpirationDate) AS ExpirationDate,&#xA;                                   EndorsementStartDate.LocalFlooredDatetime AS EndorsementPeriodStartDate,&#xA;                                   EndorsementEndDate.LocalFlooredDatetime AS EndorsementPeriodEndDate,&#xA;                                   CAST(ISNULL(evc.Premium,0) AS DECIMAL(28,14)) AS Premium,&#xA;                                   CAST(ISNULL(evc.Premium,0) AS DECIMAL(28,14)) / d_pol.PolicyTermDays  AS DailyRunRate&#xA;                                   ,d_veh.BK_DriverID &#xA;                                   ,dimcarr.SK_CarrierID&#xA;                                   ,d_veh.VIN&#xA;                                    ,pt.NextPolicyTermId AS BK_NextPolicyTermId&#xA;                                    ,ept.PolicyTermStatusID AS PolicyTermStatusID&#xA;                                    ,ept.ProducerID AS BK_ProducerID&#xA;                                  INTO #Periods&#xA;                                  FROM [Extract].[P1_EndorsementPeriod] AS ep        &#xA;                                   JOIN [Staging].[PolicyID] AS stg_pid ON ep.EndorsementID = stg_pid.BK_EndorsementID&#xA;                                    JOIN [Staging].[VehicleID] AS stg_vid ON ep.EndorsementID = stg_vid.BK_EndorsementID&#xA;                                     JOIN [Staging].[DriversID] AS stg_drsd ON ep.EndorsementID = stg_drsd.BK_EndorsementID&#xA;                                      JOIN [DataMart].[dimPolicy] AS d_pol ON stg_pid.SK_PolicyID = d_pol.SK_PolicyID&#xA;                                       JOIN [DataMart].[dimVehicle] AS d_veh ON stg_vid.SK_VehicleID = d_veh.SK_VehicleID            &#xA;                                        LEFT JOIN [Extract].[P1_EndorsementVehicleCoverage] AS evc ON d_veh.BK_EndorsementVehicleID = evc.EndorsementVehicleID&#xA;                                         LEFT JOIN [Staging].[EndorsementVehicleCoverage_DriverID] as stg_evcd on evc.EndorsementVehicleCoverageID = stg_evcd.EndorsementVehicleCoverageID&#xA;                                          LEFT JOIN [Extract].[P1_ProgramCoverage] AS pc ON evc.ProgramCoverageID = pc.ProgramCoverageID&#xA;                                           LEFT JOIN [Extract].[P1_CoverageType] ct ON pc.CoverageTypeID = ct.CoverageTypeID&#xA;                                            LEFT JOIN [DataMart].[dimCoverage] AS d_cov ON ct.CoverageTypeCode = d_cov.CoverageCode&#xA;                                             JOIN [Extract].[P1_Period] AS per ON per.PeriodID = ep.PeriodID &#xA;                                              JOIN [Extract].[P1_PolicyTerm]  AS pt ON d_pol.BK_PolicyTermID = pt.PolicyTermID&#xA;                                               JOIN [Extract].[P1_Program] AS prog ON prog.ProgramID = pt.ProgramID&#xA;                                                JOIN [Extract].[P1_ProgramGroup] AS proggrp ON prog.ProgramGroupID = proggrp.ProgramGroupID         &#xA;                                                 JOIN [Extract].[P1_EndorsementPolicyTerm] AS ept on ept.EndorsementID = ep.EndorsementID&#xA;                                                  JOIN [DataMart].[dimProducer] AS dimprod ON dimprod.BK_ProducerID = ept.ProducerID&#xA;                                                   JOIN [DataMart].[dimCarrier] AS dimcarr ON dimcarr.BK_CarrierID = prog.CarrierID&#xA;                           CROSS APPLY dbo.fGetUtcToLocalDatetimeConverter(proggrp.TimeZone, ep.EndorsementPeriodStartDate) AS EndorsementStartDate&#xA;                           CROSS APPLY dbo.fGetUtcToLocalDatetimeConverter(proggrp.TimeZone, ep.EndorsementPeriodEndDate) AS EndorsementEndDate&#xA;&#xA;                                  WHERE ep.PolicyActive = 1 AND per.IsCurrentPeriod = 1&#xA;                                  AND d_pol.ExcludeFromPeriods = 0 AND d_pol.PolicyTermDays &lt;&gt; @Uds;&#xA;&#xA;                                  MERGE [Staging].[Periods] AS TGT&#xA;                                  USING&#xA;                                  (&#xA;                                   SELECT * FROM #Periods&#xA;                                  ) as periods&#xA;                                   ON  periods.[SK_PolicyID] = TGT.[SK_PolicyID]&#xA;                                   AND periods.[SK_VehicleID] = TGT.[SK_VehicleID]&#xA;                                   AND periods.[SK_CoverageID] = TGT.[SK_CoverageID]&#xA;                                  WHEN MATCHED THEN UPDATE&#xA;                                  SET &#xA;                                   TGT.[BK_PolicyTermID] = periods.[BK_PolicyTermID],&#xA;                                   TGT.[BK_VehicleID] = periods.[BK_VehicleID],&#xA;                                   TGT.[SK_DriversID] = periods.[SK_DriversID],&#xA;                                   TGT.[SK_ProducerID] = periods.[SK_ProducerID],&#xA;                                   TGT.[SK_PY_DateID] = periods.[SK_PY_DateID],&#xA;                                   TGT.[SK_PY_MonthID] = periods.[SK_PY_MonthID],&#xA;                                   TGT.[SK_RatedDriverID] = periods.[SK_RatedDriverID],&#xA;                                   TGT.[SK_EndorsementDateID] = periods.[SK_EndorsementDateID],&#xA;                                   TGT.[SK_EndorsementEndDateID] = periods.[SK_EndorsementEndDateID],&#xA;                                   TGT.[BK_EndorsementPeriodID] = periods.[BK_EndorsementPeriodID],&#xA;                                   TGT.[BK_EndorsementID] = periods.[BK_EndorsementID],&#xA;                                   TGT.[EffectiveDate] = periods.[EffectiveDate],&#xA;                                   TGT.[ExpirationDate] = periods.[ExpirationDate],&#xA;                                   TGT.[EndorsementPeriodStartDate] = periods.[EndorsementPeriodStartDate],&#xA;                                   TGT.[EndorsementPeriodEndDate] = periods.[EndorsementPeriodEndDate],&#xA;                                   TGT.[Premium] = periods.[Premium],&#xA;                                   TGT.[DailyRunRate] = periods.[DailyRunRate],&#xA;                                   TGT.[BK_DriverID] = periods.[BK_DriverID],&#xA;                                   TGT.[SK_CarrierID] = periods.[SK_CarrierID],&#xA;                                   TGT.[VIN] = periods.[VIN],&#xA;                                    TGT.[BK_NextPolicyTermID] = periods.[BK_NextPolicyTermID],&#xA;                                    TGT.[PolicyTermStatusID] = periods.[PolicyTermStatusID],&#xA;                                    TGT.[BK_ProducerID] = periods.[BK_ProducerID]&#xA;                                  WHEN NOT MATCHED THEN&#xA;                                  INSERT&#xA;                                  (&#xA;                                      [BK_PolicyTermID]&#xA;                                      ,[BK_VehicleID]&#xA;                                      ,[SK_PolicyID]&#xA;                                      ,[SK_VehicleID]&#xA;                                      ,[SK_DriversID]&#xA;                                      ,[SK_ProducerID]&#xA;                                      ,[SK_CoverageID]&#xA;                                      ,[SK_PY_DateID]&#xA;                                      ,[SK_PY_MonthID]&#xA;                                      ,[SK_RatedDriverID]&#xA;                                      ,[SK_EndorsementDateID]&#xA;                                      ,[SK_EndorsementEndDateID]&#xA;                                      ,[BK_EndorsementPeriodID]&#xA;                                      ,[BK_EndorsementID]&#xA;                                      ,[EffectiveDate]&#xA;                                      ,[ExpirationDate]&#xA;                                      ,[EndorsementPeriodStartDate]&#xA;                                      ,[EndorsementPeriodEndDate]&#xA;                                      ,[Premium]&#xA;                                      ,[DailyRunRate]&#xA;                                      ,[BK_DriverID]&#xA;                                      ,[SK_CarrierID]&#xA;                                      ,[VIN]&#xA;                                      ,[BK_NextPolicyTermID]&#xA;                                      ,[PolicyTermStatusID]&#xA;                                      ,[BK_ProducerID]&#xA;                                  )&#xA;                                  VALUES&#xA;                                  (&#xA;                                      [BK_PolicyTermID]&#xA;                                      ,[BK_VehicleID]&#xA;                                      ,[SK_PolicyID]&#xA;                                      ,[SK_VehicleID]&#xA;                                      ,[SK_DriversID]&#xA;                                      ,[SK_ProducerID]&#xA;                                      ,[SK_CoverageID]&#xA;                                      ,[SK_PY_DateID]&#xA;                                      ,[SK_PY_MonthID]&#xA;                                      ,[SK_RatedDriverID]&#xA;                                      ,[SK_EndorsementDateID]&#xA;                                      ,[SK_EndorsementEndDateID]&#xA;                                      ,[BK_EndorsementPeriodID]&#xA;                                      ,[BK_EndorsementID]&#xA;                                      ,[EffectiveDate]&#xA;                                      ,[ExpirationDate]&#xA;                                      ,[EndorsementPeriodStartDate]&#xA;                                      ,[EndorsementPeriodEndDate]&#xA;                                      ,[Premium]&#xA;                                      ,[DailyRunRate]&#xA;                                      ,[BK_DriverID]&#xA;                                      ,[SK_CarrierID]&#xA;                                      ,[VIN]&#xA;                                      ,[BK_NextPolicyTermID]&#xA;                                      ,[PolicyTermStatusID]&#xA;                                      ,[BK_ProducerID]&#xA;                                  );&#xA;&#xA;                                  DROP TABLE #Periods&#xA;                    &#xA;                        " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{B71FE9C8-EFF6-4412-BC9C-9905A58A91A8}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factlessSecurityProducer table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC for keys, indexes and Staging Periods process\SQL create factlessSecurityProducer table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                    CREATE TABLE [DataMart].[factlessSecurityProducer](&#xA;                     [SK_UserID] [int] NULL,&#xA;                     [SK_ProducerID] [int] NULL&#xA;                    ) ON [PRIMARY]&#xA;                    WITH (DATA_COMPRESSION=PAGE)&#xA;                        &#xA;                    INSERT INTO [DataMart].[factlessSecurityProducer](SK_UserID, SK_ProducerID)&#xA;          SELECT du.SK_UserID,&#xA;              dp.SK_ProducerID          &#xA;          FROM [Extract].[P1_SecurityUserProducer] AS sp &#xA;            LEFT JOIN [DataMart].[dimSecurityUser] AS du ON sp.UserID = du.BK_UserID&#xA;            LEFT JOIN [DataMart].[dimProducer] AS dp ON dp.BK_ProducerID = sp.ProducerID&#xA;            &#xA;&#xA;          ALTER TABLE [DataMart].[factlessSecurityProducer] ADD CONSTRAINT FK_factlessSecurityProducer_SK_UserID FOREIGN KEY (SK_UserID) REFERENCES [DataMart].[dimSecurityUser](SK_UserID)&#xA;          ALTER TABLE [DataMart].[factlessSecurityProducer] ADD CONSTRAINT FK_factlessSecurityProducer_SK_ProducerID FOREIGN KEY (SK_ProducerID) REFERENCES [DataMart].[dimProducer](SK_ProducerID)&#xA;          &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{9C7438F0-A521-4DC7-A33D-8EC0B00B42AB}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factlessSecurityCarrier table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC for keys, indexes and Staging Periods process\SQL create factlessSecurityCarrier table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                                  CREATE TABLE [DataMart].[factlessSecurityCarrier](&#xA;                                   [SK_UserID] [int] NULL,&#xA;                                   [SK_CarrierID] [int] NULL&#xA;                                  ) ON [PRIMARY]  &#xA;                                  WITH (DATA_COMPRESSION=PAGE)&#xA;                              &#xA;                                  INSERT INTO [DataMart].[factlessSecurityCarrier](SK_UserID, SK_CarrierID)&#xA;                        SELECT du.SK_UserID,&#xA;                            dc.SK_CarrierID          &#xA;                        FROM [Extract].[P1_SecurityUserCarrier] AS sc&#xA;                          LEFT JOIN [DataMart].[dimSecurityUser] AS du ON sc.UserID = du.BK_UserID&#xA;                          LEFT JOIN [DataMart].[dimCarrier] AS dc ON dc.BK_CarrierID = sc.CarrierID&#xA;&#xA;                        ALTER TABLE [DataMart].[factlessSecurityCarrier] ADD CONSTRAINT FK_factlessSecurityCarrier_SK_UserID FOREIGN KEY (SK_UserID) REFERENCES [DataMart].[dimSecurityUser](SK_UserID)&#xA;                        ALTER TABLE [DataMart].[factlessSecurityCarrier] ADD CONSTRAINT FK_factlessSecurityCarrier_SK_CarrierID FOREIGN KEY (SK_CarrierID) REFERENCES [DataMart].[dimCarrier](SK_CarrierID)&#xA;                      &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
              </DTS:Executables>
              <DTS:PrecedenceConstraints>
                <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{EF0F6F61-8FC0-4109-A58C-6327B03DD903}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC for keys, indexes and Staging Periods process\SQL create Periods" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL create Periods_To_SQL create factlessSecurityProducer table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC for keys, indexes and Staging Periods process.PrecedenceConstraints[Constraint_SQL create Periods_To_SQL create factlessSecurityProducer table]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC for keys, indexes and Staging Periods process\SQL create factlessSecurityProducer table">
                </DTS:PrecedenceConstraint>
                <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{1024932E-B5F7-49FF-8DF4-A716AEB1DDE8}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC for keys, indexes and Staging Periods process\SQL create factlessSecurityProducer table" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL create factlessSecurityProducer table_To_SQL create factlessSecurityCarrier table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC for keys, indexes and Staging Periods process.PrecedenceConstraints[Constraint_SQL create factlessSecurityProducer table_To_SQL create factlessSecurityCarrier table]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC for keys, indexes and Staging Periods process\SQL create factlessSecurityCarrier table">
                </DTS:PrecedenceConstraint>
              </DTS:PrecedenceConstraints>
            </DTS:Executable>
            <DTS:Executable DTS:CreationName="STOCK:SEQUENCE" DTS:DTSID="{8DE82DD9-EDCA-44EF-BB2D-F07165CD3706}" DTS:ExecutableType="STOCK:SEQUENCE" DTS:LocaleID="-1" DTS:ObjectName="SEQC Prepare common base tables" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Prepare common base tables">
              <DTS:Executables>
                <DTS:Executable DTS:CreationName="STOCK:SEQUENCE" DTS:DTSID="{876A4B62-B23F-4C4E-AC03-15578B695D78}" DTS:ExecutableType="STOCK:SEQUENCE" DTS:LocaleID="-1" DTS:ObjectName="SEQC Fake for common base tables" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Prepare common base tables\SEQC Fake for common base tables">
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="STOCK:SEQUENCE" DTS:DTSID="{FDDE4336-C467-4A8B-87DC-4DBE5956B073}" DTS:ExecutableType="STOCK:SEQUENCE" DTS:LocaleID="-1" DTS:ObjectName="SEQC Prepare common base tables conditional" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Prepare common base tables\SEQC Prepare common base tables conditional">
                  <DTS:Executables>
                    <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{577F8303-78D3-4FE4-8EDD-D7DBCA359A93}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create flatCancels" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Prepare common base tables\SEQC Prepare common base tables conditional\SQL create flatCancels" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                      <DTS:ObjectData>
                        <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;       -- Prepare Flat-Cancels policies list&#xA;       SELECT BK_PolicyTermID &#xA;       INTO [Staging].[FlatCancels]&#xA;       FROM [Staging].[Periods]&#xA;       GROUP BY BK_PolicyTermID&#xA;       HAVING SUM(SK_EndorsementEndDateID - SK_EndorsementDateID) = 0&#xA;&#xA;       CREATE CLUSTERED INDEX CLUST_IX_BKPID ON [Staging].[FlatCancels](BK_PolicyTermID) WITH (DATA_COMPRESSION = PAGE)        &#xA;        &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                        </SQLTask:SqlTaskData>
                      </DTS:ObjectData>
                    </DTS:Executable>
                    <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{6C2CEA82-9312-4410-A853-3338B9578908}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factlessUserProducer table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Prepare common base tables\SEQC Prepare common base tables conditional\SQL create factlessUserProducer table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                      <DTS:ObjectData>
                        <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                SELECT  dsu.SK_UserID&#xA;                    ,dp2.SK_ProducerID&#xA;                INTO    DataMart.factlessUserProducer&#xA;                FROM    [Extract].P1_User AS pu&#xA;                JOIN    [Extract].P1_Producer AS pp&#xA;                  ON pp.UserID = pu.UserID&#xA;                JOIN    DataMart.dimProducer AS dp2&#xA;                  ON dp2.BK_ProducerID = pp.ProducerID&#xA;                JOIN    DataMart.dimSecurityUser AS dsu&#xA;                  ON dsu.BK_UserID = pu.UserID&#xA;                  &#xA;                ALTER TABLE DataMart.factlessUserProducer ADD CONSTRAINT PK_factlessUserProducer PRIMARY KEY CLUSTERED (SK_ProducerID,SK_UserID) WITH (DATA_COMPRESSION = PAGE) ON [PRIMARY]&#xA;                ALTER TABLE [DataMart].[factlessUserProducer] ADD CONSTRAINT FK_factlessUserProducer_SK_UserID FOREIGN KEY (SK_UserID) REFERENCES [DataMart].[dimSecurityUser](SK_UserID)&#xA;                ALTER TABLE [DataMart].[factlessUserProducer] ADD CONSTRAINT FK_factlessUserProducer_SK_ProducerID FOREIGN KEY (SK_ProducerID) REFERENCES [DataMart].[dimProducer](SK_ProducerID)&#xA;               &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                        </SQLTask:SqlTaskData>
                      </DTS:ObjectData>
                    </DTS:Executable>
                    <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{1DDEBFF7-FE92-4338-9891-3F571DBF20C9}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factlessSecurityProgramGroup table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Prepare common base tables\SEQC Prepare common base tables conditional\SQL create factlessSecurityProgramGroup table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                      <DTS:ObjectData>
                        <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                          CREATE TABLE [DataMart].[factlessSecurityProgramGroup](&#xA;                           [SK_UserID] [int] NULL,&#xA;                           [SK_ProgramGroupID] [int] NULL,&#xA;                           [SK_ProgramID] [int] NULL&#xA;                          ) ON [PRIMARY]&#xA;                          WITH (DATA_COMPRESSION=PAGE)                              &#xA;                              &#xA;                              INSERT INTO    DataMart.factlessSecurityProgramGroup(SK_UserID, SK_ProgramGroupID,SK_ProgramID)&#xA;               SELECT  dsu.SK_UserID&#xA;                   ,dpg.SK_ProgramGroupID&#xA;                   ,dp.SK_ProgramID               &#xA;               FROM    Extract.P1_SecurityUserProgramGroup ao&#xA;               LEFT JOIN DataMart.dimProgramGroup dpg&#xA;                 ON dpg.BK_ProgramGroupID = ao.ProgramGroupID&#xA;               LEFT JOIN DataMart.dimProgram dp&#xA;                 ON dp.BK_ProgramGroupID = ao.ProgramGroupID&#xA;               LEFT JOIN DataMart.dimSecurityUser AS dsu&#xA;                 ON dsu.BK_UserID = ao.UserID&#xA;            &#xA;               ALTER TABLE [DataMart].[factlessSecurityProgramGroup] ADD CONSTRAINT FK_factlessSecurityProgramGroup_SK_UserID FOREIGN KEY (SK_UserID) REFERENCES [DataMart].[dimSecurityUser](SK_UserID)&#xA;               ALTER TABLE [DataMart].[factlessSecurityProgramGroup] ADD CONSTRAINT FK_factlessSecurityProgramGroup_SK_ProgramGroupID FOREIGN KEY (SK_ProgramGroupID) REFERENCES [DataMart].[dimProgramGroup](SK_ProgramGroupID)&#xA;               ALTER TABLE [DataMart].[factlessSecurityProgramGroup] ADD CONSTRAINT FK_factlessSecurityProgramGroup_SK_ProgramID FOREIGN KEY (SK_ProgramID) REFERENCES [DataMart].[dimProgram](SK_ProgramID)&#xA;               &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                        </SQLTask:SqlTaskData>
                      </DTS:ObjectData>
                    </DTS:Executable>
                    <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{F7EA0EB1-7D48-449F-A4CC-4986F0A31550}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factlessSecurityAgency table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Prepare common base tables\SEQC Prepare common base tables conditional\SQL create factlessSecurityAgency table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                      <DTS:ObjectData>
                        <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                WITH    Agency&#xA;                    AS ( SELECT DISTINCT&#xA;                      ao.AgencyID AS BK_AgencyID&#xA;                      FROM     [Extract].P1_Agency AS ao&#xA;                    )&#xA;                 SELECT  ISNULL(dsu.SK_UserID, 0) AS SK_UserID&#xA;                     ,ISNULL(da.SK_AgencyID, 0) AS SK_AgencyID&#xA;                     ,da.BK_AgencyID&#xA;                 INTO    DataMart.factlessSecurityAgency&#xA;                 FROM    [Extract].P1_SecurityUserAgency AS psua&#xA;                 LEFT JOIN DataMart.dimAgency AS da&#xA;                   ON da.BK_AgencyID = psua.AgencyID&#xA;                 LEFT JOIN DataMart.dimSecurityUser AS dsu&#xA;                   ON dsu.BK_UserID = psua.UserID&#xA;&#xA;&#xA;                ALTER TABLE DataMart.factlessSecurityAgency ADD CONSTRAINT PK_factlessSecurityAgency PRIMARY KEY CLUSTERED (SK_UserID, SK_AgencyID) WITH (DATA_COMPRESSION = PAGE) ON [PRIMARY] &#xA;                ALTER TABLE DataMart.factlessSecurityAgency ADD CONSTRAINT FK_factlessSecurityAgency_dimAgency FOREIGN KEY (SK_AgencyID) REFERENCES DataMart.dimAgency(SK_AgencyID)&#xA;                ALTER TABLE DataMart.factlessSecurityAgency ADD CONSTRAINT FK_factlessSecurityAgency_dimSecurityUser FOREIGN KEY (SK_UserID) REFERENCES DataMart.dimSecurityUser(SK_UserID)&#xA;               &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                        </SQLTask:SqlTaskData>
                      </DTS:ObjectData>
                    </DTS:Executable>
                    <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{8F9439A7-07C6-4600-A156-AC8260BF7D61}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factlessSecurityAgencyOffice table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Prepare common base tables\SEQC Prepare common base tables conditional\SQL create factlessSecurityAgencyOffice table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                      <DTS:ObjectData>
                        <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                WITH    Agency_AgencyOffice&#xA;                    AS ( SELECT DISTINCT&#xA;                      ao.AgencyID AS BK_AgencyID&#xA;                        ,ao.AgencyOfficeID AS BK_OfficeID&#xA;                      FROM     [Extract].P1_AgencyOffice AS ao&#xA;                    )&#xA;                 SELECT  ISNULL(dsu.SK_UserID, 0) AS SK_UserID&#xA;                     ,ISNULL(da.SK_AgencyID, 0) AS SK_AgencyID&#xA;                     ,ISNULL(dao.SK_AgencyOfficeID, 0) as SK_AgencyOfficeID&#xA;                     ,da.BK_AgencyID&#xA;                     ,dao.BK_AgencyOfficeID&#xA;                 INTO    DataMart.factlessSecurityAgencyOffice&#xA;                 FROM    Extract.P1_SecurityUserAgencyOffice AS psuao&#xA;                 LEFT JOIN DataMart.dimAgencyOffice AS dao&#xA;                   ON dao.BK_AgencyOfficeID = psuao.AgencyOfficeID&#xA;                 LEFT JOIN DataMart.dimSecurityUser AS dsu&#xA;                   ON dsu.BK_UserID = psuao.UserID&#xA;                 LEFT JOIN Agency_AgencyOffice AS aao&#xA;                   ON aao.BK_OfficeID = dao.BK_AgencyOfficeID&#xA;                 LEFT JOIN DataMart.dimAgency AS da&#xA;                   ON da.BK_AgencyID = aao.BK_AgencyID&#xA;&#xA;&#xA;                ALTER TABLE DataMart.factlessSecurityAgencyOffice ADD CONSTRAINT PK_factlessSecurityAgencyOffice PRIMARY KEY CLUSTERED (SK_UserID, SK_AgencyID, SK_AgencyOfficeID) WITH (DATA_COMPRESSION = PAGE) ON [PRIMARY] &#xA;                ALTER TABLE DataMart.factlessSecurityAgencyOffice ADD CONSTRAINT FK_factlessSecurityAgencyOffice_dimAgency FOREIGN KEY (SK_AgencyID) REFERENCES DataMart.dimAgency(SK_AgencyID)&#xA;                ALTER TABLE DataMart.factlessSecurityAgencyOffice ADD CONSTRAINT FK_factlessSecurityAgencyOffice_dimAgencyOffice FOREIGN KEY (SK_AgencyOfficeID) REFERENCES DataMart.dimAgencyOffice(SK_AgencyOfficeID)          &#xA;                ALTER TABLE DataMart.factlessSecurityAgencyOffice ADD CONSTRAINT FK_factlessSecurityAgencyOffice_dimSecurityUser FOREIGN KEY (SK_UserID) REFERENCES DataMart.dimSecurityUser(SK_UserID)&#xA;              &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                        </SQLTask:SqlTaskData>
                      </DTS:ObjectData>
                    </DTS:Executable>
                  </DTS:Executables>
                  <DTS:PrecedenceConstraints>
                    <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{E538EE35-1A87-42E8-83A6-6A0FFCD2E8B7}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Prepare common base tables\SEQC Prepare common base tables conditional\SQL create flatCancels" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL create flatCancels_To_SQL create factlessUserProducer table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Prepare common base tables\SEQC Prepare common base tables conditional.PrecedenceConstraints[Constraint_SQL create flatCancels_To_SQL create factlessUserProducer table]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Prepare common base tables\SEQC Prepare common base tables conditional\SQL create factlessUserProducer table">
                    </DTS:PrecedenceConstraint>
                    <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{0BF32269-4FF9-44F0-BB75-AE4CFE746EC6}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Prepare common base tables\SEQC Prepare common base tables conditional\SQL create factlessUserProducer table" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL create factlessUserProducer table_To_SQL create factlessSecurityProgramGroup table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Prepare common base tables\SEQC Prepare common base tables conditional.PrecedenceConstraints[Constraint_SQL create factlessUserProducer table_To_SQL create factlessSecurityProgramGroup table]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Prepare common base tables\SEQC Prepare common base tables conditional\SQL create factlessSecurityProgramGroup table">
                    </DTS:PrecedenceConstraint>
                    <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{EF624746-4CB8-4507-86DF-AAEA1CC53A0C}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Prepare common base tables\SEQC Prepare common base tables conditional\SQL create factlessSecurityProgramGroup table" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL create factlessSecurityProgramGroup table_To_SQL create factlessSecurityAgency table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Prepare common base tables\SEQC Prepare common base tables conditional.PrecedenceConstraints[Constraint_SQL create factlessSecurityProgramGroup table_To_SQL create factlessSecurityAgency table]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Prepare common base tables\SEQC Prepare common base tables conditional\SQL create factlessSecurityAgency table">
                    </DTS:PrecedenceConstraint>
                    <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{9BD330E0-C602-4501-A049-98E745AB38AA}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Prepare common base tables\SEQC Prepare common base tables conditional\SQL create factlessSecurityAgency table" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL create factlessSecurityAgency table_To_SQL create factlessSecurityAgencyOffice table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Prepare common base tables\SEQC Prepare common base tables conditional.PrecedenceConstraints[Constraint_SQL create factlessSecurityAgency table_To_SQL create factlessSecurityAgencyOffice table]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Prepare common base tables\SEQC Prepare common base tables conditional\SQL create factlessSecurityAgencyOffice table">
                    </DTS:PrecedenceConstraint>
                  </DTS:PrecedenceConstraints>
                </DTS:Executable>
              </DTS:Executables>
              <DTS:PrecedenceConstraints>
                <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{C0AD905D-114B-448E-860F-545AA935509C}" DTS:EvalOp="1" DTS:Expression="@[User::ProcessRatemaking]==1" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Prepare common base tables\SEQC Fake for common base tables" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SEQC Fake for common base tables_To_SEQC Prepare common base tables conditional" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Prepare common base tables.PrecedenceConstraints[Constraint_SEQC Fake for common base tables_To_SEQC Prepare common base tables conditional]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Prepare common base tables\SEQC Prepare common base tables conditional">
                </DTS:PrecedenceConstraint>
              </DTS:PrecedenceConstraints>
            </DTS:Executable>
            <DTS:Executable DTS:CreationName="STOCK:SEQUENCE" DTS:DTSID="{1EA327ED-33D0-4AD3-8C5E-D56800F6BC6C}" DTS:ExecutableType="STOCK:SEQUENCE" DTS:LocaleID="-1" DTS:ObjectName="SEQC Process Ratemaking tables" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables">
              <DTS:Executables>
                <DTS:Executable DTS:CreationName="STOCK:SEQUENCE" DTS:DTSID="{383769C9-C9C7-4389-AC86-C4C768D42ED4}" DTS:ExecutableType="STOCK:SEQUENCE" DTS:LocaleID="-1" DTS:ObjectName="SEQC Fake Container" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Fake Container">
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="STOCK:SEQUENCE" DTS:DTSID="{0E873D48-3DA3-4EAD-BEA4-67678BF02479}" DTS:ExecutableType="STOCK:SEQUENCE" DTS:LocaleID="-1" DTS:ObjectName="SEQC Create Daily Facts" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Daily Facts">
                  <DTS:Executables>
                    <DTS:Executable DTS:CreationName="STOCK:SEQUENCE" DTS:DTSID="{AA613CC3-02CF-4905-A981-8A64DBEEBA12}" DTS:ExecutableType="STOCK:SEQUENCE" DTS:LocaleID="-1" DTS:ObjectName="SEQC Create Daily fact tables" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Daily Facts\SEQC Create Daily fact tables">
                      <DTS:Executables>
                        <DTS:Executable DTS:CreationName="STOCK:SEQUENCE" DTS:DTSID="{7EC6E9EC-4540-4076-BECC-A7752A95A269}" DTS:ExecutableType="STOCK:SEQUENCE" DTS:LocaleID="-1" DTS:ObjectName="SEQC Create Complete Daily fact tables" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Daily Facts\SEQC Create Daily fact tables\SEQC Create Complete Daily fact tables">
                          <DTS:Executables>
                            <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{030C056B-2601-4D9D-8B8F-67F8BFD1049A}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factPremiums table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Daily Facts\SEQC Create Daily fact tables\SEQC Create Complete Daily fact tables\SQL create factPremiums table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                              <DTS:ObjectData>
                                <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                      &#xA;                    --Prepare factPremiums table  &#xA;                    DECLARE @TodayDateID INT&#xA;                    SET @TodayDateID = CAST(CONVERT(VARCHAR(10), GETDATE(), 112) AS INT)&#xA;&#xA;                    SELECT  SK_EndorsementDateID&#xA;                        ,SK_EndorsementEndDateID&#xA;                        ,SK_DateID&#xA;                        ,Date&#xA;                    INTO    #Date_Support&#xA;                    FROM    ( SELECT    ISNULL(SK_EndorsementDateID, -1) AS SK_EndorsementDateID&#xA;                           ,ISNULL(SK_EndorsementEndDateID, -1) AS SK_EndorsementEndDateID&#xA;                        FROM      [Staging].[Periods]&#xA;                        GROUP BY  SK_EndorsementDateID&#xA;                           ,SK_EndorsementEndDateID&#xA;                      ) AS a&#xA;                        ,[DataMart].[dimDate]&#xA;                    WHERE   SK_DateID &lt;= @TodayDateID&#xA;                      AND SK_DateID BETWEEN SK_EndorsementDateID&#xA;                           AND     SK_EndorsementEndDateID &#xA;&#xA;                    CREATE UNIQUE CLUSTERED INDEX CLUST_IX_EDDATES ON #Date_Support(SK_EndorsementDateID, SK_EndorsementEndDateID, SK_DateID, Date)&#xA;&#xA;                    SELECT  fprem.SK_CY_DateID&#xA;                        ,fprem.SK_AY_DateID&#xA;                        ,fprem.SK_PY_DateID&#xA;                        ,fprem.SK_RY_DateID&#xA;                        ,fprem.SK_VehicleID&#xA;                        ,fprem.SK_PolicyID&#xA;                        ,fprem.SK_RatedDriverID&#xA;                        ,fprem.SK_DriversID&#xA;                        ,fprem.SK_CoverageID&#xA;                        ,fprem.SK_ProducerID&#xA;                        ,fprem.SK_CarrierID&#xA;                        ,fprem.SK_ProgramID&#xA;                        ,fprem.SK_ProgramGroupID&#xA;                        ,fprem.SK_AgencyOfficeID&#xA;                        ,fprem.BK_EndorsementPeriodID&#xA;                        ,fprem.BK_PolicyTermID&#xA;                        ,fprem.BK_VehicleID&#xA;                        ,fprem.WP&#xA;                        ,fprem.WE&#xA;                        ,fprem.EP&#xA;                        ,fprem.EE&#xA;                    INTO    [DataMart].[factPremiums]&#xA;                    FROM    ( SELECT    dd.SK_DateID AS SK_CY_DateID&#xA;                           ,dd.SK_DateID AS SK_AY_DateID&#xA;                           ,dds.SK_PY_DateID&#xA;                           ,dd.SK_DateID AS SK_RY_DateID&#xA;                           ,dds.SK_VehicleID&#xA;                           ,dds.SK_PolicyID&#xA;                           ,dds.SK_RatedDriverID&#xA;                           ,dds.SK_DriversID&#xA;                           ,dds.SK_CoverageID&#xA;                           ,dds.SK_ProducerID&#xA;                           ,dds.SK_CarrierID&#xA;                           ,ISNULL(pp.SK_ProgramID, -1) AS SK_ProgramID&#xA;                           ,ISNULL(pp.SK_ProgramGroupID, -1) AS SK_ProgramGroupID&#xA;                           ,dimA.SK_AgencyOfficeID&#xA;                           ,dds.BK_EndorsementPeriodID&#xA;                           ,dds.BK_PolicyTermID&#xA;                           ,dds.BK_VehicleID&#xA;                           ,                        &#xA;                           --WP/EP&#xA;                         CASE WHEN ( dd.SK_DateID &gt; dds.SK_EndorsementDateID&#xA;                            AND dd.SK_DateID &lt; dds.SK_EndorsementEndDateID&#xA;                             )&#xA;                             OR ( dd.SK_DateID = dds.SK_EndorsementDateID&#xA;                               AND dds.SK_EndorsementDateID = dds.SK_EndorsementEndDateID&#xA;                             ) THEN CAST(0 AS DECIMAL(20, 10))&#xA;                           WHEN dd.SK_DateID = dds.SK_EndorsementDateID&#xA;                           THEN CAST(DATEDIFF(dd, dd.Date, dds.ExpirationDate)&#xA;                             * DailyRunRate AS DECIMAL(20, 10))&#xA;                           WHEN dd.SK_DateID = dds.SK_EndorsementEndDateID&#xA;                           THEN CAST(DATEDIFF(dd, dd.Date, dds.ExpirationDate)&#xA;                             * DailyRunRate * -1 AS DECIMAL(20, 10))&#xA;                         END AS WP&#xA;                           ,CASE WHEN ( dd.SK_DateID &gt; dds.SK_EndorsementDateID&#xA;                            AND dd.SK_DateID &lt; dds.SK_EndorsementEndDateID&#xA;                             )&#xA;                             OR ( dd.SK_DateID = dds.SK_EndorsementDateID&#xA;                               AND dds.SK_EndorsementDateID = dds.SK_EndorsementEndDateID&#xA;                             ) THEN CAST(0 AS INT)&#xA;                           WHEN dd.SK_DateID = dds.SK_EndorsementDateID&#xA;                           THEN CAST(DATEDIFF(dd, dd.Date, dds.ExpirationDate) AS INT)&#xA;                           WHEN dd.SK_DateID = dds.SK_EndorsementEndDateID&#xA;                           THEN CAST(DATEDIFF(dd, dd.Date, dds.ExpirationDate)&#xA;                             * -1 AS INT)&#xA;                         END AS WE&#xA;                           ,CASE WHEN dd.SK_DateID &lt; dds.SK_EndorsementEndDateID&#xA;                           THEN CAST(DailyRunRate AS DECIMAL(20, 10))&#xA;                           ELSE CAST(0 AS DECIMAL(20, 10))&#xA;                         END AS EP&#xA;                           ,CASE WHEN dd.SK_DateID &lt; dds.SK_EndorsementEndDateID&#xA;                             AND DailyRunRate &gt; 0 THEN CAST(1 AS INT)&#xA;                           ELSE CAST(0 AS INT)&#xA;                         END AS EE&#xA;                        FROM      [Staging].[Periods] AS dds&#xA;                        LEFT JOIN #Date_Support AS dd&#xA;                         ON dds.SK_EndorsementDateID = dd.SK_EndorsementDateID&#xA;                            AND dds.SK_EndorsementEndDateID = dd.SK_EndorsementEndDateID&#xA;                        LEFT JOIN [DataMart].[dimCoverage] AS cov&#xA;                         ON dds.SK_CoverageID = cov.SK_CoverageID&#xA;                        LEFT JOIN [Staging].[FlatCancels] AS ddfc&#xA;                         ON dds.BK_PolicyTermID = ddfc.BK_PolicyTermID&#xA;                        LEFT JOIN [Staging].[PolicyProgram] AS pp&#xA;                         ON dds.SK_PolicyID = pp.SK_PolicyID&#xA;                        LEFT JOIN [DataMart].[dimProducer] AS dimprod&#xA;                         ON dimprod.SK_ProducerID = dds.SK_ProducerID&#xA;                        LEFT JOIN DataMart.dimAgencyOffice dimA&#xA;                         ON dimA.BK_AgencyOfficeID = dimprod.BK_OfficeID&#xA;                        WHERE     DailyRunRate &gt; 0&#xA;                         AND dd.SK_DateID IS NOT NULL&#xA;                         AND ddfc.BK_PolicyTermID IS NULL&#xA;                      ) AS fprem&#xA;                    WHERE   fprem.WP &lt;&gt; 0&#xA;                      OR fprem.WE &lt;&gt; 0&#xA;                      OR fprem.EP &lt;&gt; 0&#xA;                      OR fprem.EE &lt;&gt; 0&#xA;                   &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                                </SQLTask:SqlTaskData>
                              </DTS:ObjectData>
                            </DTS:Executable>
                            <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{E6874D91-4A0E-4530-828C-A1720624B847}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factDriverCount table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Daily Facts\SEQC Create Daily fact tables\SEQC Create Complete Daily fact tables\SQL create factDriverCount table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                              <DTS:ObjectData>
                                <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                      &#xA;                  SELECT [SK_CY_DateID]&#xA;                        ,[SK_AY_DateID]&#xA;                        ,[SK_PY_DateID]&#xA;                        ,[SK_RY_DateID]&#xA;                        ,[SK_VehicleID]&#xA;                        ,[SK_PolicyID]      &#xA;                        ,[SK_ProducerID]&#xA;                        ,[SK_CarrierID]&#xA;                        ,[SK_ProgramID]&#xA;                        ,[BK_DriverID]&#xA;                    INTO [DataMart].[factDriverCount]      &#xA;                    FROM [DataMart].[factPremiums] as fp&#xA;                    left join [DataMart].[factlessDrivers] as fd on fp.SK_DriversID = fd.SK_DriversID             &#xA;          &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                                </SQLTask:SqlTaskData>
                              </DTS:ObjectData>
                            </DTS:Executable>
                            <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{82BD6DC2-D09F-4B5E-9A5A-ABD6F9897EB3}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factDIF table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Daily Facts\SEQC Create Daily fact tables\SEQC Create Complete Daily fact tables\SQL create factDIF table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                              <DTS:ObjectData>
                                <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                      &#xA;                                      SELECT [SK_CY_DateID]&#xA;                                            ,[SK_AY_DateID]&#xA;                                            ,[SK_PY_DateID]&#xA;                                            ,[SK_RY_DateID]&#xA;                                            ,[SK_VehicleID]&#xA;                                            ,[SK_PolicyID]&#xA;                                           ,[SK_CoverageID]&#xA;                                            ,[SK_ProducerID]&#xA;                                            ,[SK_CarrierID]&#xA;                                            ,[SK_ProgramID]&#xA;                                            ,[BK_DriverID]&#xA;                                        INTO [DataMart].[factDIF]      &#xA;                                        FROM [DataMart].[factPremiums] as fp&#xA;                                        left join [DataMart].[factlessDrivers] as fd on fp.SK_DriversID = fd.SK_DriversID &#xA;                                        WHERE EP &gt; 0&#xA;                                        group by &#xA;                                          [SK_CY_DateID]&#xA;                                            ,[SK_AY_DateID]&#xA;                                            ,[SK_PY_DateID]&#xA;                                            ,[SK_RY_DateID]&#xA;                                            ,[SK_VehicleID]&#xA;                                            ,[SK_PolicyID] &#xA;                                           ,[SK_CoverageID]           &#xA;                                            ,[SK_ProducerID]&#xA;                                            ,[SK_CarrierID]&#xA;                                            ,[SK_ProgramID]&#xA;                                            ,[BK_DriverID]                                        &#xA;                  &#xA;                              &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                                </SQLTask:SqlTaskData>
                              </DTS:ObjectData>
                            </DTS:Executable>
                            <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{C8A47CBC-1BAB-4E17-83CB-9D54B99ADD51}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factNewBusiness table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Daily Facts\SEQC Create Daily fact tables\SEQC Create Complete Daily fact tables\SQL create factNewBusiness table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                              <DTS:ObjectData>
                                <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                      &#xA;                    -- factNewBusiness&#xA;                    SELECT  dd.SK_DateID AS SK_CY_DateID&#xA;                        ,dd.SK_DateID AS SK_AY_DateID&#xA;                        ,dds.SK_PY_DateID&#xA;                        ,dd.SK_DateID AS SK_RY_DateID&#xA;                        ,dds.SK_VehicleID&#xA;                        ,dds.SK_PolicyID&#xA;                        ,dds.SK_RatedDriverID&#xA;                        ,dds.SK_DriversID&#xA;                        ,dds.SK_ProducerID&#xA;                        ,dds.SK_CarrierID&#xA;                        ,ISNULL(pp.SK_ProgramID, -1) AS SK_ProgramID&#xA;                        ,ISNULL(pp.SK_ProgramGroupID, -1) AS SK_ProgramGroupID&#xA;                        ,dds.BK_PolicyTermID&#xA;                        ,dimA.SK_AgencyOfficeID&#xA;                        ,CAST(1 AS INT) AS NewBusiness&#xA;                    INTO    [DataMart].[factNewBusiness]&#xA;                    FROM    [Staging].[Periods] AS dds WITH ( NOLOCK )&#xA;                    LEFT JOIN [DataMart].[dimDate] AS dd WITH ( NOLOCK )&#xA;                      ON SK_DateID &gt;= SK_EndorsementDateID&#xA;                         AND SK_DateID &lt;= SK_EndorsementEndDateID&#xA;                         AND dd.SK_DateID &lt;= CAST(CONVERT(VARCHAR(10), GETDATE(), 112) AS INT)&#xA;                    LEFT JOIN [DataMart].[dimPolicy] AS pol&#xA;                      ON pol.SK_PolicyID = dds.SK_PolicyID&#xA;                    LEFT JOIN [Staging].[FlatCancels] AS ddfc&#xA;                      ON dds.BK_PolicyTermID = ddfc.BK_PolicyTermID&#xA;                    LEFT JOIN [Extract].[P1_EndorsementPolicyTerm] AS ept&#xA;                      ON dds.BK_EndorsementID = ept.EndorsementID&#xA;                    LEFT JOIN [Extract].[P1_Endorsement] AS e&#xA;                      ON dds.BK_EndorsementID = e.EndorsementID&#xA;                    LEFT JOIN [Staging].[PolicyProgram] AS pp&#xA;                      ON pol.SK_PolicyID = pp.SK_PolicyID&#xA;                    LEFT JOIN [DataMart].[dimProducer] AS dimprod&#xA;                      ON dimprod.BK_ProducerID = ept.ProducerID&#xA;                    LEFT JOIN DataMart.dimAgencyOffice dimA&#xA;                      ON dimA.BK_AgencyOfficeID = dimprod.BK_OfficeID&#xA;                    WHERE   dd.SK_DateID IS NOT NULL --AND DailyRunRate &gt; 0 &#xA;                      AND CAST(CONVERT(VARCHAR(10), dds.EffectiveDate, 112) AS INT) = dd.SK_DateID&#xA;                      AND pol.IsNewBusiness = 'Yes'&#xA;                      AND ddfc.BK_PolicyTermID IS NULL&#xA;                      AND ept.PolicyTermStatusID NOT IN ( 4, 5 ) -- Filter out not written/pending&#xA;                      AND e.EndorsementTypeID IN ( 1 ) -- Filter out not written/pending &#xA;                    GROUP BY dd.SK_DateID&#xA;                        ,dds.SK_PY_DateID&#xA;                        ,dds.SK_VehicleID&#xA;                        ,dds.SK_PolicyID&#xA;                        ,dds.SK_DriversID&#xA;                        ,dds.SK_RatedDriverID&#xA;                        ,dds.SK_ProducerID&#xA;                        ,dds.BK_PolicyTermID&#xA;                        ,dds.SK_CarrierID&#xA;                        ,ISNULL(pp.SK_ProgramID, -1)&#xA;                        ,ISNULL(pp.SK_ProgramGroupID, -1)&#xA;                        ,dimA.SK_AgencyOfficeID&#xA;          &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                                </SQLTask:SqlTaskData>
                              </DTS:ObjectData>
                            </DTS:Executable>
                            <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{6C8F2C00-D73D-40A7-8D69-8C477E85E32B}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factRenewal" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Daily Facts\SEQC Create Daily fact tables\SEQC Create Complete Daily fact tables\SQL create factRenewal" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                              <DTS:ObjectData>
                                <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                      &#xA;           -- Create [DataMart].[factRenewal]&#xA;           SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED&#xA;           &#xA;           --1) Prepare proposed renewals facts&#xA;                     SELECT &#xA;             dd.SK_DateID as SK_CY_DateID,&#xA;             dd.SK_DateID as SK_AY_DateID,&#xA;             dds.SK_PY_DateID,&#xA;             dd.SK_DateID as SK_RY_DateID,&#xA;             dds.SK_PolicyID,&#xA;             dds.SK_ProducerID,&#xA;             dds.SK_CarrierID,&#xA;                          ISNULL(pp.SK_ProgramID, -1) AS SK_ProgramID,&#xA;             dds.BK_PolicyTermID,  &#xA;             CAST(1 AS SMALLINT) as RenewalDue,  &#xA;             CAST(0 AS SMALLINT) as DNR&#xA;             --CASE WHEN endo.NoRenewal = 1 THEN CAST(1 AS SMALLINT) ELSE CAST(0 AS SMALLINT) END AS DNR&#xA;           INTO [DataMart].[factRenewals]&#xA;           FROM [Staging].Periods AS dds WITH (NOLOCK) LEFT JOIN [DataMart].[dimDate] AS dd &#xA;             ON SK_DateID &gt;= SK_EndorsementDateID AND SK_DateID &lt;= SK_EndorsementEndDateID&#xA;              AND dds.EndorsementPeriodEndDate &lt;&gt; dds.EndorsementPeriodStartDate&#xA;              AND dd.SK_DateID &lt;= CAST(CONVERT(varchar(10), GETDATE(), 112) AS INT)   &#xA;             LEFT JOIN [Extract].[P1_PolicyTerm] AS pt ON dds.BK_PolicyTermID = pt.PolicyTermID    &#xA;             LEFT JOIN [Staging].[FlatCancels] AS ddfc WITH (NOLOCK) ON ddfc.BK_PolicyTermID = dds.BK_PolicyTermID&#xA;                          LEFT JOIN [Staging].[PolicyProgram] AS pp ON dds.SK_PolicyID = pp.SK_PolicyID&#xA;           WHERE dd.SK_DateID IS NOT null&#xA;             AND CAST(CONVERT(varchar(10), dds.ExpirationDate, 112) AS INT)  = dd.SK_DateID&#xA;             AND ddfc.BK_PolicyTermID IS NULL&#xA;             AND pt.NextPolicyTermID &gt; 0&#xA;           GROUP BY dd.SK_DateID,&#xA;              dds.SK_PY_DateID,&#xA;              dds.SK_PolicyID,&#xA;              dds.SK_ProducerID,&#xA;              dds.BK_PolicyTermID,&#xA;              dds.SK_CarrierID,&#xA;                           ISNULL(pp.SK_ProgramID, -1)&#xA;           &#xA;           --2) Prepare actual renewal facts&#xA;           SELECT &#xA;            dd.SK_DateID as SK_CY_DateID,&#xA;            dd.SK_DateID as SK_AY_DateID,&#xA;            dds.SK_PY_DateID,&#xA;            dd.SK_DateID as SK_RY_DateID,&#xA;            dds.SK_PolicyID,&#xA;            dds.SK_ProducerID,&#xA;            dds.SK_CarrierID,&#xA;                        ISNULL(pp.SK_ProgramID, -1) AS SK_ProgramID,&#xA;            CAST(1 AS SMALLINT) as Renewal,&#xA;            dds.BK_PolicyTermID  &#xA;          INTO [DataMart].[factRenewalsActual]&#xA;          FROM [Staging].Periods AS dds WITH (NOLOCK) LEFT JOIN [DataMart].[dimDate] AS dd &#xA;            ON SK_DateID &gt;= SK_EndorsementDateID AND SK_DateID &lt;= SK_EndorsementEndDateID &#xA;             AND dds.EndorsementPeriodEndDate &lt;&gt; dds.EndorsementPeriodStartDate&#xA;             AND dd.SK_DateID &lt;= CAST(CONVERT(varchar(10), GETDATE(), 112) AS INT)   &#xA;            LEFT JOIN [Extract].[P1_PolicyTerm] AS pt ON dds.BK_PolicyTermID = pt.NextPolicyTermID    &#xA;            LEFT JOIN [Staging].[FlatCancels] AS ddfc WITH (NOLOCK) ON ddfc.BK_PolicyTermID = dds.BK_PolicyTermID&#xA;            LEFT JOIN [Extract].[P1_EndorsementPolicyTerm] AS ept ON dds.BK_EndorsementID = ept.EndorsementID&#xA;                        LEFT JOIN [Staging].[PolicyProgram] AS pp ON dds.SK_PolicyID = pp.SK_PolicyID&#xA;          WHERE dd.SK_DateID IS NOT null&#xA;            AND CAST(CONVERT(varchar(10), dds.EffectiveDate, 112) AS INT)  = dd.SK_DateID&#xA;            AND ddfc.BK_PolicyTermID IS NULL&#xA;            AND pt.PolicyTermID IS NOT NULL&#xA;            AND SK_EndorsementDateID &lt; SK_EndorsementEndDateID &#xA;            AND pt.NextPolicyTermID &gt; 0&#xA;            AND ept.PolicyTermStatusID NOT IN(4, 5) -- Filter out not written/pending&#xA;          GROUP BY dd.SK_DateID,&#xA;             dds.SK_PY_DateID,&#xA;             dds.SK_PolicyID,&#xA;             dds.SK_ProducerID,&#xA;             dds.BK_PolicyTermID,&#xA;             dds.SK_CarrierID,&#xA;                         ISNULL(pp.SK_ProgramID, -1)&#xA;                                                  &#xA;                    --3) Prepare Actual Renewals Carriover&#xA;                    SELECT &#xA;            dd.SK_DateID as SK_CY_DateID,&#xA;            dd.SK_DateID as SK_AY_DateID,&#xA;            dds.SK_PY_DateID,&#xA;            dd.SK_DateID as SK_RY_DateID,&#xA;            dds.SK_PolicyID,&#xA;            dds.SK_ProducerID,&#xA;            dds.SK_CarrierID,&#xA;                        ISNULL(pp.SK_ProgramID, -1) AS SK_ProgramID,&#xA;            CAST(1 AS SMALLINT) as RenewalCarriover,&#xA;            dds.BK_PolicyTermID &#xA;                    INTO [DataMart].[factRenewalsCarrioverActual]                        &#xA;          FROM (SELECT PolicyTermID FROM [Extract].[P1_Endorsement] Where EndorsementTypeID = 2) as renew&#xA;            LEFT JOIN [Staging].Periods AS dds WITH (NOLOCK) ON dds.BK_PolicyTermID = renew.PolicyTermID&#xA;            LEFT JOIN [DataMart].[dimDate] AS dd &#xA;            ON SK_DateID &gt;= SK_EndorsementDateID &#xA;            AND SK_DateID &lt;= SK_EndorsementEndDateID &#xA;             AND dds.EndorsementPeriodEndDate &lt;&gt; dds.EndorsementPeriodStartDate&#xA;             AND dd.SK_DateID &lt;= CAST(CONVERT(varchar(10), GETDATE(), 112) AS INT)   &#xA;            LEFT JOIN [Extract].[P1_PolicyTerm] AS pt ON dds.BK_PolicyTermID = pt.NextPolicyTermID    &#xA;            LEFT JOIN [Staging].[FlatCancels] AS ddfc WITH (NOLOCK) ON ddfc.BK_PolicyTermID = dds.BK_PolicyTermID&#xA;            LEFT JOIN [Extract].[P1_EndorsementPolicyTerm] AS ept ON dds.BK_EndorsementID = ept.EndorsementID            &#xA;                        LEFT JOIN [Staging].[PolicyProgram] AS pp ON dds.SK_PolicyID = pp.SK_PolicyID&#xA;          WHERE dd.SK_DateID IS NOT null&#xA;            AND pt.PolicyTermID IS NULL&#xA;            AND CAST(CONVERT(varchar(10), dds.EffectiveDate, 112) AS INT)  = dd.SK_DateID&#xA;            AND ddfc.BK_PolicyTermID IS NULL            &#xA;            AND SK_EndorsementDateID &lt; SK_EndorsementEndDateID             &#xA;            AND ept.PolicyTermStatusID NOT IN(4, 5) -- Filter out not written/pending&#xA;           GROUP BY dd.SK_DateID,&#xA;             dds.SK_PY_DateID,&#xA;             dds.SK_PolicyID,&#xA;             dds.SK_ProducerID,&#xA;             dds.BK_PolicyTermID,&#xA;             dds.SK_CarrierID,&#xA;                         ISNULL(pp.SK_ProgramID, -1)&#xA;                         &#xA;          &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                                </SQLTask:SqlTaskData>
                              </DTS:ObjectData>
                            </DTS:Executable>
                          </DTS:Executables>
                          <DTS:PrecedenceConstraints>
                            <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{169A99F8-B22A-4B76-951C-3011DE63D0B5}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Daily Facts\SEQC Create Daily fact tables\SEQC Create Complete Daily fact tables\SQL create factPremiums table" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL create factPremiums table_To_SQL create factDriverCount table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Daily Facts\SEQC Create Daily fact tables\SEQC Create Complete Daily fact tables.PrecedenceConstraints[Constraint_SQL create factPremiums table_To_SQL create factDriverCount table]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Daily Facts\SEQC Create Daily fact tables\SEQC Create Complete Daily fact tables\SQL create factDriverCount table">
                            </DTS:PrecedenceConstraint>
                            <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{8D538640-5EDF-45D7-AFDC-85BBA98790FE}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Daily Facts\SEQC Create Daily fact tables\SEQC Create Complete Daily fact tables\SQL create factPremiums table" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL create factPremiums table_To_SQL create factDIF table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Daily Facts\SEQC Create Daily fact tables\SEQC Create Complete Daily fact tables.PrecedenceConstraints[Constraint_SQL create factPremiums table_To_SQL create factDIF table]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Daily Facts\SEQC Create Daily fact tables\SEQC Create Complete Daily fact tables\SQL create factDIF table">
                            </DTS:PrecedenceConstraint>
                          </DTS:PrecedenceConstraints>
                          <DTS:PropertyExpression DTS:Name="Disable">!@[User::config_Process_DailyDataMart]</DTS:PropertyExpression>
                        </DTS:Executable>
                        <DTS:Executable DTS:CreationName="STOCK:SEQUENCE" DTS:DTSID="{A6C88A26-B44C-477B-84E4-D292FB9E3A18}" DTS:ExecutableType="STOCK:SEQUENCE" DTS:LocaleID="-1" DTS:ObjectName="SEQC Create empty placeholder Daily fact tables" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Daily Facts\SEQC Create Daily fact tables\SEQC Create empty placeholder Daily fact tables">
                          <DTS:Executables>
                            <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{B3033E71-F68E-4370-BEF6-1C7643B3621B}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create empty factPremiums table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Daily Facts\SEQC Create Daily fact tables\SEQC Create empty placeholder Daily fact tables\SQL create empty factPremiums table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                              <DTS:ObjectData>
                                <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                      &#xA;          --Prepare factPremiums table  &#xA;          CREATE TABLE [DataMart].[factPremiums]&#xA;          (&#xA;           [SK_CY_DateID] [int] NULL,&#xA;           [SK_AY_DateID] [int] NULL,&#xA;           [SK_PY_DateID] [int] NULL,&#xA;           [SK_RY_DateID] [int] NULL,&#xA;           [SK_VehicleID] [int] NULL,&#xA;           [SK_PolicyID] [int] NULL,&#xA;           [SK_RatedDriverID] [int] NULL,&#xA;           [SK_DriversID] [int] NULL,&#xA;           [SK_CoverageID] [int] NULL,&#xA;           [SK_ProducerID] [int] NULL,&#xA;           [SK_CarrierID] [int] NULL,&#xA;                      [SK_ProgramID] [int] NULL,&#xA;                      [SK_ProgramGroupID] int NOT NULL,&#xA;                      [SK_AgencyOfficeID] int NULL,&#xA;           [BK_EndorsementPeriodID] [int] NULL,&#xA;           [BK_PolicyTermID] [int] NULL,&#xA;           [BK_VehicleID] [int] NULL,&#xA;           [WP] [decimal](20, 10) NULL,&#xA;           [WE] [int] NULL,&#xA;           [EP] [decimal](20, 10) NULL,&#xA;           [EE] [int] NULL&#xA;          )&#xA;           &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                                </SQLTask:SqlTaskData>
                              </DTS:ObjectData>
                            </DTS:Executable>
                            <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{84C86527-4928-4C2D-A954-9052F3351ADE}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create empty factDriverCount table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Daily Facts\SEQC Create Daily fact tables\SEQC Create empty placeholder Daily fact tables\SQL create empty factDriverCount table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                              <DTS:ObjectData>
                                <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                      &#xA;                                  CREATE TABLE [DataMart].[factDriverCount](&#xA;                                   [SK_CY_DateID] [int] NULL,&#xA;                                   [SK_AY_DateID] [int] NULL,&#xA;                                   [SK_PY_DateID] [int] NULL,&#xA;                                   [SK_RY_DateID] [int] NULL,&#xA;                                   [SK_VehicleID] [int] NULL,&#xA;                                   [SK_PolicyID] [int] NULL,&#xA;                                   [SK_ProducerID] [int] NULL,&#xA;                                   [SK_CarrierID] [int] NULL,&#xA;                                    [SK_ProgramID] [int] NULL,&#xA;                                   [BK_DriverID] [int] NULL&#xA;                                  ) &#xA;                        &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                                </SQLTask:SqlTaskData>
                              </DTS:ObjectData>
                            </DTS:Executable>
                            <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{5B80BF5F-1C7A-4A42-8E2B-D99CC47346BB}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create empty factDIF table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Daily Facts\SEQC Create Daily fact tables\SEQC Create empty placeholder Daily fact tables\SQL create empty factDIF table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                              <DTS:ObjectData>
                                <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                      &#xA;                                        CREATE TABLE [DataMart].[factDIF](&#xA;                                         [SK_CY_DateID] [int] NULL,&#xA;                                         [SK_AY_DateID] [int] NULL,&#xA;                                         [SK_PY_DateID] [int] NULL,&#xA;                                         [SK_RY_DateID] [int] NULL,&#xA;                                         [SK_VehicleID] [int] NULL,&#xA;                                         [SK_PolicyID] [int] NULL,&#xA;                                         [SK_CoverageID] [int] NULL,&#xA;                                         [SK_ProducerID] [int] NULL,&#xA;                                         [SK_CarrierID] [int] NULL,&#xA;                                          [SK_ProgramID] [int] NULL,&#xA;                                         [BK_DriverID] [int] NULL&#xA;                                        ) &#xA;                        &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                                </SQLTask:SqlTaskData>
                              </DTS:ObjectData>
                            </DTS:Executable>
                            <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{EFFEF8A8-5B79-4896-BCE0-10D2C4B65751}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create empty factNewBusiness" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Daily Facts\SEQC Create Daily fact tables\SEQC Create empty placeholder Daily fact tables\SQL create empty factNewBusiness" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                              <DTS:ObjectData>
                                <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                      &#xA;          -- factNewBusiness&#xA;          CREATE TABLE [DataMart].[factNewBusiness]&#xA;          (&#xA;           [SK_CY_DateID] [int] NULL,&#xA;           [SK_AY_DateID] [int] NULL,&#xA;           [SK_PY_DateID] [int] NULL,&#xA;           [SK_RY_DateID] [int] NULL,&#xA;           [SK_VehicleID] [int] NULL,&#xA;           [SK_PolicyID] [int] NULL,&#xA;           [SK_RatedDriverID] [int] NULL,&#xA;           [SK_DriversID] [int] NULL,&#xA;           [SK_ProducerID] [int] NULL,&#xA;           [SK_CarrierID] [int] NULL,&#xA;                      [SK_ProgramID] [int] NULL,&#xA;                      [SK_ProgramGroupID] int NOT NULL,&#xA;           [BK_PolicyTermID] [int] NULL,   &#xA;                      [SK_AgencyOfficeID] int NULL,&#xA;           [NewBusiness] [int] NULL&#xA;          )          &#xA;          &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                                </SQLTask:SqlTaskData>
                              </DTS:ObjectData>
                            </DTS:Executable>
                            <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{C591A825-9A5B-4B9B-B914-CAFD0E89E618}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create empty factRenewal" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Daily Facts\SEQC Create Daily fact tables\SEQC Create empty placeholder Daily fact tables\SQL create empty factRenewal" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                              <DTS:ObjectData>
                                <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                      &#xA;          -- Create [DataMart].[factRenewal]&#xA;          CREATE TABLE [DataMart].[factRenewals]&#xA;          (&#xA;           [SK_CY_DateID] [int] NULL,&#xA;           [SK_AY_DateID] [int] NULL,&#xA;           [SK_PY_DateID] [int] NULL,&#xA;           [SK_RY_DateID] [int] NULL,&#xA;           [SK_PolicyID] [int] NULL,&#xA;           [SK_ProducerID] [int] NULL,&#xA;           [SK_CarrierID] [int] NULL,&#xA;                      [SK_ProgramID] [int] NULL,&#xA;           [BK_PolicyTermID] [int] NULL,&#xA;           [RenewalDue] [smallint] NULL,&#xA;           [DNR] [smallint] NULL&#xA;          )      &#xA;          &#xA;          -- Create [DataMart].[factRenewalActual]          &#xA;          CREATE TABLE [DataMart].[factRenewalsActual]&#xA;          (&#xA;           [SK_CY_DateID] [int] NULL,&#xA;           [SK_AY_DateID] [int] NULL,&#xA;           [SK_PY_DateID] [int] NULL,&#xA;           [SK_RY_DateID] [int] NULL,&#xA;           [SK_PolicyID] [int] NULL,&#xA;           [SK_ProducerID] [int] NULL,&#xA;           [SK_CarrierID] [int] NULL,&#xA;                      [SK_ProgramID] [int] NULL,&#xA;           [Renewal] [smallint] NULL,&#xA;           [BK_PolicyTermID] [int] NULL&#xA;          )&#xA;                    &#xA;                    &#xA;          -- Create [DataMart].[factRenewalCarrioverActual]          &#xA;          CREATE TABLE [DataMart].[factRenewalsCarrioverActual]&#xA;          (&#xA;           [SK_CY_DateID] [int] NULL,&#xA;           [SK_AY_DateID] [int] NULL,&#xA;           [SK_PY_DateID] [int] NULL,&#xA;           [SK_RY_DateID] [int] NULL,&#xA;           [SK_PolicyID] [int] NULL,&#xA;           [SK_ProducerID] [int] NULL,&#xA;           [SK_CarrierID] [int] NULL,&#xA;                      [SK_ProgramID] [int] NULL,&#xA;           [RenewalCarriover] [smallint] NULL,&#xA;           [BK_PolicyTermID] [int] NULL&#xA;          )&#xA;                    &#xA;          &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                                </SQLTask:SqlTaskData>
                              </DTS:ObjectData>
                            </DTS:Executable>
                          </DTS:Executables>
                          <DTS:PrecedenceConstraints>
                            <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{0B22EE6F-E2BE-4A8B-8CD2-096E0AD4AD17}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Daily Facts\SEQC Create Daily fact tables\SEQC Create empty placeholder Daily fact tables\SQL create empty factPremiums table" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL create empty factPremiums table_To_SQL create empty factDriverCount table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Daily Facts\SEQC Create Daily fact tables\SEQC Create empty placeholder Daily fact tables.PrecedenceConstraints[Constraint_SQL create empty factPremiums table_To_SQL create empty factDriverCount table]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Daily Facts\SEQC Create Daily fact tables\SEQC Create empty placeholder Daily fact tables\SQL create empty factDriverCount table">
                            </DTS:PrecedenceConstraint>
                            <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{E5B4507C-6FAC-4C39-82C0-897C81EF5139}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Daily Facts\SEQC Create Daily fact tables\SEQC Create empty placeholder Daily fact tables\SQL create empty factPremiums table" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL create empty factPremiums table_To_SQL create empty factDIF table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Daily Facts\SEQC Create Daily fact tables\SEQC Create empty placeholder Daily fact tables.PrecedenceConstraints[Constraint_SQL create empty factPremiums table_To_SQL create empty factDIF table]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Daily Facts\SEQC Create Daily fact tables\SEQC Create empty placeholder Daily fact tables\SQL create empty factDIF table">
                            </DTS:PrecedenceConstraint>
                          </DTS:PrecedenceConstraints>
                          <DTS:PropertyExpression DTS:Name="Disable">@[User::config_Process_DailyDataMart]</DTS:PropertyExpression>
                        </DTS:Executable>
                      </DTS:Executables>
                    </DTS:Executable>
                  </DTS:Executables>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="STOCK:SEQUENCE" DTS:DTSID="{CBB5599A-E2FF-41CE-B8FA-4B6B89D01401}" DTS:ExecutableType="STOCK:SEQUENCE" DTS:LocaleID="-1" DTS:ObjectName="SEQC Create Monthly AY CY PY RY Facts" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Monthly AY CY PY RY Facts">
                  <DTS:Executables>
                    <DTS:Executable DTS:CreationName="STOCK:SEQUENCE" DTS:DTSID="{94C77673-FA96-4791-AE78-ACCC19DCD289}" DTS:ExecutableType="STOCK:SEQUENCE" DTS:LocaleID="-1" DTS:ObjectName="SEQC Create Monthly AY CY PY RY fact tables" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Monthly AY CY PY RY Facts\SEQC Create Monthly AY CY PY RY fact tables">
                      <DTS:Executables>
                        <DTS:Executable DTS:CreationName="STOCK:SEQUENCE" DTS:DTSID="{6B04136F-1FCB-4ECB-91F8-72E81135E317}" DTS:ExecutableType="STOCK:SEQUENCE" DTS:LocaleID="-1" DTS:ObjectName="SEQC Create Complete Monthly fact tables" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Monthly AY CY PY RY Facts\SEQC Create Monthly AY CY PY RY fact tables\SEQC Create Complete Monthly fact tables">
                          <DTS:Executables>
                            <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{C52D7194-0BF6-4A4D-9B9D-7E242B77DFD4}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factPremiumsMonthly table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Monthly AY CY PY RY Facts\SEQC Create Monthly AY CY PY RY fact tables\SEQC Create Complete Monthly fact tables\SQL create factPremiumsMonthly table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                              <DTS:ObjectData>
                                <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                      &#xA;                    SELECT  fprem.SK_CY_MonthID&#xA;                        ,fprem.SK_AY_MonthID&#xA;                        ,fprem.SK_PY_MonthID&#xA;                        ,fprem.SK_RY_MonthID&#xA;                        ,fprem.SK_VehicleID&#xA;                        ,fprem.SK_PolicyID&#xA;                        ,fprem.SK_RatedDriverID&#xA;                        ,fprem.SK_DriversID&#xA;                        ,fprem.SK_CoverageID&#xA;                        ,fprem.SK_ProducerID&#xA;                        ,fprem.SK_CarrierID&#xA;                        ,fprem.SK_ProgramID&#xA;                        ,fprem.SK_ProgramGroupID&#xA;                        ,fprem.SK_AgencyOfficeID&#xA;                        ,fprem.BK_EndorsementPeriodID&#xA;                        ,fprem.BK_PolicyTermID&#xA;                        ,fprem.BK_VehicleID&#xA;                        ,fprem.WP&#xA;                        ,fprem.WE&#xA;                        ,fprem.EP&#xA;                        ,fprem.EE&#xA;                        ,fprem.EoM_InforceFlag&#xA;                    INTO    [DataMart].[factPremiumsMonthly]&#xA;                    FROM    ( SELECT    dm.SK_MonthID AS SK_CY_MonthID&#xA;                           ,dm.SK_MonthID AS SK_AY_MonthID&#xA;                           ,CAST(( LEFT(CAST(dds.SK_PY_DateID AS VARCHAR), 6) ) AS INT) AS SK_PY_MonthID&#xA;                           ,dm.SK_MonthID AS SK_RY_MonthID&#xA;                           ,dds.SK_VehicleID&#xA;                           ,dds.SK_PolicyID&#xA;                           ,dds.SK_RatedDriverID&#xA;                           ,dds.SK_DriversID&#xA;                           ,dds.SK_CoverageID&#xA;                           ,dds.SK_ProducerID&#xA;                           ,dds.SK_CarrierID&#xA;                           ,ISNULL(pp.SK_ProgramID, -1) AS SK_ProgramID&#xA;                           ,ISNULL(pp.SK_ProgramGroupID, -1) AS SK_ProgramGroupID&#xA;                           ,dimA.SK_AgencyOfficeID&#xA;                           ,dds.BK_EndorsementPeriodID&#xA;                           ,dds.BK_PolicyTermID&#xA;                           ,dds.BK_VehicleID&#xA;                           ,&#xA;                           --WP/EP&#xA;                         CASE WHEN dm.StartDate &lt;= dds.EndorsementPeriodStartDate&#xA;                             AND dm.EndDate &gt;= dds.EndorsementPeriodEndDate&#xA;                           THEN  -- Whole Endorsment is within one month  &#xA;                             CAST(DATEDIFF(dd, dds.EndorsementPeriodStartDate,&#xA;                               dds.ExpirationDate) * DailyRunRate AS DECIMAL(20,&#xA;                                     10))&#xA;                             - CAST(DATEDIFF(dd, dds.EndorsementPeriodEndDate,&#xA;                                 dds.ExpirationDate)&#xA;                             * DailyRunRate AS DECIMAL(20, 10))&#xA;                           WHEN dm.StartDate &lt;= dds.EndorsementPeriodStartDate&#xA;                             AND dm.EndDate &gt;= dds.EndorsementPeriodStartDate&#xA;                             AND dm.EndDate &lt;= dds.EndorsementPeriodEndDate&#xA;                           THEN -- Add WP if endorsment just started in this month            &#xA;                             CAST(DATEDIFF(dd, dds.EndorsementPeriodStartDate,&#xA;                               dds.ExpirationDate) * DailyRunRate AS DECIMAL(20,&#xA;                                     10))&#xA;                           WHEN dm.StartDate &gt; dds.EndorsementPeriodStartDate&#xA;                             AND dm.StartDate &lt;= dds.EndorsementPeriodEndDate&#xA;                             AND dm.EndDate &gt;= dds.EndorsementPeriodEndDate&#xA;                           THEN  -- Substract WP if endorsment just ended in this month  &#xA;                             CAST(DATEDIFF(dd, dds.EndorsementPeriodEndDate,&#xA;                               dds.ExpirationDate) * DailyRunRate&#xA;                             * -1 AS DECIMAL(20, 10))&#xA;                           ELSE CAST(0 AS DECIMAL(20, 10))&#xA;                         END AS WP&#xA;                           ,CASE WHEN dm.StartDate &lt;= dds.EndorsementPeriodStartDate&#xA;                             AND dm.EndDate &gt;= dds.EndorsementPeriodEndDate&#xA;                           THEN  -- Whole Endorsment is within one month  &#xA;                             CAST(DATEDIFF(dd, dds.EndorsementPeriodStartDate,&#xA;                               dds.ExpirationDate) AS INT)&#xA;                             - CAST(DATEDIFF(dd, dds.EndorsementPeriodEndDate,&#xA;                                 dds.ExpirationDate) AS INT)&#xA;                           WHEN dm.StartDate &lt;= dds.EndorsementPeriodStartDate&#xA;                             AND dm.EndDate &gt;= dds.EndorsementPeriodStartDate&#xA;                             AND dm.EndDate &lt;= dds.EndorsementPeriodEndDate&#xA;                           THEN  -- Add WE if endorsment just started in this month  &#xA;                             CAST(DATEDIFF(dd, dds.EndorsementPeriodStartDate,&#xA;                               dds.ExpirationDate) AS INT)&#xA;                           WHEN dm.StartDate &gt; dds.EndorsementPeriodStartDate&#xA;                             AND dm.StartDate &lt;= dds.EndorsementPeriodEndDate&#xA;                             AND dm.EndDate &gt;= dds.EndorsementPeriodEndDate&#xA;                           THEN  -- Substract WE if endorsment just started in this month  &#xA;                             CAST(DATEDIFF(dd, dds.EndorsementPeriodEndDate,&#xA;                               dds.ExpirationDate) * -1 AS INT)&#xA;                           ELSE CAST(0 AS INT)&#xA;                         END AS WE&#xA;                           ,CASE WHEN dds.EndorsementPeriodStartDate &lt;= dm.StartDate&#xA;                             AND dds.EndorsementPeriodEndDate &lt;= dm.EndDate&#xA;                           THEN CAST(DATEDIFF(dd, dm.StartDate,&#xA;                               dds.EndorsementPeriodEndDate)&#xA;                             * DailyRunRate AS DECIMAL(20, 10))&#xA;                           WHEN dds.EndorsementPeriodStartDate &lt;= dm.StartDate&#xA;                             AND dds.EndorsementPeriodEndDate &gt;= dm.EndDate&#xA;                           THEN CAST(DATEDIFF(dd, dm.StartDate,&#xA;                               DATEADD(dd, 1, dm.EndDate))&#xA;                             * DailyRunRate AS DECIMAL(20, 10))&#xA;                           WHEN dds.EndorsementPeriodStartDate &gt;= dm.StartDate&#xA;                             AND dds.EndorsementPeriodEndDate &lt;= dm.EndDate&#xA;                           THEN CAST(DATEDIFF(dd, dds.EndorsementPeriodStartDate,&#xA;                               dds.EndorsementPeriodEndDate)&#xA;                             * DailyRunRate AS DECIMAL(20, 10))&#xA;                           WHEN dds.EndorsementPeriodStartDate &gt;= dm.StartDate&#xA;                             AND dds.EndorsementPeriodEndDate &gt;= dm.EndDate&#xA;                           THEN CAST(DATEDIFF(dd, dds.EndorsementPeriodStartDate,&#xA;                               DATEADD(dd, 1, dm.EndDate))&#xA;                             * DailyRunRate AS DECIMAL(20, 10))&#xA;                           ELSE CAST(0 AS DECIMAL(20, 10))&#xA;                         END AS EP&#xA;                           ,CASE WHEN dds.EndorsementPeriodStartDate &lt;= dm.StartDate&#xA;                             AND dds.EndorsementPeriodEndDate &lt;= dm.EndDate&#xA;                           THEN CAST(DATEDIFF(dd, dm.StartDate,&#xA;                               dds.EndorsementPeriodEndDate) AS INT)&#xA;                           WHEN dds.EndorsementPeriodStartDate &lt;= dm.StartDate&#xA;                             AND dds.EndorsementPeriodEndDate &gt;= dm.EndDate&#xA;                           THEN CAST(DATEDIFF(dd, dm.StartDate,&#xA;                               DATEADD(dd, 1, dm.EndDate)) AS INT)&#xA;                           WHEN dds.EndorsementPeriodStartDate &gt;= dm.StartDate&#xA;                             AND dds.EndorsementPeriodEndDate &lt;= dm.EndDate&#xA;                           THEN CAST(DATEDIFF(dd, dds.EndorsementPeriodStartDate,&#xA;                               dds.EndorsementPeriodEndDate) AS INT)&#xA;                           WHEN dds.EndorsementPeriodStartDate &gt;= dm.StartDate&#xA;                             AND dds.EndorsementPeriodEndDate &gt;= dm.EndDate&#xA;                           THEN CAST(DATEDIFF(dd, dds.EndorsementPeriodStartDate,&#xA;                               DATEADD(dd, 1, dm.EndDate)) AS INT)&#xA;                           ELSE CAST(0 AS INT)&#xA;                         END AS EE&#xA;                           ,CASE WHEN dm.StartDate &lt; dds.EndorsementPeriodEndDate&#xA;                             AND dm.EndDate &lt; dds.EndorsementPeriodEndDate&#xA;                           THEN CAST(1 AS TINYINT)&#xA;                           ELSE CAST(0 AS TINYINT)&#xA;                         END AS EoM_InforceFlag&#xA;                        FROM      [Staging].[Periods] AS dds WITH ( NOLOCK )&#xA;                        LEFT JOIN [DataMart].[dimMonth] AS dm WITH ( NOLOCK )&#xA;                         ON dm.StartDate &lt;= dds.EndorsementPeriodEndDate&#xA;                            AND dm.EndDate &gt;= dds.EndorsementPeriodStartDate&#xA;                        LEFT JOIN [DataMart].[dimCoverage] AS cov&#xA;                         ON dds.SK_CoverageID = cov.SK_CoverageID&#xA;                        LEFT JOIN [Staging].[FlatCancels] AS ddfc&#xA;                         ON dds.BK_PolicyTermID = ddfc.BK_PolicyTermID&#xA;                        LEFT JOIN [Staging].[PolicyProgram] AS pp&#xA;                         ON dds.SK_PolicyID = pp.SK_PolicyID&#xA;                        LEFT JOIN [DataMart].[dimProducer] AS dimprod&#xA;                         ON dimprod.SK_ProducerID = dds.SK_ProducerID&#xA;                        LEFT JOIN DataMart.dimAgencyOffice dimA&#xA;                         ON dimA.BK_AgencyOfficeID = dimprod.BK_OfficeID&#xA;                        WHERE     DailyRunRate &gt; 0&#xA;                         AND dm.SK_MonthID IS NOT NULL&#xA;                         AND ddfc.BK_PolicyTermID IS NULL&#xA;                      ) AS fprem&#xA;                    WHERE   fprem.WP &lt;&gt; 0&#xA;                      OR fprem.WE &lt;&gt; 0&#xA;                      OR fprem.EP &lt;&gt; 0&#xA;                      OR fprem.EE &lt;&gt; 0           &#xA;                   &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                                </SQLTask:SqlTaskData>
                              </DTS:ObjectData>
                            </DTS:Executable>
                            <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{32DBCECC-72E9-43ED-A181-17E9EDB756E6}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factDriverCountMonthly table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Monthly AY CY PY RY Facts\SEQC Create Monthly AY CY PY RY fact tables\SEQC Create Complete Monthly fact tables\SQL create factDriverCountMonthly table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                              <DTS:ObjectData>
                                <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                      &#xA;                                      SELECT [SK_CY_MonthID]&#xA;                                            ,[SK_AY_MonthID]&#xA;                                            ,[SK_PY_MonthID]&#xA;                                            ,[SK_RY_MonthID]&#xA;                                            ,[SK_VehicleID]&#xA;                                            ,[SK_PolicyID]      &#xA;                                            ,[SK_ProducerID]&#xA;                                            ,[SK_CarrierID]&#xA;                                            ,[SK_ProgramID]&#xA;                                            ,[BK_DriverID]&#xA;                                        INTO [DataMart].[factDriverCountMonthly]      &#xA;                                        FROM [DataMart].[factPremiumsMonthly] as fp&#xA;                                        left join [DataMart].[factlessDrivers] as fd on fp.SK_DriversID = fd.SK_DriversID &#xA;                                        group by &#xA;                                          [SK_CY_MonthID]&#xA;                                            ,[SK_AY_MonthID]&#xA;                                            ,[SK_PY_MonthID]&#xA;                                            ,[SK_RY_MonthID]&#xA;                                            ,[SK_VehicleID]&#xA;                                            ,[SK_PolicyID]      &#xA;                                            ,[SK_ProducerID]&#xA;                                            ,[SK_CarrierID]&#xA;                                            ,[SK_ProgramID]&#xA;                                            ,[BK_DriverID]               &#xA;                              &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                                </SQLTask:SqlTaskData>
                              </DTS:ObjectData>
                            </DTS:Executable>
                            <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{EB5335BD-C201-4CFB-98B0-DD52E029D081}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factPifVifMonthly table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Monthly AY CY PY RY Facts\SEQC Create Monthly AY CY PY RY fact tables\SEQC Create Complete Monthly fact tables\SQL create factPifVifMonthly table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                              <DTS:ObjectData>
                                <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                      &#xA;            SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED&#xA;          SELECT SK_CY_MonthID, SK_AY_MonthID, SK_RY_MonthID, SK_VehicleID, SK_PolicyID, SK_RatedDriverID ,SK_CoverageID, SK_ProducerID, SK_CarrierID, SK_ProgramID, BK_PolicyTermID, BK_VehicleID, fd.BK_DriverID&#xA;          INTO [DataMart].[factPifVifMonthly]&#xA;          FROM [DataMart].[factPremiumsMonthly] as fm WITH (NOLOCK) &#xA;          left join [DataMart].[factlessDrivers] as fd on fm.SK_DriversID = fd.SK_DriversID &#xA;          WHERE EoM_InforceFlag = 1&#xA;          GROUP BY SK_CY_MonthID, SK_AY_MonthID, SK_RY_MonthID, SK_VehicleID, SK_PolicyID, SK_RatedDriverID ,SK_CoverageID, SK_ProducerID, SK_CarrierID, SK_ProgramID, BK_PolicyTermID, BK_VehicleID, fd.BK_DriverID           &#xA;          &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                                </SQLTask:SqlTaskData>
                              </DTS:ObjectData>
                            </DTS:Executable>
                            <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{402C3600-63FC-49F0-942B-3094EC4437D0}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factNewBusinessMonthly table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Monthly AY CY PY RY Facts\SEQC Create Monthly AY CY PY RY fact tables\SEQC Create Complete Monthly fact tables\SQL create factNewBusinessMonthly table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                              <DTS:ObjectData>
                                <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                      &#xA;                                          SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED&#xA;                                          -- factNewBusinessMonthly&#xA;                                          SELECT  dm.SK_MonthID AS SK_CY_MonthID&#xA;                                            ,dm.SK_MonthID AS SK_AY_MonthID&#xA;                                            ,dds.SK_PY_MonthID&#xA;                                            ,dm.SK_MonthID AS SK_RY_MonthID&#xA;                                            ,dds.SK_VehicleID&#xA;                                            ,dds.SK_PolicyID&#xA;                                            ,dds.SK_RatedDriverID&#xA;                                            ,dds.SK_DriversID&#xA;                                            ,dds.SK_ProducerID&#xA;                                            ,dds.SK_CarrierID&#xA;                                            ,ISNULL(pp.SK_ProgramID, -1) AS SK_ProgramID&#xA;                                            ,ISNULL(pp.SK_ProgramGroupID, -1) AS SK_ProgramGroupID&#xA;                                            ,dds.BK_PolicyTermID&#xA;                                            ,dimA.SK_AgencyOfficeID&#xA;                                            ,CAST(1 AS INT) AS NewBusiness&#xA;                                          INTO    [DataMart].[factNewBusinessMonthly]&#xA;                                          FROM    [Staging].[Periods] AS dds WITH ( NOLOCK )&#xA;                                          LEFT JOIN [DataMart].[dimMonth] AS dm WITH ( NOLOCK )&#xA;                                            ON dm.StartDate &lt;= EndorsementPeriodStartDate&#xA;                                             AND dm.EndDate &gt;= EndorsementPeriodStartDate&#xA;                                          LEFT JOIN [DataMart].[dimPolicy] AS pol&#xA;                                            ON pol.SK_PolicyID = dds.SK_PolicyID&#xA;                                          LEFT JOIN [Staging].[FlatCancels] AS ddfc&#xA;                                            ON dds.BK_PolicyTermID = ddfc.BK_PolicyTermID&#xA;                                          LEFT JOIN [DataMart].[dimEndorsement] AS e&#xA;                                            ON dds.BK_EndorsementID = e.[BK_EndorsementID]&#xA;                                          LEFT JOIN [Staging].[PolicyProgram] AS pp&#xA;                                            ON dds.SK_PolicyID = pp.SK_PolicyID&#xA;                                          LEFT JOIN [DataMart].[dimProducer] AS dimprod&#xA;                                            ON dimprod.BK_ProducerID = dds.BK_ProducerID&#xA;                                          LEFT JOIN DataMart.dimAgencyOffice dimA&#xA;                                            ON dimA.BK_AgencyOfficeID = dimprod.BK_OfficeID&#xA;                                          WHERE   dm.SK_MonthID IS NOT NULL&#xA;                                            AND pol.IsNewBusiness = 'Yes'&#xA;                                            AND ddfc.BK_PolicyTermID IS NULL&#xA;                                            AND dds.PolicyTermStatusID NOT IN ( 4, 5 ) -- Filter out not written/pending&#xA;                                            AND e.EndorsementTypeID IN ( 1 ) -- Filter out not written/pending             &#xA;                                          GROUP BY dm.SK_MonthID&#xA;                                            ,dds.SK_PY_MonthID&#xA;                                            ,dds.SK_VehicleID&#xA;                                            ,dds.SK_PolicyID&#xA;                                            ,dds.SK_DriversID&#xA;                                            ,dds.SK_RatedDriverID&#xA;                                            ,dds.SK_ProducerID&#xA;                                            ,dds.BK_PolicyTermID&#xA;                                            ,dds.SK_CarrierID&#xA;                                            ,ISNULL(pp.SK_ProgramID, -1)&#xA;                                            ,ISNULL(pp.SK_ProgramGroupID, -1)&#xA;                                            ,dimA.SK_AgencyOfficeID&#xA;                            &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                                </SQLTask:SqlTaskData>
                              </DTS:ObjectData>
                            </DTS:Executable>
                            <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{EC4A1678-7F96-4453-99B9-ED1DFD6537AB}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factRenewalsMonthly factRenewalsActualMonthly" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Monthly AY CY PY RY Facts\SEQC Create Monthly AY CY PY RY fact tables\SEQC Create Complete Monthly fact tables\SQL create factRenewalsMonthly factRenewalsActualMonthly" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                              <DTS:ObjectData>
                                <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                      &#xA;                                        SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED&#xA;                                        --1) Prepare proposed renewals facts&#xA;                                        SELECT &#xA;                                          dm.SK_MonthID as SK_CY_MonthID,&#xA;                                          dm.SK_MonthID as SK_AY_MonthID,&#xA;                                          dds.SK_PY_MonthID,&#xA;                                          dm.SK_MonthID as SK_RY_MonthID,&#xA;                                          dds.SK_PolicyID,&#xA;                                          dds.SK_ProducerID,&#xA;                                          dds.SK_CarrierID,&#xA;                                          ISNULL(pp.SK_ProgramID, -1) AS SK_ProgramID,&#xA;                                          dds.BK_PolicyTermID,  &#xA;                                          CAST(1 AS SMALLINT) as RenewalDue,  &#xA;                                          CAST(0 AS SMALLINT) as DNR&#xA;                                          --CASE WHEN endo.NoRenewal = 1 THEN CAST(1 AS SMALLINT) ELSE CAST(0 AS SMALLINT) END AS DNR&#xA;                                        INTO [DataMart].[factRenewalsMonthly]&#xA;                                        FROM [Staging].[Periods] AS dds WITH (NOLOCK) LEFT JOIN [DataMart].[dimMonth] AS dm WITH (NOLOCK)&#xA;                                          ON dm.StartDate &lt;= EndorsementPeriodEndDate AND dm.EndDate &gt;= EndorsementPeriodEndDate &#xA;                                          LEFT JOIN [Staging].[FlatCancels] AS ddfc WITH (NOLOCK) ON ddfc.BK_PolicyTermID = dds.BK_PolicyTermID&#xA;                                          LEFT JOIN [Staging].[PolicyProgram] AS pp ON dds.SK_PolicyID = pp.SK_PolicyID&#xA;                                        WHERE dm.SK_MonthID IS NOT null&#xA;                                         AND DATEDIFF(dd, dds.ExpirationDate, dds.EndorsementPeriodEndDate) = 0  &#xA;                                          AND dds.EndorsementPeriodEndDate &lt;&gt; dds.EndorsementPeriodStartDate&#xA;                                          AND ddfc.BK_PolicyTermID IS NULL&#xA;                                          AND dds.BK_NextPolicyTermID &gt; 0&#xA;                                        GROUP BY dm.SK_MonthID,&#xA;                                           dds.SK_PY_MonthID,&#xA;                                           dds.SK_PolicyID,&#xA;                                           dds.SK_ProducerID,&#xA;                                           dds.BK_PolicyTermID,&#xA;                                           dds.SK_CarrierID,&#xA;                                          ISNULL(pp.SK_ProgramID, -1)&#xA;                                        order by dds.BK_PolicyTermID              &#xA;           &#xA;                                        --2) Prepare actual renewal facts&#xA;                                        SELECT &#xA;                                         dm.SK_MonthID as SK_CY_MonthID,&#xA;                                         dm.SK_MonthID as SK_AY_MonthID,&#xA;                                         dds.SK_PY_MonthID,&#xA;                                         dm.SK_MonthID as SK_RY_MonthID,&#xA;                                         dds.SK_PolicyID,&#xA;                                         dds.SK_ProducerID,&#xA;                                         dds.SK_CarrierID,&#xA;                                         ISNULL(pp.SK_ProgramID, -1) AS SK_ProgramID,&#xA;                                         CAST(1 AS SMALLINT) as Renewal,&#xA;                                         dds.BK_PolicyTermID  &#xA;                                        INTO [DataMart].[factRenewalsActualMonthly]&#xA;                                        FROM [Staging].[Periods] AS dds WITH (NOLOCK) LEFT JOIN [DataMart].[dimMonth] AS dm WITH (NOLOCK) &#xA;                                         ON dm.StartDate &lt;= EndorsementPeriodStartDate AND dm.EndDate &gt;= EndorsementPeriodStartDate             &#xA;                                         AND dds.EndorsementPeriodEndDate &lt;&gt; dds.EndorsementPeriodStartDate&#xA;                                         LEFT JOIN [Staging].[FlatCancels] AS ddfc WITH (NOLOCK) ON ddfc.BK_PolicyTermID = dds.BK_PolicyTermID  &#xA;                                         LEFT JOIN [Staging].[PolicyProgram] AS pp ON dds.SK_PolicyID = pp.SK_PolicyID&#xA;                                        WHERE dm.SK_MonthID IS NOT null&#xA;                                         AND dds.EffectiveDate = dds.EndorsementPeriodStartDate&#xA;                                         AND ddfc.BK_PolicyTermID IS NULL&#xA;                                         AND EXISTS &#xA;                                          (SELECT TOP 1 1 FROM [Staging].[Periods] AS pt WHERE dds.BK_PolicyTermID = pt.BK_NextPolicyTermID AND pt.BK_NextPolicyTermID &gt; 0)&#xA;                                         AND SK_EndorsementDateID &lt; SK_EndorsementEndDateID&#xA;                                         AND dds.PolicyTermStatusID NOT IN(4, 5) -- Filter out not written/pending&#xA;                                        GROUP BY dm.SK_MonthID,&#xA;                                         dds.SK_PY_MonthID,&#xA;                                         dds.SK_PolicyID,&#xA;                                         dds.SK_ProducerID,&#xA;                                         dds.BK_PolicyTermID,&#xA;                                         dds.SK_CarrierID,&#xA;                                         ISNULL(pp.SK_ProgramID, -1)&#xA;                         &#xA;                         &#xA;                                        --3) Prepare actual renewal carriover facts&#xA;                                        SELECT &#xA;                                          dm.SK_MonthID as SK_CY_MonthID,&#xA;                                          dm.SK_MonthID as SK_AY_MonthID,&#xA;                                          dds.SK_PY_MonthID,&#xA;                                          dm.SK_MonthID as SK_RY_MonthID,            &#xA;                                          dds.SK_PolicyID,&#xA;                                          dds.SK_ProducerID,&#xA;                                          dds.SK_CarrierID,&#xA;                                          ISNULL(pp.SK_ProgramID, -1) AS SK_ProgramID,&#xA;                                          CAST(1 AS SMALLINT) as CarrioverRenewal,&#xA;                                          dds.BK_PolicyTermID  &#xA;                                        INTO [DataMart].[factRenewalsCarrioverActualMonthly]&#xA;                                        FROM (SELECT [BK_EndorsementID] FROM [DataMart].[dimEndorsement]  Where EndorsementTypeID = 2) as renew&#xA;                                          JOIN [Staging].Periods AS dds WITH (NOLOCK) ON dds.BK_PolicyTermID = renew.[BK_EndorsementID]&#xA;                                          JOIN [DataMart].[dimMonth] AS dm WITH (NOLOCK) &#xA;                                          ON dm.StartDate &lt;= EndorsementPeriodStartDate AND dm.EndDate &gt;= EndorsementPeriodStartDate             &#xA;                                          AND dds.EndorsementPeriodEndDate &lt;&gt; dds.EndorsementPeriodStartDate      &#xA;                                          LEFT JOIN [Staging].[FlatCancels] AS ddfc WITH (NOLOCK) ON ddfc.BK_PolicyTermID = dds.BK_PolicyTermID              &#xA;                                          LEFT JOIN [Staging].[PolicyProgram] AS pp ON dds.SK_PolicyID = pp.SK_PolicyID&#xA;                                        WHERE dm.SK_MonthID IS NOT null  &#xA;                                          AND dds.EffectiveDate = dds.EndorsementPeriodStartDate&#xA;                                          AND ddfc.BK_PolicyTermID IS NULL            &#xA;                                          AND SK_EndorsementDateID &lt; SK_EndorsementEndDateID             &#xA;                                          AND dds.PolicyTermStatusID NOT IN (4, 5) -- Filter out not written/pending&#xA;                                          AND NOT EXISTS (SELECT TOP 1 1 FROM [Staging].[Periods] AS pt WHERE dds.BK_PolicyTermID = pt.BK_NextPolicyTermID)&#xA;                                        GROUP BY dm.SK_MonthID,&#xA;                                          dds.SK_PY_MonthID,&#xA;                                          dds.SK_PolicyID,&#xA;                                          dds.SK_ProducerID,&#xA;                                          dds.BK_PolicyTermID,&#xA;                                          dds.SK_CarrierID,&#xA;                                          ISNULL(pp.SK_ProgramID, -1)&#xA;          &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                                </SQLTask:SqlTaskData>
                              </DTS:ObjectData>
                            </DTS:Executable>
                          </DTS:Executables>
                          <DTS:PrecedenceConstraints>
                            <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{7B8CB619-B683-4CBE-836C-66E62C31A844}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Monthly AY CY PY RY Facts\SEQC Create Monthly AY CY PY RY fact tables\SEQC Create Complete Monthly fact tables\SQL create factPremiumsMonthly table" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL create factPremiumsMonthly table_To_SQL create factDriverCountMonthly table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Monthly AY CY PY RY Facts\SEQC Create Monthly AY CY PY RY fact tables\SEQC Create Complete Monthly fact tables.PrecedenceConstraints[Constraint_SQL create factPremiumsMonthly table_To_SQL create factDriverCountMonthly table]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Monthly AY CY PY RY Facts\SEQC Create Monthly AY CY PY RY fact tables\SEQC Create Complete Monthly fact tables\SQL create factDriverCountMonthly table">
                            </DTS:PrecedenceConstraint>
                            <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{E61812FF-02BF-4352-B058-135A16F5D840}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Monthly AY CY PY RY Facts\SEQC Create Monthly AY CY PY RY fact tables\SEQC Create Complete Monthly fact tables\SQL create factPremiumsMonthly table" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL create factPremiumsMonthly table_To_SQL create factPifVifMonthly table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Monthly AY CY PY RY Facts\SEQC Create Monthly AY CY PY RY fact tables\SEQC Create Complete Monthly fact tables.PrecedenceConstraints[Constraint_SQL create factPremiumsMonthly table_To_SQL create factPifVifMonthly table]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Monthly AY CY PY RY Facts\SEQC Create Monthly AY CY PY RY fact tables\SEQC Create Complete Monthly fact tables\SQL create factPifVifMonthly table">
                            </DTS:PrecedenceConstraint>
                          </DTS:PrecedenceConstraints>
                          <DTS:PropertyExpression DTS:Name="Disable">!@[User::config_Process_MonthlyDataMart]</DTS:PropertyExpression>
                        </DTS:Executable>
                        <DTS:Executable DTS:CreationName="STOCK:SEQUENCE" DTS:DTSID="{E381463D-DC20-4281-971E-DB2CF9BD62CC}" DTS:ExecutableType="STOCK:SEQUENCE" DTS:LocaleID="-1" DTS:ObjectName="SEQC Create empty placeholder Monthly fact tables" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Monthly AY CY PY RY Facts\SEQC Create Monthly AY CY PY RY fact tables\SEQC Create empty placeholder Monthly fact tables">
                          <DTS:Executables>
                            <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{09698612-4B1B-4DD5-94B6-BF08D154993A}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create empty factPremiumsMonthly table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Monthly AY CY PY RY Facts\SEQC Create Monthly AY CY PY RY fact tables\SEQC Create empty placeholder Monthly fact tables\SQL create empty factPremiumsMonthly table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                              <DTS:ObjectData>
                                <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                      &#xA;                    CREATE TABLE [DataMart].[factPremiumsMonthly]&#xA;                     (&#xA;                      [SK_CY_MonthID] [INT] NULL&#xA;                     ,[SK_AY_MonthID] [INT] NULL&#xA;                     ,[SK_PY_MonthID] [INT] NULL&#xA;                     ,[SK_RY_MonthID] [INT] NULL&#xA;                     ,[SK_VehicleID] [INT] NULL&#xA;                     ,[SK_PolicyID] [INT] NULL&#xA;                     ,[SK_RatedDriverID] [INT] NULL&#xA;                     ,[SK_DriversID] [INT] NULL&#xA;                     ,[SK_CoverageID] [INT] NULL&#xA;                     ,[SK_ProducerID] [INT] NULL&#xA;                     ,[SK_CarrierID] [INT] NULL&#xA;                     ,[SK_ProgramID] [INT] NULL&#xA;                     ,[SK_ProgramGroupID] [INT] NULL&#xA;                     ,[SK_AgencyOfficeID] [INT] NULL&#xA;                     ,[BK_EndorsementPeriodID] [INT] NULL&#xA;                     ,[BK_PolicyTermID] [INT] NULL&#xA;                     ,[BK_VehicleID] [INT] NULL&#xA;                     ,[WP] [DECIMAL](21, 10) NULL&#xA;                     ,[WE] [INT] NULL&#xA;                     ,[EP] [DECIMAL](20, 10) NULL&#xA;                     ,[EE] [INT] NULL&#xA;                     ,[EoM_InforceFlag] [TINYINT] NULL&#xA;                     )            &#xA;                   &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                                </SQLTask:SqlTaskData>
                              </DTS:ObjectData>
                            </DTS:Executable>
                            <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{DD1B477A-5E0F-49CF-94E0-5F186A3C091B}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create empty factPifVifMonthly" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Monthly AY CY PY RY Facts\SEQC Create Monthly AY CY PY RY fact tables\SEQC Create empty placeholder Monthly fact tables\SQL create empty factPifVifMonthly" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                              <DTS:ObjectData>
                                <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                      &#xA;            CREATE TABLE [DataMart].[factPifVifMonthly]&#xA;            (&#xA;             [SK_CY_MonthID] [int] NULL,&#xA;             [SK_AY_MonthID] [int] NULL,&#xA;             [SK_RY_MonthID] [int] NULL,&#xA;             [SK_VehicleID] [int] NULL,&#xA;             [SK_PolicyID] [int] NULL,&#xA;             [SK_RatedDriverID] [int] NULL,&#xA;             [SK_DriversID] [int] NULL,&#xA;             [SK_CoverageID] [int] NULL,&#xA;             [SK_ProducerID] [int] NULL,&#xA;             [SK_CarrierID] [int] NULL,&#xA;                          [SK_ProgramID] [int] NULL,&#xA;             [BK_PolicyTermID] [int] NULL,&#xA;             [BK_VehicleID] [int] NULL,&#xA;                          [BK_DriverID] [int] NULL&#xA;            )             &#xA;            &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                                </SQLTask:SqlTaskData>
                              </DTS:ObjectData>
                            </DTS:Executable>
                            <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{62341927-3DE4-4F81-8D8A-7BF21072A754}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create empty factNewBusinessMonthly" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Monthly AY CY PY RY Facts\SEQC Create Monthly AY CY PY RY fact tables\SEQC Create empty placeholder Monthly fact tables\SQL create empty factNewBusinessMonthly" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                              <DTS:ObjectData>
                                <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                                &#xA;                    CREATE TABLE [DataMart].[factNewBusinessMonthly]&#xA;                     (&#xA;                      [SK_CY_MonthID] [INT] NULL&#xA;                     ,[SK_AY_MonthID] [INT] NULL&#xA;                     ,[SK_PY_MonthID] [INT] NULL&#xA;                     ,[SK_RY_MonthID] [INT] NULL&#xA;                     ,[SK_VehicleID] [INT] NULL&#xA;                     ,[SK_PolicyID] [INT] NULL&#xA;                     ,[SK_RatedDriverID] [INT] NULL&#xA;                     ,[SK_DriversID] [INT] NULL&#xA;                     ,[SK_ProducerID] [INT] NULL&#xA;                     ,[SK_CarrierID] [INT] NULL&#xA;                     ,[SK_ProgramID] [INT] NULL&#xA;                     ,[SK_ProgramGroupID] [INT] NULL&#xA;                     ,[BK_PolicyTermID] [INT] NULL&#xA;                     ,[SK_AgencyOfficeID] [INT] NULL&#xA;                     ,[NewBusiness] [INT] NULL&#xA;                     )            &#xA;            &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                                </SQLTask:SqlTaskData>
                              </DTS:ObjectData>
                            </DTS:Executable>
                            <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{FC043CDF-53F2-4DF2-A7A3-3DC9E0362EDB}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create empty factRenewalsMonthly factRenewalsActualMonthly" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Monthly AY CY PY RY Facts\SEQC Create Monthly AY CY PY RY fact tables\SEQC Create empty placeholder Monthly fact tables\SQL create empty factRenewalsMonthly factRenewalsActualMonthly" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                              <DTS:ObjectData>
                                <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                                &#xA;           --1) Prepare proposed renewals facts &#xA;           CREATE TABLE [DataMart].[factRenewalsMonthly]&#xA;           (&#xA;            [SK_CY_MonthID] [int] NULL,&#xA;            [SK_AY_MonthID] [int] NULL,&#xA;            [SK_PY_MonthID] [int] NULL,&#xA;            [SK_RY_MonthID] [int] NULL,&#xA;            [SK_PolicyID] [int] NULL,&#xA;            [SK_ProducerID] [int] NULL,&#xA;            [SK_CarrierID] [int] NULL,&#xA;                        [SK_ProgramID] [int] NULL,&#xA;            [BK_PolicyTermID] [int] NULL,&#xA;            [RenewalDue] [smallint] NULL,&#xA;            [DNR] [smallint] NULL&#xA;           )           &#xA;           &#xA;           --2) Prepare actual renewal facts&#xA;           CREATE TABLE [DataMart].[factRenewalsActualMonthly]&#xA;           (&#xA;            [SK_CY_MonthID] [int] NULL,&#xA;            [SK_AY_MonthID] [int] NULL,&#xA;            [SK_PY_MonthID] [int] NULL,&#xA;            [SK_RY_MonthID] [int] NULL,&#xA;            [SK_PolicyID] [int] NULL,&#xA;            [SK_ProducerID] [int] NULL,&#xA;            [SK_CarrierID] [int] NULL,&#xA;                        [SK_ProgramID] [int] NULL,&#xA;            [Renewal] [smallint] NULL,&#xA;            [BK_PolicyTermID] [int] NULL&#xA;           )&#xA;                      &#xA;           --3) Prepare actual renewal carriover facts&#xA;           CREATE TABLE [DataMart].[factRenewalsCarrioverActualMonthly]&#xA;           (&#xA;            [SK_CY_MonthID] [int] NULL,&#xA;            [SK_AY_MonthID] [int] NULL,&#xA;            [SK_PY_MonthID] [int] NULL,&#xA;            [SK_RY_MonthID] [int] NULL,&#xA;            [SK_PolicyID] [int] NULL,&#xA;            [SK_ProducerID] [int] NULL,&#xA;            [SK_CarrierID] [int] NULL,&#xA;                        [SK_ProgramID] [int] NULL,&#xA;            [RenewalCarriover] [smallint] NULL,&#xA;            [BK_PolicyTermID] [int] NULL&#xA;           )&#xA;                      &#xA;           &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                                </SQLTask:SqlTaskData>
                              </DTS:ObjectData>
                            </DTS:Executable>
                            <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{C2706822-A512-4170-B2AF-7F2738819672}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create empty factDriverCountMonthly" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Monthly AY CY PY RY Facts\SEQC Create Monthly AY CY PY RY fact tables\SEQC Create empty placeholder Monthly fact tables\SQL create empty factDriverCountMonthly" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                              <DTS:ObjectData>
                                <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                      &#xA;                                    CREATE TABLE [DataMart].[factDriverCountMonthly](&#xA;                                     [SK_CY_MonthID] [int] NULL,&#xA;                                     [SK_AY_MonthID] [int] NULL,&#xA;                                     [SK_PY_MonthID] [int] NULL,&#xA;                                     [SK_RY_MonthID] [int] NULL,&#xA;                                     [SK_VehicleID] [int] NULL,&#xA;                                     [SK_PolicyID] [int] NULL,&#xA;                                     [SK_ProducerID] [int] NULL,&#xA;                                     [SK_CarrierID] [int] NULL,&#xA;                                      [SK_ProgramID] [int] NULL,&#xA;                                     [BK_DriverID] [int] NULL&#xA;                                    )      &#xA;            &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                                </SQLTask:SqlTaskData>
                              </DTS:ObjectData>
                            </DTS:Executable>
                          </DTS:Executables>
                          <DTS:PropertyExpression DTS:Name="Disable">@[User::config_Process_MonthlyDataMart]</DTS:PropertyExpression>
                        </DTS:Executable>
                      </DTS:Executables>
                    </DTS:Executable>
                  </DTS:Executables>
                </DTS:Executable>
              </DTS:Executables>
              <DTS:PrecedenceConstraints>
                <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{FE23EA79-9ED8-4CBD-9957-6736ACD1319A}" DTS:EvalOp="3" DTS:Expression="@[User::ProcessRatemaking]==1" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Fake Container" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SEQC Fake Container_To_SEQC Create Daily Facts" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables.PrecedenceConstraints[Constraint_SEQC Fake Container_To_SEQC Create Daily Facts]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Daily Facts">
                </DTS:PrecedenceConstraint>
                <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{B6926212-0FAC-4A59-BD59-7F3C5EE9A50F}" DTS:EvalOp="3" DTS:Expression="@[User::ProcessRatemaking]==1" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Fake Container" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SEQC Fake Container_To_SEQC Create Monthly AY CY PY RY Facts" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables.PrecedenceConstraints[Constraint_SEQC Fake Container_To_SEQC Create Monthly AY CY PY RY Facts]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables\SEQC Create Monthly AY CY PY RY Facts">
                </DTS:PrecedenceConstraint>
              </DTS:PrecedenceConstraints>
            </DTS:Executable>
            <DTS:Executable DTS:CreationName="STOCK:SEQUENCE" DTS:DTSID="{E2C09786-181C-486F-8F7B-2506E3FEBD73}" DTS:ExecutableType="STOCK:SEQUENCE" DTS:LocaleID="-1" DTS:ObjectName="SEQC Create Transactional Facts" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts">
              <DTS:Executables>
                <DTS:Executable DTS:CreationName="STOCK:SEQUENCE" DTS:DTSID="{6385F040-7A65-4DDC-ADB7-5B64372DF98E}" DTS:ExecutableType="STOCK:SEQUENCE" DTS:LocaleID="-1" DTS:ObjectName="SEQC Create Transactional fact tables" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables">
                  <DTS:Executables>
                    <DTS:Executable DTS:CreationName="STOCK:SEQUENCE" DTS:DTSID="{8153A5DB-2242-4BA0-8462-B75090434EA4}" DTS:ExecutableType="STOCK:SEQUENCE" DTS:LocaleID="-1" DTS:ObjectName="SEQC Create Complete Transactional fact tables" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create Complete Transactional fact tables">
                      <DTS:Executables>
                        <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{66102A24-2606-4457-A180-35FB9BBADF1A}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factQuotePremiums table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create Complete Transactional fact tables\SQL create factQuotePremiums table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                          <DTS:ObjectData>
                            <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                      &#xA;                                          DECLARE @Uds INT = - 1;&#xA;                                          DECLARE @ExcessDriver INT = - 2;&#xA;                                          DECLARE @YesStr VARCHAR(3) = 'Yes';&#xA;                                          DECLARE @NoStr VARCHAR(3) = 'No';&#xA;                                          DECLARE @IsIncremental INT = ?;&#xA;                                          DECLARE @UpdateDate DATETIME2 = ?;&#xA;&#xA;                                          IF @IsIncremental = 0 SET @UpdateDate = '19000101'&#xA;&#xA;                                          DECLARE @UpdateDateID int = CAST(CONVERT(varchar(10), @UpdateDate, 112) AS INT)&#xA;&#xA;                                          -- Prepare factQuotePremium&#xA;                                          DELETE FROM [DataMart].[factQuotePremium]&#xA;                                          WHERE SK_TransactionDateID &gt;= @UpdateDateID&#xA;&#xA;                                          INSERT INTO [DataMart].[factQuotePremium]&#xA;                                                     ([SK_CoverageID]&#xA;                                                     ,[SK_TransactionDateID]&#xA;                                                     ,[SK_TransactionMonthID]&#xA;                                                     ,[SK_PolicyId]&#xA;                                                     ,[SK_VehicleID]&#xA;                                                     ,[SK_CarrierID]&#xA;                                                     ,[SK_ProgramId]&#xA;                                                     ,[BK_QuoteID]&#xA;                                                     ,[SK_RatedDriverID]&#xA;                                                     ,[SK_ProducerID]&#xA;                                                     ,[Premium]&#xA;                                                     ,[DriverCount]&#xA;                                                     ,[Completed]&#xA;                                                     ,[PolicyCreated]&#xA;                                                     ,[QuoteOriginID])&#xA;                                          SELECT ISNULL(dc.SK_CoverageID, @Uds) AS SK_CoverageID&#xA;                                           ,stg_q.SK_DateID AS SK_TransactionDateID&#xA;                                           ,CAST((LEFT(CAST(stg_q.SK_DateID AS VARCHAR), 6)) AS INT) AS SK_TransactionMonthID&#xA;                                           ,CAST(qpt.SK_PolicyId AS Int) AS SK_PolicyId&#xA;                                           ,CAST(qv.SK_VehicleID AS Int) AS SK_VehicleID&#xA;                                           ,stg_q.SK_CarrierID AS SK_CarrierID&#xA;                                           ,ISNULL(prog.SK_ProgramID, @Uds) AS SK_ProgramId&#xA;                                           ,qpt.BK_QuoteID AS BK_QuoteID&#xA;                                           ,CAST(ISNULL(drivers.SK_DriverId, @ExcessDriver) AS Int) AS SK_RatedDriverID&#xA;                                           ,SK_ProducerID AS SK_ProducerID&#xA;                                           ,qvc.Premium AS Premium&#xA;                                           ,ISNULL(drivers.DriverCount, 0) AS DriverCount&#xA;                                           ,IIF (stg_q.Completed = @YesStr, 1, 0) AS Completed&#xA;                                           ,IIF (stg_q.PolicyCreated = @YesStr, 1, 0) AS PolicyCreated&#xA;                                            ,stg_q.QuoteOriginID&#xA;                                          FROM [DataMart].[dimQuotePolicyTerm] qpt&#xA;                                          JOIN [Staging].[Quote] stg_q ON stg_q.BK_QuoteID = qpt.BK_QuoteID&#xA;                                          JOIN [DataMart].[dimQuoteVehicle] qv ON qpt.BK_PolicyId = qv.BK_QuotePolicyTermId&#xA;                                          JOIN [Extract].P1_QuoteVehicleCoverage qvc ON qvc.QuoteVehicleId = qv.BK_QuoteVehicleId&#xA;                                          LEFT JOIN [DataMart].[dimCoverage] dc ON qvc.CoverageTypeId = dc.BK_CoverageID&#xA;                                          LEFT JOIN [DataMart].[dimProgram] prog ON prog.BK_ProgramID = qpt.BK_ProgramID&#xA;                                          OUTER APPLY (&#xA;                                           SELECT MIN(qd.SK_DriverID) AS SK_DriverId&#xA;                                            ,COUNT(*) AS DriverCount&#xA;                                           FROM [Staging].[QuoteVehicleCoverage_DriverID] qd&#xA;                                           WHERE qd.QuoteVehicleCoverageId = qvc.QuoteVehicleCoverageId&#xA;                                           ) AS drivers   &#xA;                                          WHERE stg_q.SK_DateID &gt;= @UpdateDateID&#xA;                                      &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                              <SQLTask:ParameterBinding SQLTask:DataType="17" SQLTask:DtsVariableName="User::IsIncremental" SQLTask:ParameterDirection="Input" SQLTask:ParameterName="0" SQLTask:ParameterSize="0">
                              </SQLTask:ParameterBinding>
                              <SQLTask:ParameterBinding SQLTask:DataType="7" SQLTask:DtsVariableName="User::IncrementalStartDate" SQLTask:ParameterDirection="Input" SQLTask:ParameterName="1" SQLTask:ParameterSize="0">
                              </SQLTask:ParameterBinding>
                            </SQLTask:SqlTaskData>
                          </DTS:ObjectData>
                        </DTS:Executable>
                        <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{66D97E6B-828F-4BC5-BF8D-278DFFCD8F88}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create Transactional EP EE base" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create Complete Transactional fact tables\SQL create Transactional EP EE base" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                          <DTS:ObjectData>
                            <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                      &#xA;                                        DECLARE @CurrentDate DATETIME2 = GETDATE()&#xA;                                        DECLARE @CurrentDateID int = CAST(CONVERT(varchar(10), @CurrentDate, 112) AS INT)&#xA;                                        DECLARE @MaxDate DATETIME2&#xA;                                        DECLARE @IsIncremental INT = ?;&#xA;                                        DECLARE @UpdateDate DATETIME2 = ?;&#xA;&#xA;                                        IF @IsIncremental = 0 SET @UpdateDate = '19000101'&#xA;&#xA;                                        DECLARE @UpdateDateID int = CAST(CONVERT(varchar(10), @UpdateDate, 112) AS INT)&#xA;&#xA;                                        IF OBJECT_ID('tempdb..#PeriodIDs') IS NOT NULL DROP TABLE #PeriodIDs&#xA; &#xA;                                        CREATE TABLE #PeriodIDs&#xA;                                        (&#xA;                                          PeriodID int NULL&#xA;                                        )&#xA;&#xA;                                        UPDATE Staging.PeriodsData&#xA;                                        SET PeriodActiveEndDate = @CurrentDate&#xA;                                        OUTPUT INSERTED.PeriodID INTO #PeriodIDs &#xA;                                        WHERE PeriodActiveEndDateRaw is NULL AND ExpirationDate &gt; @CurrentDate&#xA;&#xA;                                        INSERT INTO #PeriodIDs&#xA;                                        SELECT DISTINCT PeriodID&#xA;                                          FROM [Extract].[P1_Period] p&#xA;                                          WHERE p.PeriodID NOT IN (SELECT PeriodID FROM #PeriodIDs)&#xA;&#xA; &#xA;                                        ;WITH PeriodData AS&#xA;                                        (&#xA;                                        SELECT &#xA;                                        p.PeriodID,&#xA;                                        p.TriggeringEndorsementID,&#xA;                                        p.PolicyTermID,&#xA;                                        p.PreviousPeriodID,&#xA;                                        pnext.PeriodID AS NextPeriodID,&#xA;                                        PeriodStartDate.LocalFlooredDatetime AS PeriodActiveStartDate,&#xA;                                        ISNULL(PeriodEndDate.LocalFlooredDatetime, &#xA;                                          CASE WHEN PolicyExpiration.LocalFlooredDatetime &lt;= @CurrentDate&#xA;                                            THEN PolicyExpiration.LocalFlooredDatetime ELSE @CurrentDate END&#xA;                                          ) AS PeriodActiveEndDate,&#xA;                                        PolicyEffective.LocalFlooredDatetime AS EffectiveDate,&#xA;                                        PolicyExpiration.LocalFlooredDatetime AS ExpirationDate,&#xA;                                        proggrp.TimeZone,&#xA;                                        dcarr.SK_CarrierID,&#xA;                                        PeriodEndDate.LocalFlooredDatetime AS PeriodActiveEndDateRaw&#xA;&#xA;                                        FROM [Extract].[P1_Period] AS p &#xA;                                        LEFT JOIN [Extract].[P1_Period] AS pnext ON pnext.PreviousPeriodID = p.PeriodID&#xA;                                        JOIN [Extract].[P1_PolicyTerm] AS pt ON pt.PolicyTermId = p.PolicyTermID&#xA;                                        JOIN [Extract].[P1_Program] AS prog ON prog.ProgramID = pt.ProgramID&#xA;                                        JOIN [Extract].[P1_ProgramGroup] AS proggrp ON prog.ProgramGroupID = proggrp.ProgramGroupID&#xA;                                        JOIN [DataMart].[dimCarrier] AS dcarr ON dcarr.BK_CarrierID = prog.CarrierID&#xA;                                        CROSS APPLY dbo.fGetUtcToLocalDatetimeConverter(proggrp.TimeZone, p.PeriodActiveStartDate) AS PeriodStartDate&#xA;                                        CROSS APPLY dbo.fGetUtcToLocalDatetimeConverter(proggrp.TimeZone, pt.EffectiveDate) AS PolicyEffective&#xA;                                        CROSS APPLY dbo.fGetUtcToLocalDatetimeConverter(proggrp.TimeZone, pt.ExpirationDate) AS PolicyExpiration&#xA;                                        OUTER APPLY dbo.fGetUtcToLocalDatetimeConverter(proggrp.TimeZone,  p.PeriodActiveEndDate) AS PeriodEndDate&#xA;                                        )&#xA;                                        MERGE Staging.PeriodsData AS TGT&#xA;                                        USING  (SELECT * FROM PeriodData)&#xA;                                        AS Periods&#xA;                                          ON Periods.PeriodID = TGT.PeriodId&#xA;                                        WHEN MATCHED THEN UPDATE&#xA;                                          SET TGT.TriggeringEndorsementID = Periods.TriggeringEndorsementID, &#xA;                                          TGT.PreviousPeriodID  = Periods.PreviousPeriodID,&#xA;                                          TGT.NextPeriodID   = Periods.NextPeriodID,&#xA;                                          TGT.PeriodActiveStartDate = Periods.PeriodActiveStartDate,&#xA;                                          TGT.PeriodActiveEndDate  = Periods.PeriodActiveEndDate,&#xA;                                          TGT.EffectiveDate   = Periods.EffectiveDate,&#xA;                                          TGT.ExpirationDate   = Periods.ExpirationDate,&#xA;                                          TGT.TimeZone    = Periods.TimeZone,&#xA;                                          TGT.SK_CarrierID   = Periods.SK_CarrierID,&#xA;                                          TGT.PeriodActiveEndDateRaw  = Periods.PeriodActiveEndDateRaw&#xA;                                        WHEN NOT MATCHED THEN&#xA;                                        INSERT&#xA;                                          (PeriodID, &#xA;                                          TriggeringEndorsementID, &#xA;                                          PolicyTermID, &#xA;                                          PreviousPeriodID, &#xA;                                          NextPeriodID, &#xA;                                          PeriodActiveStartDate, &#xA;                                          PeriodActiveEndDate, &#xA;                                          EffectiveDate, &#xA;                                          ExpirationDate, &#xA;                                          TimeZone, &#xA;                                          SK_CarrierID,&#xA;                                          PeriodActiveEndDateRaw)&#xA;                                        VALUES&#xA;                                          (PeriodID, &#xA;                                          TriggeringEndorsementID, &#xA;                                          PolicyTermID, &#xA;                                          PreviousPeriodID, &#xA;                                          NextPeriodID, &#xA;                                          PeriodActiveStartDate, &#xA;                                          PeriodActiveEndDate, &#xA;                                          EffectiveDate, &#xA;                                          ExpirationDate, &#xA;                                          TimeZone, &#xA;                                          SK_CarrierID,&#xA;                                          PeriodActiveEndDateRaw);&#xA;&#xA;                                          TRUNCATE TABLE Staging.TempEndorsementPeriodIDs&#xA;&#xA;                                        ;WITH EndorsementPeriodData AS&#xA;                                        (&#xA;                                        SELECT ep.PeriodID AS PeriodID,&#xA;                                          ep.EndorsementID AS EndorsementID,&#xA;                                          ep.EndorsementPeriodID,&#xA;                                          CASE WHEN ept.PolicyTermStatusID IN (4, 5) THEN 0 ELSE ep.PolicyActive END AS PolicyActive, &#xA;                                          EndoStartDate.LocalFlooredDatetime AS EndorsementPeriodStartDate,&#xA;                                          EndoEndDate.LocalFlooredDatetime AS EndorsementPeriodEndDate&#xA;&#xA;                                        FROM [Extract].[P1_EndorsementPeriod] AS ep&#xA;                                          JOIN [Extract].[P1_EndorsementPolicyTerm] AS ept ON  ep.EndorsementID = ept.EndorsementID&#xA;                                          JOIN Staging.PeriodsData AS p &#xA;                                              ON ep.PeriodID = p.PeriodID&#xA;                                          CROSS APPLY dbo.fGetUtcToLocalDatetimeConverter(p.TimeZone, ep.EndorsementPeriodStartDate) AS EndoStartDate&#xA;                                          CROSS APPLY dbo.fGetUtcToLocalDatetimeConverter(p.TimeZone, ep.EndorsementPeriodEndDate) AS EndoEndDate&#xA;                                        )&#xA;                                        MERGE Staging.EndorsementPeriodsData AS TGT&#xA;                                        USING (SELECT * FROM EndorsementPeriodData)&#xA;                                        AS EndorsementPeriods&#xA;                                          ON EndorsementPeriods.EndorsementPeriodID = TGT.EndorsementPeriodID&#xA;                                        WHEN MATCHED THEN &#xA;                                        UPDATE&#xA;                                          SET TGT.PolicyActive = EndorsementPeriods.PolicyActive,&#xA;                                          TGT.EndorsementPeriodStartDate = EndorsementPeriods.EndorsementPeriodStartDate,&#xA;                                          TGT.EndorsementPeriodEndDate = EndorsementPeriods.EndorsementPeriodEndDate&#xA;                                        WHEN NOT MATCHED THEN&#xA;                                        INSERT&#xA;                                          (PeriodID,&#xA;                                          EndorsementID,&#xA;                                          EndorsementPeriodID,&#xA;                                          PolicyActive,&#xA;                                          EndorsementPeriodStartDate,&#xA;                                          EndorsementPeriodEndDate)&#xA;                                        VALUES&#xA;                                          (PeriodID,&#xA;                                          EndorsementID,&#xA;                                          EndorsementPeriodID,&#xA;                                          PolicyActive,&#xA;                                          EndorsementPeriodStartDate,&#xA;                                          EndorsementPeriodEndDate)&#xA;                                        OUTPUT INSERTED.EndorsementPeriodID INTO Staging.TempEndorsementPeriodIDs;&#xA;&#xA;&#xA;&#xA;                                        INSERT INTO Staging.TempEndorsementPeriodIDs(EndorsementPeriodID)&#xA;                                        select distinct epd.EndorsementPeriodID from #PeriodIDs p&#xA;                                          JOIN Staging.EndorsementPeriodsData epd&#xA;                                          ON p.PeriodID = epd.PeriodID&#xA;                                        WHERE epd.EndorsementPeriodID NOT IN (select EndorsementPeriodID from Staging.TempEndorsementPeriodIDs)&#xA;&#xA;                                        INSERT INTO Staging.TempEndorsementPeriodIDs(EndorsementPeriodID)&#xA;                                        select distinct EndorsementPeriodID from [Staging].[EndorsementPeriodIntervals]&#xA;                                        where IntervalEndDate &gt;= @UpdateDate &#xA;                                          AND EndorsementPeriodID NOT IN (select EndorsementPeriodID from Staging.TempEndorsementPeriodIDs)&#xA;&#xA;&#xA;                                        ;WITH EndorsementIntervalData&#xA;                                        AS&#xA;                                        (&#xA;                                        SELECT ep.EndorsementPeriodID&#xA;                                            ,dbo.fCrossingIntervalStart(PeriodActiveStartDate, PeriodActiveEndDate, EndorsementPeriodStartDate, EndorsementPeriodEndDate) AS IntervalStartDate&#xA;                                          ,dbo.fCrossingIntervalEnd(PeriodActiveStartDate, PeriodActiveEndDate, EndorsementPeriodStartDate, EndorsementPeriodEndDate) AS IntervalEndDate &#xA;                                        FROM [Staging].[EndorsementPeriodsData] AS ep&#xA;                                          JOIN Staging.PeriodsData AS p ON p.PeriodID = ep.PeriodID&#xA;                                        WHERE &#xA;                                          ep.EndorsementPeriodID IN (SELECT EndorsementPeriodID from Staging.TempEndorsementPeriodIDs)&#xA;                                          AND dbo.fCrossingIntervals(PeriodActiveStartDate, PeriodActiveEndDate, EndorsementPeriodStartDate, EndorsementPeriodEndDate) = 1&#xA;                                        ) &#xA;                                        MERGE Staging.EndorsementPeriodIntervals AS TGT&#xA;                                        USING  (SELECT * FROM EndorsementIntervalData)&#xA;                                        AS EndorsementIntervals&#xA;                                          ON EndorsementIntervals.EndorsementPeriodId = TGT.EndorsementPeriodId&#xA;                                        WHEN MATCHED THEN UPDATE&#xA;                                          SET TGT.IntervalStartDate = EndorsementIntervals.IntervalStartDate,&#xA;                                          TGT.IntervalEndDate   = EndorsementIntervals.IntervalEndDate&#xA;                                        WHEN NOT MATCHED THEN&#xA;                                        INSERT&#xA;                                          (EndorsementPeriodID,&#xA;                                          IntervalStartDate,&#xA;                                          IntervalEndDate) &#xA;                                        VALUES&#xA;                                          (EndorsementPeriodID,&#xA;                                          IntervalStartDate,&#xA;                                          IntervalEndDate);&#xA;&#xA;                                        DELETE FROM [Staging].[EndorsementDateSupport]&#xA;                                        WHERE SK_DateID &gt;= @UpdateDateID;&#xA;&#xA;                                        INSERT INTO  [Staging].[EndorsementDateSupport](EndorsementPeriodID, SK_DateID)&#xA;                                        SELECT ep_intervals.EndorsementPeriodID AS EndorsementPeriodID&#xA;                                          ,dd.SK_DateID&#xA;                                        FROM  Staging.EndorsementPeriodIntervals ep_intervals&#xA;                                          JOIN Staging.TempEndorsementPeriodIDs epPeriods&#xA;                                          ON ep_intervals.EndorsementPeriodID = epPeriods.EndorsementPeriodID&#xA;                                          CROSS JOIN [DataMart].[dimDate] dd&#xA;                                        WHERE &#xA;                                          dd.SK_DateID &gt;= @UpdateDateID&#xA;                                          AND ((&#xA;                                          dd.SK_DateID &lt; @CurrentDateID&#xA;                                          AND dd.SK_DateID &gt;= CAST(CONVERT(VARCHAR(10), ep_intervals.IntervalStartDate, 112) AS INT)&#xA;                                          AND dd.SK_DateID &lt; CAST(CONVERT(VARCHAR(10), ep_intervals.IntervalEndDate, 112) AS INT)&#xA;                                          )&#xA;                                          OR (&#xA;                                          dd.SK_DateID = @CurrentDateID&#xA;                                          AND dd.SK_DateID &gt;= CAST(CONVERT(VARCHAR(10), ep_intervals.IntervalStartDate, 112) AS INT)&#xA;                                          AND dd.SK_DateID &lt;= CAST(CONVERT(VARCHAR(10), ep_intervals.IntervalEndDate, 112) AS INT)&#xA;                                          ))&#xA;&#xA;                                        --4) Calculate for each Period:  1) ITD EP at Period start, 2) ITD WP at Period End, 3) EP for each Period for given Report Period dates&#xA;                                        ;WITH BaseEPEE AS&#xA;                                        (&#xA;                                        SELECT  p.PeriodID AS PeriodID,&#xA;                                          p.TriggeringEndorsementID,&#xA;                                          p.PeriodActiveStartDate,&#xA;                                          p.SK_CarrierID,&#xA;                                          p.PolicyTermID AS BK_PolicyTermID,&#xA;                                          ev.SK_VehicleID,&#xA;                                          pol.SK_PolicyID,&#xA;                                          dendo.SK_EndorsementID,&#xA;                                          dveh.BK_DriverID,&#xA;                                          pp.SK_ProgramID,&#xA;                                          pp.SK_ProgramGroupID,&#xA;                                          dveh.BK_VehicleID,&#xA;                                          evc.ProducerID AS BK_ProducerID,&#xA;                                          dcov.SK_CoverageID,&#xA;                                          ISNULL(stg_evcd.SK_DriverID, -2) AS SK_RatedDriverID,&#xA;                                          dimprod.SK_ProducerID,&#xA;                                          dimprod.BK_OfficeID,&#xA;                                          ISNULL(pc.CoverageTypeID, -1) AS CoverageTypeID,&#xA;                                          ev.BK_EndorsementVehicleID AS EndorsementVehicleID,&#xA;                                          ep.EndorsementPeriodID,&#xA;                                          -- Calculate ITD EP as of Period start date&#xA;                                          CASE &#xA;                                              WHEN p.PreviousPeriodId is NULL and ep.EndorsementPeriodStartDate &lt; p.PeriodActiveStartDate&#xA;                                              and ep.PolicyActive = 1 and ev.PolicyTermStatusID &lt;&gt; 4&#xA;                                              THEN 0 --For first period if policy created by back date&#xA;                                              WHEN ep.EndorsementPeriodEndDate &lt;= p.PeriodActiveStartDate &#xA;                                          AND ep.PolicyActive = 1 &#xA;                                          AND ev.PolicyTermStatusID &lt;&gt; 4 -- Not Written &#xA;                                          THEN &#xA;                                          (CAST(evc.Premium AS DECIMAL(28 ,14)) / DATEDIFF(dd, p.EffectiveDate, p.ExpirationDate)) &#xA;                                            * DATEDIFF(dd ,ep.EndorsementPeriodStartDate ,ep.EndorsementPeriodEndDate) &#xA;                                          WHEN ep.EndorsementPeriodStartDate &lt;= p.PeriodActiveStartDate &#xA;                                            AND ep.EndorsementPeriodEndDate &gt; p.PeriodActiveStartDate &#xA;                                            AND ep.PolicyActive = 1 THEN &#xA;                                          (CAST(evc.Premium AS DECIMAL(28 ,14)) / DATEDIFF(dd, p.EffectiveDate, p.ExpirationDate)) &#xA;                                            * DATEDIFF(dd,ep.EndorsementPeriodStartDate,p.PeriodActiveStartDate) &#xA;                                          ELSE 0           &#xA;                                          END EP_AtPeriodStart,&#xA;                                          -- Calculate ITD EP as of Period end date&#xA;                                          CASE &#xA;                                              WHEN p.PreviousPeriodId is NULL and ep.EndorsementPeriodStartDate &lt; p.PeriodActiveStartDate&#xA;                                              and ep.PolicyActive = 1 and ev.PolicyTermStatusID &lt;&gt; 4&#xA;                                              THEN 0 --For first period if policy created by back date                           &#xA;                                              WHEN ep.EndorsementPeriodEndDate &lt;= p.PeriodActiveEndDate &#xA;                                          AND ep.PolicyActive = 1 &#xA;                                          AND ev.PolicyTermStatusID &lt;&gt; 4 -- Not Written &#xA;                                          THEN &#xA;                                          (CAST(evc.Premium AS DECIMAL(28 ,14)) / DATEDIFF(dd, p.EffectiveDate, p.ExpirationDate)) &#xA;                                            * DATEDIFF(dd,ep.EndorsementPeriodStartDate,ep.EndorsementPeriodEndDate) &#xA;                                          WHEN ep.EndorsementPeriodStartDate &lt;= p.PeriodActiveEndDate&#xA;                                            AND ep.EndorsementPeriodEndDate &gt; p.PeriodActiveEndDate&#xA;                                            AND ep.PolicyActive = 1 &#xA;                                            AND ev.PolicyTermStatusID &lt;&gt; 4&#xA;                                            THEN &#xA;                                          (CAST(evc.Premium AS DECIMAL(28 ,14)) / DATEDIFF(dd, p.EffectiveDate, p.ExpirationDate)) &#xA;                                            * DATEDIFF(dd,ep.EndorsementPeriodStartDate,p.PeriodActiveEndDate)&#xA;                                          ELSE 0           &#xA;                                          END EP_AtPeriodEnd,&#xA;                                          -- Calculate ITD EE as of Period start date&#xA;                                          CASE &#xA;                                              WHEN p.PreviousPeriodId is NULL and ep.EndorsementPeriodStartDate &lt; p.PeriodActiveStartDate&#xA;                                              and ep.PolicyActive = 1 and ev.PolicyTermStatusID &lt;&gt; 4&#xA;                                              THEN 0 --For first period if policy created by back date                           &#xA;                                              WHEN ep.EndorsementPeriodEndDate &lt;= p.PeriodActiveStartDate &#xA;                                          AND ep.PolicyActive = 1 &#xA;                                          AND ev.PolicyTermStatusID &lt;&gt; 4 -- Not Written &#xA;                                          THEN DATEDIFF(dd,ep.EndorsementPeriodStartDate,ep.EndorsementPeriodEndDate) &#xA;                                          WHEN ep.EndorsementPeriodStartDate &lt;= p.PeriodActiveStartDate &#xA;                                            AND ep.EndorsementPeriodEndDate &gt; p.PeriodActiveStartDate &#xA;                                            AND ep.PolicyActive = 1 &#xA;                                          THEN DATEDIFF(dd,ep.EndorsementPeriodStartDate,p.PeriodActiveStartDate) &#xA;                                          ELSE 0           &#xA;                                          END EE_AtPeriodStart,&#xA;                                          -- Calculate ITD EE as of Period end date&#xA;                                          CASE &#xA;                                              WHEN p.PreviousPeriodId is NULL and ep.EndorsementPeriodStartDate &lt; p.PeriodActiveStartDate&#xA;                                              and ep.PolicyActive = 1 and ev.PolicyTermStatusID &lt;&gt; 4&#xA;                                              THEN 0 --For first period if policy created by back date                           &#xA;                                              WHEN ep.EndorsementPeriodEndDate &lt;= p.PeriodActiveEndDate&#xA;                                          AND ep.PolicyActive = 1 &#xA;                                          AND ev.PolicyTermStatusID &lt;&gt; 4 -- Not Written &#xA;                                          THEN DATEDIFF(dd,ep.EndorsementPeriodStartDate,ep.EndorsementPeriodEndDate) &#xA;                                          WHEN ep.EndorsementPeriodStartDate &lt;= p.PeriodActiveEndDate&#xA;                                          AND ep.EndorsementPeriodEndDate &gt; p.PeriodActiveEndDate &#xA;                                          AND ep.PolicyActive = 1 &#xA;                                          THEN DATEDIFF(dd,ep.EndorsementPeriodStartDate,p.PeriodActiveEndDate) &#xA;                                          ELSE 0 &#xA;                                          END EE_AtPeriodEnd,&#xA;                                          -- Calculate EP Daily Run Rate&#xA;                                          (CAST(evc.Premium AS DECIMAL(28 ,14)) / DATEDIFF(dd, p.EffectiveDate, p.ExpirationDate)) &#xA;                                          AS &#xA;                                          EP_DailyRunRate,&#xA;                                          evc.BK_EndorsementVehicleCoverageID AS EndorsementVehicleCoverageID&#xA;                                          FROM [Staging].[PeriodsData] AS p          &#xA;                                          JOIN Staging.EndorsementPeriodsData AS ep ON p.PeriodID = ep.PeriodID&#xA;                                          JOIN Staging.PolicyID AS pol ON pol.BK_EndorsementID = p.TriggeringEndorsementID&#xA;                                          JOIN [Staging].[PolicyProgram] AS pp ON pp.SK_PolicyID = pol.SK_PolicyID&#xA;                                          JOIN Staging.TempEndorsementPeriodIDs AS epIDS ON  epIDS.EndorsementPeriodID = ep.EndorsementPeriodID    &#xA;                                          JOIN [DataMart].[dimEndorsement] dendo ON dendo.BK_EndorsementID = p.TriggeringEndorsementID&#xA;                                          JOIN [Staging].[VehicleId] AS ev ON ev.BK_EndorsementID = ep.EndorsementID&#xA;                                          JOIN [DataMart].[dimVehicle] as dveh ON dveh.SK_VehicleID = ev.SK_VehicleID&#xA;                                          LEFT JOIN [Staging].[EndorsementVehicleCoverage] AS evc ON ev.BK_EndorsementVehicleID = evc.BK_EndorsementVehicleID&#xA;                                          LEFT JOIN [Extract].[P1_ProgramCoverage] AS pc ON pc.ProgramCoverageID = evc.ProgramCoverageID&#xA;                                          LEFT JOIN [Extract].[P1_CoverageType] AS cov ON pc.CoverageTypeID = cov.CoverageTypeID&#xA;                                          LEFT JOIN [DataMart].[dimCoverage] AS dcov ON dcov.CoverageCode = cov.CoverageTypeCode&#xA;                                          LEFT JOIN [Staging].[EndorsementVehicleCoverage_DriverID] as stg_evcd on evc.BK_EndorsementVehicleCoverageID = stg_evcd.EndorsementVehicleCoverageID&#xA;                                          LEFT JOIN [DataMart].[dimProducer] AS dimprod ON dimprod.BK_ProducerID = evc.ProducerID &#xA;                                        )&#xA;                                        MERGE [Staging].[BaseEPEEData] AS TGT&#xA;                                        USING (SELECT * FROM BaseEPEE)&#xA;                                        AS epee&#xA;                                          ON TGT.PeriodId = epee.PeriodID AND TGT.EndorsementPeriodID = epee.EndorsementPeriodID&#xA;                                          AND TGT.CoverageTypeID = epee.CoverageTypeID AND TGT.EndorsementVehicleID = epee.EndorsementVehicleID&#xA;                                          AND TGT.EndorsementVehicleCoverageID = epee.EndorsementVehicleCoverageID&#xA;                                        WHEN MATCHED THEN UPDATE&#xA;                                          SET TGT.EP_AtPeriodStart = epee.EP_AtPeriodStart,&#xA;                                          TGT.EP_AtPeriodEnd  = epee.EP_AtPeriodEnd,&#xA;                                          TGT.EE_AtPeriodStart = epee.EE_AtPeriodStart,&#xA;                                          TGT.EE_AtPeriodEnd  = epee.EE_AtPeriodEnd,&#xA;                                          TGT.EP_DailyRunRate  = epee.EP_DailyRunRate,&#xA;                                          TGT.[TriggeringEndorsementID] = epee.[TriggeringEndorsementID],&#xA;                                          TGT.[PeriodActiveStartDate] = epee.[PeriodActiveStartDate],&#xA;                                          TGT.[SK_CarrierID] = epee.[SK_CarrierID],&#xA;                                          TGT.[BK_PolicyTermID] = epee.[BK_PolicyTermID],&#xA;                                          TGT.[SK_VehicleID] = epee.[SK_VehicleID],&#xA;                                          TGT.[SK_PolicyID] = epee.[SK_PolicyID],&#xA;                                          TGT.[SK_EndorsementID] = epee.[SK_EndorsementID],&#xA;                                          TGT.[BK_DriverID] = epee.[BK_DriverID],&#xA;                                          TGT.[SK_ProgramID] = epee.[SK_ProgramID],&#xA;                                          TGT.[SK_ProgramGroupID] = epee.[SK_ProgramGroupID],&#xA;                                          TGT.[BK_VehicleID] = epee.[BK_VehicleID],&#xA;                                          TGT.[BK_ProducerID] = epee.[BK_ProducerID],&#xA;                                          TGT.[SK_CoverageID]     = epee.[SK_CoverageID]    ,&#xA;                                          TGT.[SK_RatedDriverID]   = epee.[SK_RatedDriverID]  ,&#xA;                                          TGT.[SK_ProducerID] = epee.[SK_ProducerID],&#xA;                                          TGT.[BK_OfficeID] = epee.[BK_OfficeID]&#xA;                                        WHEN NOT MATCHED THEN&#xA;                                        INSERT&#xA;                                          (PeriodID&#xA;                                          ,[TriggeringEndorsementID]&#xA;                                          ,[PeriodActiveStartDate]&#xA;                                          ,[SK_CarrierID]&#xA;                                          ,[BK_PolicyTermID]&#xA;                                          ,[SK_VehicleID]&#xA;                                          ,[SK_PolicyID]&#xA;                                          ,[SK_EndorsementID]&#xA;                                          ,[BK_DriverID]&#xA;                                          ,[SK_ProgramID]&#xA;                                          ,[SK_ProgramGroupID]&#xA;                                          ,[BK_VehicleID],&#xA;                                          [BK_ProducerID],&#xA;                                          [SK_CoverageID],    &#xA;                                          [SK_RatedDriverID],  &#xA;                                          [SK_ProducerID],&#xA;                                          [BK_OfficeID],&#xA;                                          CoverageTypeID, &#xA;                                          EndorsementVehicleID, &#xA;                                          EndorsementPeriodID, &#xA;                                          EP_AtPeriodStart, &#xA;                                          EP_AtPeriodEnd, &#xA;                                          EE_AtPeriodStart, &#xA;                                          EE_AtPeriodEnd, &#xA;                                          EP_DailyRunRate, &#xA;                                          EndorsementVehicleCoverageID)&#xA;                                        VALUES&#xA;                                          (PeriodID &#xA;                                          ,[TriggeringEndorsementID]&#xA;                                          ,[PeriodActiveStartDate]&#xA;                                          ,[SK_CarrierID]&#xA;                                          ,[BK_PolicyTermID]&#xA;                                          ,[SK_VehicleID]&#xA;                                          ,[SK_PolicyID]&#xA;                                          ,[SK_EndorsementID]&#xA;                                          ,[BK_DriverID]&#xA;                                          ,[SK_ProgramID]&#xA;                                          ,[SK_ProgramGroupID]&#xA;                                          ,[BK_VehicleID],&#xA;                                          [BK_ProducerID],&#xA;                                          [SK_CoverageID],    &#xA;                                          [SK_RatedDriverID],  &#xA;                                          [SK_ProducerID],&#xA;                                          [BK_OfficeID],&#xA;                                          CoverageTypeID, &#xA;                                          EndorsementVehicleID, &#xA;                                          EndorsementPeriodID, &#xA;                                          EP_AtPeriodStart, &#xA;                                          EP_AtPeriodEnd, &#xA;                                          EE_AtPeriodStart, &#xA;                                          EE_AtPeriodEnd, &#xA;                                          EP_DailyRunRate, &#xA;                                          EndorsementVehicleCoverageID);&#xA;&#xA;&#xA;                                        --7) Prepare factEndorsementTransaction - this is to be able to get accurate counts of NB/RNW etc&#xA;                                        DELETE FROM [DataMart].[factEndorsementTransaction]&#xA;                                        WHERE SK_EndorsementTransactionDateID &gt;= @UpdateDateID&#xA;&#xA;                                        INSERT INTO [DataMart].[factEndorsementTransaction]&#xA;                                        SELECT CAST(CONVERT(varchar(10), base.PeriodActiveStartDate, 112) AS INT) AS SK_EndorsementTransactionDateID,&#xA;                                          CAST(CONVERT(varchar(6), base.PeriodActiveStartDate, 112) AS INT)  AS SK_EndorsementTransactionMonthID,                           &#xA;                                          base.SK_VehicleID,                           &#xA;                                          base.SK_PolicyID,&#xA;                                          base.SK_RatedDriverID,&#xA;                                          drivers.SK_DriversID,&#xA;                                          base.SK_CoverageID,           &#xA;                                          base.SK_EndorsementID,&#xA;                                          base.SK_ProducerID,&#xA;                                          base.TriggeringEndorsementID AS BK_TriggeringEndorsementID, &#xA;                                          base.SK_CarrierID,&#xA;                                          ISNULL(base.SK_ProgramID, -1) AS SK_ProgramID&#xA;                                        FROM [Staging].[BaseEPEEData] AS base&#xA;                                          JOIN Staging.TempEndorsementPeriodIDs AS epIDs ON base.EndorsementPeriodID = epIDs.EndorsementPeriodID&#xA;                                          LEFT JOIN [Staging].[DriversID] AS drivers ON drivers.BK_EndorsementID = base.TriggeringEndorsementID&#xA;                                        WHERE CAST(CONVERT(varchar(10), base.PeriodActiveStartDate, 112) AS INT) &gt;= @UpdateDateID&#xA;&#xA;&#xA;                                        --9) Calculate EP transactions &#xA;                                        DELETE FROM [Staging].[EPEE_Transactional]&#xA;                                        WHERE SK_DateID &gt;= @UpdateDateID&#xA;&#xA;                                        INSERT INTO [Staging].[EPEE_Transactional]      &#xA;                                        SELECT   TriggeringEndorsementID&#xA;                                          ,SK_DateID                          &#xA;                                          ,PolicyTermID&#xA;                                          ,CoverageTypeID&#xA;                                          ,EndorsementVehicleID&#xA;                                          ,EndorsementVehicleCoverageID&#xA;                                          ,SK_CarrierID                          &#xA;                                          ,EP&#xA;                                          ,EE&#xA;                                        FROM (&#xA;                                          -- Spike transactions where ep changes on edge on same EndorsementVehicle between periods &#xA;                                          SELECT &#xA;                                            p_next.TriggeringEndorsementID,&#xA;                                            CAST(CONVERT(varchar(10), p_next.PeriodActiveStartDate, 112) AS INT) AS SK_DateID,&#xA;                                            p_next.PolicyTermID,        &#xA;                                            base.CoverageTypeID,&#xA;                                            base.EndorsementVehicleID,&#xA;                                            p_next.SK_CarrierID,&#xA;                                            (ISNULL(base_next.EP_AtPeriodStart, 0) - ISNULL(base.EP_AtPeriodEnd, 0)) AS EP,&#xA;                                            (ISNULL(base_next.EE_AtPeriodStart, 0) - ISNULL(base.EE_AtPeriodEnd, 0)) AS EE,&#xA;                                            base.EndorsementVehicleCoverageID&#xA;                                          FROM &#xA;                                          [Staging].[PeriodsData] AS p_current &#xA;                                          JOIN [Staging].[PeriodsData]  AS p_next ON p_current.NextPeriodID = p_next.PeriodID&#xA;                                          JOIN [Extract].[P1_Period] AS per ON p_next.PeriodID = per.PeriodID&#xA;                                          JOIN [Staging].[BaseEPEEData] AS base ON base.PeriodID = p_current.PeriodID&#xA;                                          LEFT JOIN [Staging].[BaseEPEEData] AS base_next &#xA;                                            ON p_current.NextPeriodID = base_next.PeriodID&#xA;                                            AND base.EndorsementVehicleID = base_next.EndorsementVehicleID&#xA;                                            AND base.CoverageTypeID = base_next.CoverageTypeID&#xA;                                          WHERE p_next.PeriodActiveStartDate &gt;= @UpdateDate&#xA;                                            AND p_current.NextPeriodID IS NOT NULL &#xA;                                            AND ((ISNULL(base_next.EP_AtPeriodStart, 0) - base.EP_AtPeriodEnd) &lt;&gt; 0 OR (ISNULL(base_next.EE_AtPeriodStart, 0) - base.EE_AtPeriodEnd) &lt;&gt; 0)&#xA;                                          -- Spike transactions where EndorsementVehicle records just appears on some period &#xA;                                          UNION ALL&#xA;                                                SELECT &#xA;                                            p_current.TriggeringEndorsementID,&#xA;                                            CAST(CONVERT(varchar(10), p_current.PeriodActiveStartDate, 112) AS INT) AS SK_DateID,&#xA;                                            p_current.PolicyTermID,        &#xA;                                            base.CoverageTypeID,&#xA;                                            base.EndorsementVehicleID,                &#xA;                                            p_current.SK_CarrierID,&#xA;                                            ISNULL(base.EP_AtPeriodStart, 0) AS EP,&#xA;                                            ISNULL(base.EE_AtPeriodStart, 0)  AS EE,&#xA;                                            base.EndorsementVehicleCoverageID&#xA;                                          FROM [Staging].[BaseEPEEData] AS base&#xA;                                          JOIN [Staging].[PeriodsData] AS p_current ON base.PeriodID = p_current.PeriodID   &#xA;                                          JOIN [Extract].[P1_Period] as per ON p_current.PeriodID = per.PeriodID&#xA;                                            LEFT JOIN [Staging].[BaseEPEEData] AS base_previous&#xA;                                            ON p_current.PreviousPeriodID = base_previous.PeriodID&#xA;                                            AND base.EndorsementVehicleID = base_previous.EndorsementVehicleID&#xA;                                            AND base.CoverageTypeID = base_previous.CoverageTypeID&#xA;                                          WHERE p_current.PreviousPeriodID IS NOT NULL AND base_previous.PeriodID IS NULL&#xA;                                            AND (base.EP_AtPeriodStart &lt;&gt; 0 OR base.EE_AtPeriodStart &lt;&gt; 0)  &#xA;                                            AND p_current.PeriodActiveStartDate &gt;= @UpdateDate&#xA;                                          UNION ALL   &#xA;                                          -- Normal Daily EP transactions&#xA;                                          SELECT p_current.TriggeringEndorsementID,&#xA;                                            dds.SK_DateID,&#xA;                                            p_current.PolicyTermID,        &#xA;                                            base.CoverageTypeID,&#xA;                                            base.EndorsementVehicleID,        &#xA;                                            p_current.SK_CarrierID,&#xA;                                            EP_DailyRunRate AS EP,&#xA;                                            1 AS EE,   &#xA;                                            base.EndorsementVehicleCoverageID&#xA;                                          FROM [Staging].[BaseEPEEData] AS base&#xA;                                            JOIN [Staging].[PeriodsData] AS p_current ON base.PeriodID = p_current.PeriodID&#xA;                                            --JOIN [Extract].[P1_Period] AS per ON p_current.PeriodID = per.PeriodID&#xA;                                            JOIN [Staging].[EndorsementDateSupport] AS dds WITH (NOLOCK) ON dds.EndorsementPeriodID = base.EndorsementPeriodID&#xA;                                          WHERE  base.EP_AtPeriodEnd &gt; base.EP_AtPeriodStart&#xA;                                            AND dds.SK_DateID &gt;= @UpdateDateID&#xA;                                        ) AS epee &#xA;&#xA;                                        --)Get base periods/wp&#xA;                                        ;WITH BaseWPWE AS&#xA;                                        (&#xA;                                        SELECT &#xA;                                          p.PeriodID AS PeriodID,&#xA;                                          pc.CoverageTypeID AS CoverageTypeID,&#xA;                                          ev.EndorsementVehicleID AS EndorsementVehicleID,&#xA;                                          SUM(CAST(ISNULL(&#xA;                                          CASE &#xA;                                            WHEN ep.PolicyActive = 1 &#xA;                                            AND ept.PolicyTermStatusID &lt;&gt; 4 -- Exclude Not written&#xA;                                            THEN (CAST(evc.Premium AS DECIMAL(28 ,14)) / DATEDIFF(dd, dbo.fFloorDateTime(dbo.fGetDateFromUTCDate(pt.EffectiveDate, proggrp.TimeZone)), dbo.fFloorDateTime(dbo.fGetDateFromUTCDate(pt.ExpirationDate, proggrp.TimeZone)))  ) &#xA;                                            * DATEDIFF(&#xA;                                            dd&#xA;                                            ,dbo.fFloorDateTime(dbo.fGetDateFromUTCDate(ep.EndorsementPeriodStartDate, proggrp.TimeZone))&#xA;                                            ,dbo.fFloorDateTime(dbo.fGetDateFromUTCDate(pt.ExpirationDate, proggrp.TimeZone))&#xA;                                            ) ELSE 0 END&#xA;                                          ,0&#xA;                                          ) AS DECIMAL(28, 14)) +&#xA;                                          CAST(ISNULL(&#xA;                                          CASE  WHEN ep.PolicyActive = 1 &#xA;                                            AND ept.PolicyTermStatusID &lt;&gt; 4 -- Exclude Not written&#xA;                                            THEN -1 * (CAST(evc.Premium AS DECIMAL(28 ,14)) / DATEDIFF(dd, dbo.fFloorDateTime(dbo.fGetDateFromUTCDate(pt.EffectiveDate, proggrp.TimeZone)), dbo.fFloorDateTime(dbo.fGetDateFromUTCDate(pt.ExpirationDate, proggrp.TimeZone)))  ) &#xA;                                            * DATEDIFF(&#xA;                                            dd&#xA;                                            ,dbo.fFloorDateTime(dbo.fGetDateFromUTCDate(ep.EndorsementPeriodEndDate, proggrp.TimeZone))&#xA;                                            ,dbo.fFloorDateTime(dbo.fGetDateFromUTCDate(pt.ExpirationDate, proggrp.TimeZone))&#xA;                                            ) ELSE 0 END&#xA;                                          ,0&#xA;                                          ) AS DECIMAL(28, 14)) ) AS WP,    &#xA;                                          SUM(CAST(ISNULL(&#xA;                                          CASE &#xA;                                            WHEN ep.PolicyActive = 1 &#xA;                                            AND ept.PolicyTermStatusID &lt;&gt; 4 -- Exclude Not written&#xA;                                            THEN DATEDIFF(&#xA;                                            dd&#xA;                                            ,dbo.fFloorDateTime(dbo.fGetDateFromUTCDate(ep.EndorsementPeriodStartDate, proggrp.TimeZone))&#xA;                                            ,dbo.fFloorDateTime(dbo.fGetDateFromUTCDate(pt.ExpirationDate, proggrp.TimeZone))&#xA;                                            ) ELSE 0 END&#xA;                                          ,0&#xA;                                          ) AS Int) +&#xA;                                          CAST(ISNULL(&#xA;                                          CASE  WHEN ep.PolicyActive = 1 &#xA;                                            AND ept.PolicyTermStatusID &lt;&gt; 4 -- Exclude Not written&#xA;                                            THEN -1 * DATEDIFF(&#xA;                                            dd&#xA;                                            ,dbo.fFloorDateTime(dbo.fGetDateFromUTCDate(ep.EndorsementPeriodEndDate, proggrp.TimeZone))&#xA;                                            ,dbo.fFloorDateTime(dbo.fGetDateFromUTCDate(pt.ExpirationDate, proggrp.TimeZone))&#xA;                                            ) ELSE 0 END&#xA;                                          ,0&#xA;                                          ) AS Int) ) AS WE,&#xA;                                          max(evc.EndorsementVehicleCoverageID) AS EndorsementVehicleCoverageID,&#xA;                                          max(ep.EndorsementPeriodID) AS EndorsementPeriodID&#xA;                                        FROM [Staging].[PeriodsData] AS p &#xA;                                          JOIN [Extract].[P1_PolicyTerm] AS pt ON pt.PolicyTermId = p.PolicyTermID    &#xA;                                          JOIN [Extract].[P1_EndorsementPolicyTerm] AS ept ON  p.TriggeringEndorsementID = ept.EndorsementID           &#xA;                                          JOIN [Extract].[P1_Endorsement] AS tr_endo ON tr_endo.EndorsementID = p.TriggeringEndorsementID           &#xA;                                          JOIN [Extract].[P1_EndorsementPeriod] AS ep ON p.PeriodID = ep.PeriodID&#xA;                                          JOIN [Extract].[P1_EndorsementVehicle] AS ev ON ev.EndorsementID = ep.EndorsementID&#xA;                                          JOIN [Extract].[P1_EndorsementVehicleCoverage] AS evc ON ev.EndorsementVehicleID = evc.EndorsementVehicleID&#xA;                                          JOIN [Extract].[P1_ProgramCoverage] AS pc ON pc.ProgramCoverageID = evc.ProgramCoverageID     &#xA;                                          JOIN [Extract].[P1_Program] AS prog ON prog.ProgramID = pt.ProgramID&#xA;                                          JOIN [Extract].[P1_ProgramGroup] AS proggrp ON prog.ProgramGroupID = proggrp.ProgramGroupID  &#xA;                                        GROUP BY              &#xA;                                          p.PeriodID,&#xA;                                          pc.CoverageTypeID,&#xA;                                          proggrp.TimeZone,&#xA;                                          ev.EndorsementVehicleID                          &#xA;                                        )&#xA;                                        MERGE Staging.BaseWPWEData AS TGT&#xA;                                        USING (SELECT * FROM BaseWPWE)&#xA;                                        AS base&#xA;                                          ON base.PeriodID = TGT.PeriodID AND base.CoverageTypeID = TGT.CoverageTypeID&#xA;                                          AND base.EndorsementVehicleID = TGT.EndorsementVehicleID&#xA;                                          AND base.EndorsementVehicleCoverageID = TGT.EndorsementVehicleCoverageID&#xA;                                          AND base.EndorsementPeriodID = TGT.EndorsementPeriodID&#xA;                                        WHEN MATCHED THEN UPDATE&#xA;                                        SET &#xA;                                          TGT.[WP] = base.[WP],&#xA;                                          TGT.[WE] = base.[WE]&#xA;                                        WHEN NOT MATCHED THEN&#xA;                                        INSERT&#xA;                                          ([PeriodID],&#xA;                                          [CoverageTypeID],&#xA;                                          [EndorsementVehicleID],&#xA;                                          [WP],&#xA;                                          [WE],&#xA;                                          [EndorsementVehicleCoverageID],&#xA;                                          [EndorsementPeriodID]&#xA;                                          )&#xA;                                        VALUES&#xA;                                          ([PeriodID],&#xA;                                          [CoverageTypeID],&#xA;                                          [EndorsementVehicleID],&#xA;                                          [WP],&#xA;                                          [WE],&#xA;                                          [EndorsementVehicleCoverageID],&#xA;                                          [EndorsementPeriodID]);&#xA;&#xA;                                        -- Produce WP/WE transactions&#xA;                                        DELETE FROM [Staging].[WPWE_Transactional]&#xA;                                        WHERE SK_DateID &gt;= @UpdateDateID&#xA;&#xA;&#xA;                                        INSERT INTO [Staging].[WPWE_Transactional] &#xA;                                        SELECT p.TriggeringEndorsementID,    &#xA;                                          CAST(CONVERT(varchar(10), p.PeriodActiveStartDate, 112) AS INT) AS SK_DateID,&#xA;                                          p.PolicyTermID,      &#xA;                                          wp.CoverageTypeID,&#xA;                                          wp.EndorsementVehicleID,&#xA;                                          wp.EndorsementVehicleCoverageID,&#xA;                                          wp.SK_CarrierID,&#xA;                                          wp.WP,&#xA;                                          wp.WE                               &#xA;    &#xA;                                        FROM&#xA;                                        (        &#xA;                                          --Get transactions where Vehicle/Coverage disappears in next Period, negate WP/WE&#xA;                                          SELECT p_current.NextPeriodID AS PeriodID, &#xA;                                            base.CoverageTypeID,&#xA;                                            base.EndorsementVehicleID,&#xA;                                            p_next.SK_CarrierID,&#xA;                                            (-1* base.WP) AS WP,&#xA;                                            (-1* base.WE) AS WE,&#xA;                                            base.EndorsementVehicleCoverageID&#xA;                                          FROM [Staging].[BaseWPWEData] AS base&#xA;                                          JOIN Staging.TempEndorsementPeriodIDs epIDs ON base.EndorsementPeriodID = epIDs.EndorsementPeriodID&#xA;                                          LEFT JOIN [Staging].[PeriodsData] AS p_current ON base.PeriodID = p_current.PeriodID   &#xA;                                            LEFT JOIN [Staging].[PeriodsData] AS p_next ON p_current.NextPeriodID = p_next.PeriodID&#xA;                                              LEFT JOIN [Staging].[BaseWPWEData] AS base_next &#xA;                                                ON p_current.NextPeriodID = base_next.PeriodID&#xA;                                                AND base.EndorsementVehicleID = base_next.EndorsementVehicleID&#xA;                                                AND base.CoverageTypeID = base_next.CoverageTypeID&#xA;                                          WHERE base_next.PeriodID IS NULL AND p_current.NextPeriodID IS NOT NULL AND (base.WP &lt;&gt; 0 OR base.WE &lt;&gt; 0)-- &#xA;                                          UNION ALL&#xA;                                          -- Get transactions where Vehicle/Coverage remains in next Period, get WP/WE difference&#xA;                                          SELECT base.PeriodID,&#xA;                                            base.CoverageTypeID,&#xA;                                            base.EndorsementVehicleID,&#xA;                                            p_current.SK_CarrierID,&#xA;                                            ISNULL(base.WP, 0) - ISNULL(base_prev.WP, 0) AS WP,&#xA;                                            ISNULL(base.WE, 0) - ISNULL(base_prev.WE, 0) AS WE,&#xA;                                            base.EndorsementVehicleCoverageID&#xA;                                          FROM [Staging].[BaseWPWEData] AS base&#xA;                                          JOIN Staging.TempEndorsementPeriodIDs epIDs ON base.EndorsementPeriodID = epIDs.EndorsementPeriodID&#xA;                                          LEFT JOIN [Staging].[PeriodsData] AS p_current ON base.PeriodID = p_current.PeriodID&#xA;                                            LEFT JOIN  [Staging].[PeriodsData]AS p_prev ON p_current.PreviousPeriodID = p_prev.PeriodID     &#xA;                                              LEFT JOIN [Staging].[BaseWPWEData] AS base_prev &#xA;                                              ON p_current.PreviousPeriodID = base_prev.PeriodID&#xA;                                              AND base.EndorsementVehicleID = base_prev.EndorsementVehicleID&#xA;                                              AND base.CoverageTypeID = base_prev.CoverageTypeID&#xA;                                          WHERE ((ISNULL(base.WP, 0) - ISNULL(base_prev.WP, 0)) &lt;&gt; 0 OR (ISNULL(base.WE, 0) - ISNULL(base_prev.WE, 0)) &lt;&gt; 0)&#xA;                                        ) AS wp&#xA;                                        JOIN [Staging].[PeriodsData] AS p &#xA;                                          ON p.PeriodID = WP.PeriodID&#xA;                                        WHERE CAST(CONVERT(varchar(10), p.PeriodActiveStartDate, 112) AS INT) &gt;= @UpdateDateID&#xA;                            &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                              <SQLTask:ParameterBinding SQLTask:DataType="17" SQLTask:DtsVariableName="User::IsIncremental" SQLTask:ParameterDirection="Input" SQLTask:ParameterName="0" SQLTask:ParameterSize="0">
                              </SQLTask:ParameterBinding>
                              <SQLTask:ParameterBinding SQLTask:DataType="7" SQLTask:DtsVariableName="User::IncrementalStartDate" SQLTask:ParameterDirection="Input" SQLTask:ParameterName="1" SQLTask:ParameterSize="0">
                              </SQLTask:ParameterBinding>
                            </SQLTask:SqlTaskData>
                          </DTS:ObjectData>
                        </DTS:Executable>
                        <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{C0D095B8-B911-4823-9610-B647D64CD9CF}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factPIFVIFDIFTransaction table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create Complete Transactional fact tables\SQL create factPIFVIFDIFTransaction table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                          <DTS:ObjectData>
                            <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                      &#xA;                                        DECLARE @CurrentDate DATETIME2 = GETDATE()&#xA;                                        DECLARE @CurrentDateID int = CAST(CONVERT(varchar(10), @CurrentDate, 112) AS INT)&#xA;                                        DECLARE @MaxDate DATETIME2&#xA;                                        DECLARE @IsIncremental INT = ?;&#xA;                                        DECLARE @UpdateDate DATETIME2 = ?;&#xA;&#xA;                                        IF @IsIncremental = 0 SET @UpdateDate = '19000101'&#xA;&#xA;                                        DECLARE @UpdateDateID int = CAST(CONVERT(varchar(10), @UpdateDate, 112) AS INT)&#xA;&#xA;                                        -- Prepare factPIFVIFDIFTransaction&#xA;                                        DELETE FROM [DataMart].[factPIFVIFDIFTransaction]&#xA;                                        WHERE SK_TransactionDateID &gt;= @UpdateDateID&#xA;&#xA;                                        IF OBJECT_ID('tempdb..#EPEETemp') IS NOT NULL DROP TABLE #EPEETemp&#xA;                                        SELECT   ep.TriggeringEndorsementID&#xA;                                            ,dds.SK_DateID&#xA;                                            ,ep.SK_PolicyID&#xA;                                            ,ep.CoverageTypeID&#xA;                                            ,ep.EndorsementVehicleID&#xA;                                            ,ep.SK_CarrierID&#xA;                                            ,ep.BK_PolicyTermID AS BK_PolicyID&#xA;                                            ,ep.EndorsementVehicleCoverageID&#xA;                                            ,ep.BK_VehicleID&#xA;                                            ,ep.BK_ProducerID&#xA;                                            ,ep.SK_CoverageID&#xA;                                            ,ep.SK_RatedDriverID&#xA;                                            ,ep.SK_ProducerID&#xA;                                            ,ep.BK_OfficeID&#xA;                                            ,ep.BK_DriverID&#xA;                                            ,ep.SK_VehicleID&#xA;                                            ,ep.SK_EndorsementID&#xA;                                            ,SK_ProgramID&#xA;                                            ,SK_ProgramGroupID&#xA;                                        INTO #EPEETemp&#xA;                                        FROM [Staging].[BaseEPEEData] AS ep&#xA;                                        JOIN Staging.TempEndorsementPeriodIDs AS epIDs ON ep.EndorsementPeriodID = epIDs.EndorsementPeriodID&#xA;                                        JOIN [Staging].[EndorsementDateSupport] AS dds WITH ( NOLOCK )&#xA;                                            ON dds.EndorsementPeriodID = ep.EndorsementPeriodID&#xA;                                        WHERE ep.EP_AtPeriodEnd &gt; ep.EP_AtPeriodStart&#xA;                                            AND ep.EP_DailyRunRate &gt; 0&#xA;                                            AND dds.SK_DateID &gt;= @UpdateDateID&#xA;&#xA;&#xA;&#xA;                                        INSERT INTO [DataMart].[factPIFVIFDIFTransaction]&#xA;                                        SELECT  SK_DateID AS SK_TransactionDateID&#xA;                                          ,base.SK_VehicleID&#xA;                                          ,base.SK_PolicyID&#xA;                                          ,base.SK_RatedDriverID&#xA;                                          ,base.SK_CoverageID&#xA;                                          ,base.SK_EndorsementID&#xA;                                          ,base.SK_ProducerID&#xA;                                          ,base.SK_CarrierID&#xA;                                          ,base.BK_PolicyID&#xA;                                          ,base.BK_VehicleID&#xA;                                          ,CASE WHEN ddrv_drivers.BK_DriverID IS NULL&#xA;                                             OR ddrv_drivers.BK_DriverID = -1 THEN -1&#xA;                                            ELSE ddrv_drivers.BK_DriverID&#xA;                                          END AS BK_DriverID&#xA;                                          ,CASE WHEN ddrv_drivers.BK_DriverID IS NULL&#xA;                                             OR ddrv_drivers.BK_DriverID = -1 THEN 1&#xA;                                            ELSE NULL&#xA;                                          END AS NoValidDriver&#xA;                                          ,ISNULL(base.SK_ProgramID, -1) AS SK_ProgramID&#xA;                                          ,ISNULL(base.SK_ProgramGroupID, -1) AS SK_ProgramGroupID&#xA;                                          ,dimA.SK_AgencyOfficeID&#xA;&#xA;                                        FROM   #EPEETemp AS base&#xA;                                        LEFT JOIN [DataMart].[dimDriver] AS ddrv&#xA;                                          ON ddrv.BK_DriverID = base.BK_DriverID &#xA;                                           AND ddrv.BK_EndorsementID = base.TriggeringEndorsementID&#xA;                                        LEFT JOIN [Staging].[DriversID] AS drivers&#xA;                                          ON drivers.BK_EndorsementID = base.TriggeringEndorsementID&#xA;                                        LEFT JOIN [DataMart].[factlessDrivers] AS fdrivers&#xA;                                          ON fdrivers.SK_DriversID = drivers.SK_DriversID&#xA;                                        LEFT JOIN [DataMart].[dimDriver] AS ddrv_drivers&#xA;                                          ON ddrv_drivers.SK_DriverID = fdrivers.SK_DriverID&#xA;                                        LEFT JOIN DataMart.dimAgencyOffice dimA&#xA;                                          ON dimA.BK_AgencyOfficeID = base.BK_OfficeID&#xA;&#xA;                                        GROUP BY TriggeringEndorsementID&#xA;                                          ,SK_DateID&#xA;                                          ,base.SK_VehicleID&#xA;                                          ,base.SK_CoverageID&#xA;                                          ,base.SK_PolicyID&#xA;                                          ,base.SK_RatedDriverID&#xA;                                          ,base.SK_EndorsementID&#xA;                                          ,base.SK_ProducerID&#xA;                                          ,base.SK_CarrierID&#xA;                                          ,base.BK_PolicyID&#xA;                                          ,base.BK_VehicleID&#xA;                                          ,CASE WHEN ddrv_drivers.BK_DriverID IS NULL&#xA;                                             OR ddrv_drivers.BK_DriverID = -1 THEN -1&#xA;                                            ELSE ddrv_drivers.BK_DriverID&#xA;                                          END&#xA;                                          ,CASE WHEN ddrv_drivers.BK_DriverID IS NULL&#xA;                                             OR ddrv_drivers.BK_DriverID = -1 THEN 1&#xA;                                            ELSE NULL&#xA;                                          END&#xA;                                          ,ISNULL(base.SK_ProgramID, -1)&#xA;                                          ,ISNULL(base.SK_ProgramGroupID, -1)&#xA;                                          ,dimA.SK_AgencyOfficeID     &#xA;                            &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                              <SQLTask:ParameterBinding SQLTask:DataType="17" SQLTask:DtsVariableName="User::IsIncremental" SQLTask:ParameterDirection="Input" SQLTask:ParameterName="0" SQLTask:ParameterSize="0">
                              </SQLTask:ParameterBinding>
                              <SQLTask:ParameterBinding SQLTask:DataType="7" SQLTask:DtsVariableName="User::IncrementalStartDate" SQLTask:ParameterDirection="Input" SQLTask:ParameterName="1" SQLTask:ParameterSize="0">
                              </SQLTask:ParameterBinding>
                            </SQLTask:SqlTaskData>
                          </DTS:ObjectData>
                        </DTS:Executable>
                        <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{BAC90BC3-FBB6-425B-9796-0983EFCACFED}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factInforcePremiumTransactional table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create Complete Transactional fact tables\SQL create factInforcePremiumTransactional table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                          <DTS:ObjectData>
                            <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                      &#xA;DECLARE @CurrentDate DATETIME2 = GETDATE()&#xA;DECLARE @CurrentDateID int = CAST(CONVERT(varchar(10), @CurrentDate, 112) AS INT)&#xA;DECLARE @MaxDate DATETIME2&#xA;DECLARE @IsIncremental INT = ?&#xA;DECLARE @UpdateDate DATETIME2 = ?&#xA;&#xA;IF @IsIncremental = 0 SET @UpdateDate = '19000101'&#xA;&#xA;DECLARE @UpdateDateID int = CAST(CONVERT(varchar(10), @UpdateDate, 112) AS INT)&#xA;DECLARE @PreviousDate DATETIME2 = DATEADD(dd, -1, @UpdateDate)&#xA;DECLARE @PreviousDateID int = CAST(CONVERT(varchar(10), @PreviousDate, 112) AS INT)&#xA;DECLARE @TodayDate DATETIME2 = (select max(dd.[Date]) from [DataMart].[dimDate]  dd)&#xA;DECLARE @TodayDateID int = CAST(CONVERT(varchar(10), @TodayDate, 112) AS INT)&#xA;DECLARE @TomorrowDate  DATETIME2 = DATEADD(dd, 1,@TodayDate )&#xA;DECLARE @TomorrowDateID int = CAST(CONVERT(varchar(10), @TomorrowDate, 112) AS INT)&#xA;&#xA;&#xA;;WITH GapData AS&#xA;(&#xA;select dd.[Date] AS TransDate, BK_PolicyID,&#xA; ISNULL(LAG(dd.[Date]) OVER (&#xA;  PARTITION BY BK_PolicyID ORDER BY dd.[Date]&#xA;  ), DATEADD(d, -1, @PreviousDate)) AS PrevDate&#xA; from [DataMart].[factPIFVIFDIFTransaction] pif&#xA; JOIN [DataMart].[dimDate] dd&#xA; ON pif.SK_TransactionDateID = dd.SK_DateID&#xA;where SK_TransactionDateID &gt;= @PreviousDateID&#xA;Group by dd.[Date], BK_PolicyID)&#xA;select TransDate, BK_PolicyID &#xA;INTO #AppearedTrans&#xA;from  GapData gd&#xA;where gd.TransDate &gt;= @UpdateDate&#xA;AND DATEDIFF(dd, PrevDate,  TransDate) &gt; 1&#xA;&#xA;;WITH GapData&#xA;AS (&#xA; SELECT dd.[Date] AS TransDate&#xA;  ,BK_PolicyID&#xA;  ,ISNULL(LEAD(dd.[Date]) OVER (&#xA;    PARTITION BY BK_PolicyID ORDER BY dd.[Date]&#xA;    ), @TomorrowDate) AS NextDate&#xA; FROM [DataMart].[factPIFVIFDIFTransaction] pif&#xA; JOIN [DataMart].[dimDate] dd ON pif.SK_TransactionDateID = dd.SK_DateID&#xA; WHERE SK_TransactionDateID &gt;= @PreviousDateID&#xA; GROUP BY dd.[Date]&#xA;  ,BK_PolicyID&#xA; )&#xA;SELECT DATEADD(dd, 1, TransDate) AS TransDate&#xA; ,BK_PolicyID&#xA;INTO #DisappearedTrans&#xA;FROM GapData gd&#xA;WHERE TransDate &lt; @TodayDate&#xA; AND DATEDIFF(dd, TransDate, NextDate) &gt; 1&#xA;&#xA;SELECT dd.SK_DateID&#xA; ,at.BK_PolicyID&#xA; ,TriggeringEndorsementID&#xA; ,CoverageTypeID&#xA; ,EndorsementVehicleID&#xA; ,EndorsementVehicleCoverageID&#xA; ,SK_CarrierID&#xA; ,sum(wp.WP) AS WP&#xA; ,sum(wp.WE) AS WE&#xA;INTO  #TempInforceWP&#xA;FROM #AppearedTrans at&#xA;JOIN [DataMart].[dimDate] dd ON at.TransDate = dd.[Date]&#xA;JOIN [Staging].[WPWE_Transactional] wp ON at.BK_PolicyID = wp.PolicyTermID&#xA; AND wp.SK_DateID &lt; dd.SK_DateID&#xA;GROUP BY dd.SK_DateID&#xA; ,at.BK_PolicyID&#xA; ,TriggeringEndorsementID&#xA; ,CoverageTypeID&#xA; ,EndorsementVehicleID&#xA; ,EndorsementVehicleCoverageID&#xA; ,SK_CarrierID&#xA;&#xA;&#xA;;WITH GrouppedPifVifDif&#xA;AS (&#xA; SELECT BK_PolicyID&#xA;  ,SK_TransactionDateID&#xA; FROM [DataMart].[factPIFVIFDIFTransaction]&#xA; WHERE SK_TransactionDateID &gt;= @UpdateDateID&#xA; GROUP BY BK_PolicyID&#xA;  ,SK_TransactionDateID&#xA; )&#xA;INSERT INTO #TempInforceWP(SK_DateID, BK_PolicyID, TriggeringEndorsementID, CoverageTypeID, EndorsementVehicleID, EndorsementVehicleCoverageID, SK_CarrierID, WP, WE)&#xA;SELECT SK_TransactionDateID, PolicyTermID, TriggeringEndorsementID, CoverageTypeID, EndorsementVehicleID, EndorsementVehicleCoverageID, SK_CarrierID,&#xA;  sum(wp.WP), sum(wp.WE)&#xA;FROM GrouppedPifVifDif  pif&#xA; JOIN [Staging].[WPWE_Transactional] wp&#xA;  ON wp.PolicyTermID = pif.BK_PolicyID&#xA;   AND wp.SK_DateID = pif.SK_TransactionDateID&#xA;GROUP BY SK_TransactionDateID ,TriggeringEndorsementID, PolicyTermID, CoverageTypeID, EndorsementVehicleID, EndorsementVehicleCoverageID, SK_CarrierID&#xA;&#xA;&#xA;INSERT INTO #TempInforceWP(SK_DateID, BK_PolicyID, TriggeringEndorsementID, CoverageTypeID, EndorsementVehicleID, EndorsementVehicleCoverageID, SK_CarrierID, WP, WE)&#xA;SELECT dd.SK_DateID, at.BK_PolicyID, TriggeringEndorsementID, CoverageTypeID, EndorsementVehicleID, EndorsementVehicleCoverageID, SK_CarrierID, -sum(wp.WP) AS WP, -sum(wp.WE) AS WE&#xA;FROM #DisappearedTrans at&#xA;JOIN [DataMart].[dimDate] dd&#xA; ON at.TransDate=dd.[Date]&#xA;JOIN [Staging].[WPWE_Transactional] wp&#xA; ON at.BK_PolicyID = wp.PolicyTermID&#xA;  AND wp.SK_DateID &lt; dd.SK_DateID&#xA;GROUP BY dd.SK_DateID, at.BK_PolicyID, TriggeringEndorsementID, CoverageTypeID, EndorsementVehicleID, EndorsementVehicleCoverageID, SK_CarrierID&#xA;&#xA;&#xA;&#xA;&#xA;--prepare factInforcePremiumTransactional table&#xA;DELETE FROM [DataMart].[factInforcePremiumTransactional]&#xA;WHERE SK_TransactionDateID &gt;= @UpdateDateID&#xA;&#xA;INSERT INTO [DataMart].[factInforcePremiumTransactional]&#xA;(SK_TransactionDateID, SK_VehicleID, SK_PolicyID, SK_RatedDriverID, SK_DriversID, SK_CoverageID, SK_EndorsementID, SK_ProducerID, BK_TriggeringEndorsementID, SK_CarrierID, SK_ProgramID, SK_ProgramGroupID, BK_PolicyTermID, SK_AgencyOfficeID, WP, WE)&#xA;SELECT wpep.SK_DateID AS SK_TransactionDateID&#xA; ,ISNULL(dveh.SK_VehicleID, - 1) AS SK_VehicleID&#xA; ,ISNULL(pol.SK_PolicyID, - 1) AS SK_PolicyID&#xA; ,ISNULL(stg_evcd.SK_DriverID, - 2) AS SK_RatedDriverID&#xA; ,ISNULL(drivers.SK_DriversID, - 1) AS SK_DriversID&#xA; ,ISNULL(dcov.SK_CoverageID, - 1) AS SK_CoverageID&#xA; ,ISNULL(dendo.SK_EndorsementID, - 1) AS SK_EndorsementID&#xA; ,ISNULL(dimprod.SK_ProducerID, - 1) AS SK_ProducerID&#xA; ,wpep.TriggeringEndorsementID AS BK_TriggeringEndorsementID&#xA; ,wpep.SK_CarrierID&#xA; ,ISNULL(pp.SK_ProgramID, - 1) AS SK_ProgramID&#xA; ,ISNULL(pp.SK_ProgramGroupID, - 1) AS SK_ProgramGroupID&#xA; ,dp.BK_PolicyTermID&#xA; ,ISNULL(dimA.SK_AgencyOfficeID, - 1) AS SK_AgencyOfficeID&#xA; ,wpep.WP&#xA; ,wpep.WE                             &#xA;FROM #TempInforceWP wpep&#xA;&#xA;LEFT JOIN [Extract].[P1_CoverageType] AS cov ON wpep.CoverageTypeID = cov.CoverageTypeID&#xA;LEFT JOIN [DataMart].[dimCoverage] AS dcov ON dcov.CoverageCode = cov.CoverageTypeCode&#xA;LEFT JOIN [Staging].[PolicyID] AS pol ON pol.BK_EndorsementID = wpep.TriggeringEndorsementID&#xA;LEFT JOIN [Staging].[VehicleID] AS veh ON veh.BK_EndorsementVehicleID = wpep.EndorsementVehicleID&#xA;LEFT JOIN [Staging].[DriversID] AS drivers ON drivers.BK_EndorsementID = veh.BK_EndorsementID&#xA;LEFT JOIN [DataMart].[dimVehicle] AS dveh ON dveh.SK_VehicleID = veh.SK_VehicleID&#xA;LEFT JOIN [DataMart].[dimDriver] AS ddrv ON ddrv.BK_DriverID = dveh.BK_DriverID&#xA; AND ddrv.BK_EndorsementID = dveh.BK_EndorsementID&#xA;LEFT JOIN [DataMart].[dimEndorsement] AS dendo ON dendo.BK_EndorsementID = wpep.TriggeringEndorsementID&#xA;LEFT JOIN [Extract].[P1_EndorsementPolicyTerm] AS ept ON ept.EndorsementID = veh.BK_EndorsementID&#xA;LEFT JOIN [DataMart].[dimProducer] AS dimprod ON dimprod.BK_ProducerID = ept.ProducerID&#xA;LEFT JOIN [Staging].[PolicyProgram] AS pp ON pol.SK_PolicyID = pp.SK_PolicyID&#xA;LEFT JOIN [DataMart].[dimPolicy] AS dp ON dp.SK_PolicyID = pol.SK_PolicyID&#xA;LEFT JOIN [Staging].[EndorsementVehicleCoverage_DriverID] AS stg_evcd ON wpep.EndorsementVehicleCoverageID = stg_evcd.EndorsementVehicleCoverageID&#xA;LEFT JOIN [DataMart].[dimAgencyOffice] dimA ON dimA.BK_AgencyOfficeID = dimprod.BK_OfficeID&#xA;                                      &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                              <SQLTask:ParameterBinding SQLTask:DataType="17" SQLTask:DtsVariableName="User::IsIncremental" SQLTask:ParameterDirection="Input" SQLTask:ParameterName="0" SQLTask:ParameterSize="0">
                              </SQLTask:ParameterBinding>
                              <SQLTask:ParameterBinding SQLTask:DataType="7" SQLTask:DtsVariableName="User::IncrementalStartDate" SQLTask:ParameterDirection="Input" SQLTask:ParameterName="1" SQLTask:ParameterSize="0">
                              </SQLTask:ParameterBinding>
                            </SQLTask:SqlTaskData>
                          </DTS:ObjectData>
                        </DTS:Executable>
                        <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{4C9992D7-D3A7-4774-97BF-E20EB30F93E8}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factPremiumsTransactional table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create Complete Transactional fact tables\SQL create factPremiumsTransactional table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                          <DTS:ObjectData>
                            <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                                 &#xA;DECLARE @IsIncremental INT = ?&#xA;DECLARE @UpdateDate DATETIME2 = ?&#xA;&#xA;IF @IsIncremental = 0 SET @UpdateDate = '19000101'&#xA;&#xA;DECLARE @UpdateDateID int = CAST(CONVERT(varchar(10), @UpdateDate, 112) AS INT)&#xA;&#xA;--1) Merge WP/WE/EP/EE Numbers to produce fact table&#xA;DELETE FROM [DataMart].[factPremiumsTransactional]&#xA;WHERE SK_TransactionDateID &gt;= @UpdateDateID&#xA;&#xA;INSERT INTO [DataMart].[factPremiumsTransactional]&#xA;SELECT  SK_DateID AS SK_TransactionDateID&#xA;  ,dveh.SK_VehicleID&#xA;  ,pol.SK_PolicyID&#xA;  ,CASE WHEN stg_evcd.SK_DriverID IS NULL THEN -2&#xA;    ELSE stg_evcd.SK_DriverID&#xA;  END AS SK_RatedDriverID&#xA;  ,drivers.SK_DriversID&#xA;  ,dcov.SK_CoverageID&#xA;  ,dendo.SK_EndorsementID&#xA;  ,dimprod.SK_ProducerID&#xA;  ,TriggeringEndorsementID AS BK_TriggeringEndorsementID&#xA;  ,a.SK_CarrierID&#xA;  ,ISNULL(pp.SK_ProgramID, -1) AS SK_ProgramID&#xA;  ,ISNULL(pp.SK_ProgramGroupID, -1) AS SK_ProgramGroupID&#xA;  ,dp.BK_PolicyTermID&#xA;  ,dimA.SK_AgencyOfficeID&#xA;  ,SUM(EP) AS EP&#xA;  ,SUM(EE) AS EE&#xA;  ,SUM(WP) AS WP&#xA;  ,SUM(WE) AS WE&#xA;FROM    ( SELECT    TriggeringEndorsementID&#xA;     ,EndorsementVehicleID&#xA;     ,SK_DateID&#xA;     ,CoverageTypeID&#xA;     ,SK_CarrierID&#xA;     ,EndorsementVehicleCoverageID&#xA;     ,EP&#xA;     ,EE&#xA;     ,0 AS WP&#xA;     ,0 AS WE&#xA;   FROM      [Staging].[EPEE_Transactional]&#xA;   WHERE SK_DateID &gt;= @UpdateDateID&#xA;   UNION ALL&#xA;   SELECT    TriggeringEndorsementID&#xA;     ,EndorsementVehicleID&#xA;     ,SK_DateID&#xA;     ,CoverageTypeID&#xA;     ,SK_CarrierID&#xA;     ,EndorsementVehicleCoverageID&#xA;     ,0 AS EP&#xA;     ,0 AS EE&#xA;     ,WP&#xA;     ,WE&#xA;   FROM      [Staging].[WPWE_Transactional]&#xA;   WHERE SK_DateID &gt;= @UpdateDateID&#xA;  ) AS a&#xA;LEFT JOIN [Extract].[P1_CoverageType] AS cov&#xA;  ON a.CoverageTypeID = cov.CoverageTypeID&#xA;LEFT JOIN [DataMart].[dimCoverage] AS dcov&#xA;  ON dcov.CoverageCode = cov.CoverageTypeCode&#xA;LEFT JOIN [Staging].[PolicyID] AS pol&#xA;  ON pol.BK_EndorsementID = a.TriggeringEndorsementID&#xA;LEFT JOIN [Staging].[VehicleID] AS veh&#xA;  ON veh.BK_EndorsementVehicleID = a.EndorsementVehicleID&#xA;LEFT JOIN [Staging].[DriversID] AS drivers&#xA;  ON drivers.BK_EndorsementID = veh.BK_EndorsementID&#xA;LEFT JOIN [DataMart].[dimVehicle] AS dveh&#xA;  ON dveh.SK_VehicleID = veh.SK_VehicleID&#xA;LEFT JOIN [DataMart].[dimDriver] AS ddrv&#xA;  ON ddrv.BK_DriverID = dveh.BK_DriverID&#xA;   AND ddrv.BK_EndorsementID = dveh.BK_EndorsementID&#xA;LEFT JOIN [DataMart].[dimEndorsement] AS dendo&#xA;  ON dendo.BK_EndorsementID = a.TriggeringEndorsementID&#xA;LEFT JOIN [Extract].[P1_EndorsementPolicyTerm] AS ept&#xA;  ON ept.EndorsementID = veh.BK_EndorsementID&#xA;LEFT JOIN [DataMart].[dimProducer] AS dimprod&#xA;  ON dimprod.BK_ProducerID = ept.ProducerID&#xA;LEFT JOIN [Staging].[PolicyProgram] AS pp&#xA;  ON pol.SK_PolicyID = pp.SK_PolicyID&#xA;LEFT JOIN [DataMart].[dimPolicy] AS dp&#xA;  ON dp.SK_PolicyID = pol.SK_PolicyID&#xA;LEFT JOIN [Staging].[EndorsementVehicleCoverage_DriverID] AS stg_evcd&#xA;  ON a.EndorsementVehicleCoverageID = stg_evcd.EndorsementVehicleCoverageID&#xA;LEFT JOIN DataMart.dimAgencyOffice dimA&#xA;  ON dimA.BK_AgencyOfficeID = dimprod.BK_OfficeID&#xA;GROUP BY TriggeringEndorsementID&#xA;  ,SK_DateID&#xA;  ,dveh.SK_VehicleID&#xA;  ,dcov.SK_CoverageID&#xA;  ,pol.SK_PolicyID&#xA;  ,veh.SK_VehicleID&#xA;  ,drivers.SK_DriversID&#xA;  ,CASE WHEN stg_evcd.SK_DriverID IS NULL THEN -2&#xA;    ELSE stg_evcd.SK_DriverID&#xA;  END&#xA;  ,dendo.SK_EndorsementID&#xA;  ,dimprod.SK_ProducerID&#xA;  ,a.SK_CarrierID&#xA;  ,ISNULL(pp.SK_ProgramID, -1)&#xA;  ,ISNULL(pp.SK_ProgramGroupID, -1)&#xA;  ,dp.BK_PolicyTermID&#xA;  ,dimA.SK_AgencyOfficeID&#xA;                  &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                              <SQLTask:ParameterBinding SQLTask:DataType="17" SQLTask:DtsVariableName="User::IsIncremental" SQLTask:ParameterDirection="Input" SQLTask:ParameterName="0" SQLTask:ParameterSize="0">
                              </SQLTask:ParameterBinding>
                              <SQLTask:ParameterBinding SQLTask:DataType="7" SQLTask:DtsVariableName="User::IncrementalStartDate" SQLTask:ParameterDirection="Input" SQLTask:ParameterName="1" SQLTask:ParameterSize="0">
                              </SQLTask:ParameterBinding>
                            </SQLTask:SqlTaskData>
                          </DTS:ObjectData>
                        </DTS:Executable>
                        <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{164E77F3-9BB8-4959-B420-DC234A0D4088}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factPremiumChangingEndorsement table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create Complete Transactional fact tables\SQL create factPremiumChangingEndorsement table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                          <DTS:ObjectData>
                            <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                                                                                                       &#xA;DECLARE @IsIncremental INT = ?&#xA;DECLARE @UpdateDate DATETIME2 = ?&#xA;&#xA;IF @IsIncremental = 0 SET @UpdateDate = '19000101'&#xA;&#xA;DECLARE @UpdateDateID int = CAST(CONVERT(varchar(10), @UpdateDate, 112) AS INT)&#xA;&#xA;DELETE FROM [DataMart].[factPremiumChangingEndorsement]&#xA;WHERE SK_TransactionDateID &gt;= @UpdateDateID&#xA;&#xA;INSERT INTO [DataMart].[factPremiumChangingEndorsement]&#xA;SELECT  ISNULL(fpt.SK_TransactionDateID, 0) AS SK_TransactionDateID&#xA;  ,ISNULL(fpt.BK_TriggeringEndorsementID, 0) AS BK_TriggeringEndorsementID&#xA;  ,ISNULL(fpt.SK_CarrierID, 0) AS SK_CarrierID&#xA;  ,ISNULL(vebt.EndorsementBusinessTypeID, 0) AS EndorsementBusinessTypeID&#xA;&#xA;FROM    DataMart.factPremiumsTransactional fpt&#xA;LEFT JOIN [DataMart].[dimEndorsement] AS de&#xA;  ON de.BK_EndorsementID = fpt.BK_TriggeringEndorsementID&#xA;LEFT JOIN DataMart.dimEndorsementBusinessType vebt&#xA;  ON vebt.BK_EndorsementTypeID = de.EndorsementTypeID&#xA;WHERE fpt.SK_TransactionDateID &gt;= @UpdateDateID&#xA;GROUP BY fpt.BK_TriggeringEndorsementID&#xA;  ,fpt.SK_TransactionDateID&#xA;  ,fpt.SK_CarrierID&#xA;  ,vebt.EndorsementBusinessTypeID&#xA;HAVING  ABS(SUM(fpt.WP)) &gt; 0.0001&#xA;                   &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                              <SQLTask:ParameterBinding SQLTask:DataType="17" SQLTask:DtsVariableName="User::IsIncremental" SQLTask:ParameterDirection="Input" SQLTask:ParameterName="0" SQLTask:ParameterSize="0">
                              </SQLTask:ParameterBinding>
                              <SQLTask:ParameterBinding SQLTask:DataType="7" SQLTask:DtsVariableName="User::IncrementalStartDate" SQLTask:ParameterDirection="Input" SQLTask:ParameterName="1" SQLTask:ParameterSize="0">
                              </SQLTask:ParameterBinding>
                            </SQLTask:SqlTaskData>
                          </DTS:ObjectData>
                        </DTS:Executable>
                        <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{21EC341E-E466-4E7C-BC58-2B0C3DE88E6C}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factPremiumsTransactionalMonthly table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create Complete Transactional fact tables\SQL create factPremiumsTransactionalMonthly table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                          <DTS:ObjectData>
                            <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                                 &#xA;DECLARE @IsIncremental INT = ?&#xA;DECLARE @UpdateDate DATETIME2 = ?&#xA;DECLARE @LowestDate DATETIME2 = '19000101'&#xA;DECLARE @LowestDateID int = CAST(CONVERT(varchar(10), @LowestDate, 112) AS INT)&#xA;&#xA;IF @IsIncremental = 0 SET @UpdateDate = @LowestDate&#xA;&#xA;DECLARE @UpdateDateID int = CAST(CONVERT(varchar(10), @UpdateDate, 112) AS INT)&#xA;DECLARE @UpdateMonthID int = (SELECT CAST(LEFT(CAST(@UpdateDateID AS VARCHAR(10)), 6) AS INT))&#xA;&#xA;DECLARE @FirstDateID int = (select ISNULL(MIN(SK_DateID), @LowestDateID) from [DataMart].[dimDate] &#xA;   WHERE SK_MonthID = @UpdateMonthID)&#xA;&#xA;SELECT @FirstDateID&#xA;&#xA;DELETE FROM [DataMart].[factPremiumsTransactionalMonthly]&#xA;WHERE SK_TransactionMonthID &gt;= @UpdateMonthID&#xA;&#xA;INSERT INTO [DataMart].[factPremiumsTransactionalMonthly]&#xA;SELECT CAST(LEFT(CAST([SK_TransactionDateID] AS VARCHAR(10)), 6) AS INT) AS [SK_TransactionMonthID]&#xA; ,[SK_VehicleID]&#xA; ,[SK_PolicyID]&#xA; ,[SK_RatedDriverID]&#xA; ,[SK_DriversID]&#xA; ,[SK_CoverageID]&#xA; ,[SK_EndorsementID]&#xA; ,[SK_ProducerID]&#xA; ,[BK_TriggeringEndorsementID]&#xA; ,[SK_CarrierID]&#xA; ,[SK_ProgramID]&#xA; ,[BK_PolicyTermID]&#xA; ,[SK_AgencyOfficeID]&#xA; ,SUM([EP]) AS EP&#xA; ,SUM([EE]) AS EE&#xA; ,SUM([WP]) AS WP&#xA; ,SUM([WE]) AS WE&#xA;FROM [DataMart].[factPremiumsTransactional]&#xA;where SK_TransactionDateID &gt;= @FirstDateID&#xA;GROUP BY CAST(LEFT(CAST([SK_TransactionDateID] AS VARCHAR(10)), 6) AS INT)&#xA; ,[SK_VehicleID]&#xA; ,[SK_PolicyID]&#xA; ,[SK_RatedDriverID]&#xA; ,[SK_DriversID]&#xA; ,[SK_CoverageID]&#xA; ,[SK_EndorsementID]&#xA; ,[SK_ProducerID]&#xA; ,[BK_TriggeringEndorsementID]&#xA; ,[SK_CarrierID]&#xA; ,[SK_ProgramID]&#xA; ,[BK_PolicyTermID]&#xA; ,[SK_AgencyOfficeID]&#xA;             &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                              <SQLTask:ParameterBinding SQLTask:DataType="17" SQLTask:DtsVariableName="User::IsIncremental" SQLTask:ParameterDirection="Input" SQLTask:ParameterName="0" SQLTask:ParameterSize="0">
                              </SQLTask:ParameterBinding>
                              <SQLTask:ParameterBinding SQLTask:DataType="7" SQLTask:DtsVariableName="User::IncrementalStartDate" SQLTask:ParameterDirection="Input" SQLTask:ParameterName="1" SQLTask:ParameterSize="0">
                              </SQLTask:ParameterBinding>
                            </SQLTask:SqlTaskData>
                          </DTS:ObjectData>
                        </DTS:Executable>
                        <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{CCFCC732-2B50-4E82-A428-70635EFC460E}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factPIFVIFDIFTransactionMonthly table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create Complete Transactional fact tables\SQL create factPIFVIFDIFTransactionMonthly table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                          <DTS:ObjectData>
                            <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                                 &#xA;DECLARE @IsIncremental INT = ?&#xA;DECLARE @UpdateDate DATETIME2 = ?&#xA;DECLARE @LowestDate DATETIME2 = '19000101'&#xA;DECLARE @LowestDateID int = CAST(CONVERT(varchar(10), @LowestDate, 112) AS INT)&#xA;&#xA;IF @IsIncremental = 0 SET @UpdateDate = @LowestDate&#xA;&#xA;DECLARE @UpdateDateID int = CAST(CONVERT(varchar(10), @UpdateDate, 112) AS INT)&#xA;DECLARE @UpdateMonthID int = (SELECT CAST(LEFT(CAST(@UpdateDateID AS VARCHAR(10)), 6) AS INT))&#xA;&#xA;DECLARE @FirstDateID int = (select ISNULL(MIN(SK_DateID), @LowestDateID) from [DataMart].[dimDate] &#xA;   WHERE SK_MonthID = @UpdateMonthID)&#xA;&#xA;SELECT @FirstDateID&#xA;&#xA;DELETE FROM [DataMart].[factPIFVIFDIFTransactionMonthly]&#xA;WHERE SK_TransactionMonthID &gt;= @UpdateMonthID&#xA;&#xA;INSERT INTO [DataMart].[factPIFVIFDIFTransactionMonthly]&#xA;([SK_TransactionMonthID]&#xA;      ,[SK_VehicleID]&#xA;      ,[SK_PolicyID]&#xA;      ,[SK_RatedDriverID]&#xA;      ,[SK_CoverageID]&#xA;      ,[SK_EndorsementID]&#xA;      ,[SK_ProducerID]&#xA;      ,[SK_CarrierID]&#xA;      ,[BK_PolicyID]&#xA;      ,[BK_VehicleID]&#xA;      ,[BK_DriverID]&#xA;      ,[NoValidDriver]&#xA;      ,[SK_ProgramID]&#xA;      ,[SK_ProgramGroupID]&#xA;      ,[SK_AgencyOfficeID]&#xA;)      &#xA;SELECT  [SK_MonthID] AS SK_TransactionMonthID&#xA;  ,[SK_VehicleID]&#xA;  ,[SK_PolicyID]&#xA;  ,[SK_RatedDriverID]&#xA;  ,[SK_CoverageID]&#xA;  ,[SK_EndorsementID]&#xA;  ,[SK_ProducerID]&#xA;  ,[SK_CarrierID]&#xA;  ,[BK_PolicyID]&#xA;  ,[BK_VehicleID]&#xA;  ,[BK_DriverID]&#xA;  ,[NoValidDriver]&#xA;  ,[SK_ProgramID]&#xA;  ,[SK_ProgramGroupID]&#xA;  ,[SK_AgencyOfficeID]&#xA;&#xA;FROM    [DataMart].[factPIFVIFDIFTransaction] AS fpif&#xA;JOIN [DataMart].[dimMonth] AS dm&#xA;  ON fpif.SK_TransactionDateID = CAST(CONVERT(VARCHAR(10), dm.EndDate, 112) AS INT)&#xA;WHERE SK_TransactionDateID &gt;= @FirstDateID&#xA;                                 &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                              <SQLTask:ParameterBinding SQLTask:DataType="17" SQLTask:DtsVariableName="User::IsIncremental" SQLTask:ParameterDirection="Input" SQLTask:ParameterName="0" SQLTask:ParameterSize="0">
                              </SQLTask:ParameterBinding>
                              <SQLTask:ParameterBinding SQLTask:DataType="7" SQLTask:DtsVariableName="User::IncrementalStartDate" SQLTask:ParameterDirection="Input" SQLTask:ParameterName="1" SQLTask:ParameterSize="0">
                              </SQLTask:ParameterBinding>
                            </SQLTask:SqlTaskData>
                          </DTS:ObjectData>
                        </DTS:Executable>
                        <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{F4E54671-EC22-4198-9AA5-05611A5A9B2A}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factInforcePremiumTransactionalMonthly table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create Complete Transactional fact tables\SQL create factInforcePremiumTransactionalMonthly table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                          <DTS:ObjectData>
                            <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                      &#xA;DECLARE @IsIncremental INT = ?&#xA;DECLARE @UpdateDate DATETIME2 = ?&#xA;DECLARE @LowestDate DATETIME2 = '19000101'&#xA;DECLARE @LowestDateID int = CAST(CONVERT(varchar(10), @LowestDate, 112) AS INT)&#xA;&#xA;IF @IsIncremental = 0 SET @UpdateDate = @LowestDate&#xA;&#xA;DECLARE @UpdateDateID int = CAST(CONVERT(varchar(10), @UpdateDate, 112) AS INT)&#xA;DECLARE @UpdateMonthID int = (SELECT CAST(LEFT(CAST(@UpdateDateID AS VARCHAR(10)), 6) AS INT))&#xA;&#xA;DECLARE @FirstDateID int = (select ISNULL(MIN(SK_DateID), @LowestDateID) from [DataMart].[dimDate] &#xA;   WHERE SK_MonthID = @UpdateMonthID)&#xA;&#xA;SELECT @FirstDateID&#xA;&#xA;DELETE FROM [DataMart].[factInforcePremiumTransactionalMonthly]&#xA;WHERE SK_TransactionMonthID &gt;= @UpdateMonthID&#xA;&#xA;INSERT INTO [DataMart].[factInforcePremiumTransactionalMonthly]&#xA;SELECT dd.SK_MonthID AS SK_TransactionMonthID&#xA;,inf.SK_VehicleID&#xA;,inf.SK_PolicyID&#xA;,inf.SK_RatedDriverID&#xA;,inf.SK_DriversID&#xA;,inf.SK_CoverageID&#xA;,inf.SK_ProducerID&#xA;,inf.SK_CarrierID&#xA;,inf.SK_ProgramID&#xA;,sum(inf.WP) AS InforceWP&#xA;FROM [DataMart].[factInforcePremiumTransactional] inf&#xA;JOIN [DataMart].[dimDate] dd ON inf.SK_TransactionDateID = dd.SK_DateID&#xA;WHERE inf.SK_TransactionDateID &gt;= @FirstDateID&#xA;GROUP BY dd.SK_MonthID&#xA;,inf.SK_VehicleID&#xA;,inf.SK_PolicyID&#xA;,inf.SK_RatedDriverID&#xA;,inf.SK_DriversID&#xA;,inf.SK_CoverageID&#xA;,inf.SK_ProducerID&#xA;,inf.SK_CarrierID&#xA;,inf.SK_ProgramID&#xA;                                      &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                              <SQLTask:ParameterBinding SQLTask:DataType="17" SQLTask:DtsVariableName="User::IsIncremental" SQLTask:ParameterDirection="Input" SQLTask:ParameterName="0" SQLTask:ParameterSize="0">
                              </SQLTask:ParameterBinding>
                              <SQLTask:ParameterBinding SQLTask:DataType="7" SQLTask:DtsVariableName="User::IncrementalStartDate" SQLTask:ParameterDirection="Input" SQLTask:ParameterName="1" SQLTask:ParameterSize="0">
                              </SQLTask:ParameterBinding>
                            </SQLTask:SqlTaskData>
                          </DTS:ObjectData>
                        </DTS:Executable>
                        <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{77E9AC65-64AC-42BF-A88D-CA2019EE4DE4}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factSoFarPremiumTransactionalMonthly table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create Complete Transactional fact tables\SQL create factSoFarPremiumTransactionalMonthly table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                          <DTS:ObjectData>
                            <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                                 &#xA;DECLARE @IsIncremental INT = ?&#xA;DECLARE @UpdateDate DATETIME2 = ?&#xA;DECLARE @LowestDate DATETIME2 = '19000101'&#xA;DECLARE @LowestDateID int = CAST(CONVERT(varchar(10), @LowestDate, 112) AS INT)&#xA;DECLARE @LowestMonthID int = (SELECT CAST(LEFT(CAST(@LowestDateID  AS VARCHAR(10)), 6) AS INT))&#xA;DECLARE @NA int = -1&#xA;&#xA;IF @IsIncremental = 0 SET @UpdateDate = @LowestDate&#xA;&#xA;DECLARE @UpdateDateID int = CAST(CONVERT(varchar(10), @UpdateDate, 112) AS INT)&#xA;DECLARE @UpdateMonthID int = (SELECT CAST(LEFT(CAST(@UpdateDateID AS VARCHAR(10)), 6) AS INT))&#xA;&#xA;DECLARE @FirstDateID int = (select ISNULL(MIN(SK_DateID), @LowestDateID) from [DataMart].[dimDate] &#xA;   WHERE SK_MonthID = @UpdateMonthID)&#xA;&#xA;DECLARE @PrevMonthID INT = (&#xA; SELECT ISNULL(MAX(SK_MonthID), @LowestMonthID) FROM [DataMart].[dimMonth]&#xA; WHERE SK_MonthID &lt; @UpdateMonthID)&#xA;&#xA;&#xA;DELETE FROM [DataMart].[factSoFarPremiumTransactionalMonthly]&#xA;WHERE  SK_TransactionMonthID &gt;= @UpdateMonthID&#xA;&#xA;;WITH GroupedPremiums AS&#xA;(&#xA;SELECT dm.SK_MonthID as [SK_TransactionMonthID], [SK_VehicleID], [SK_PolicyID], [SK_RatedDriverID], [SK_DriversID], [SK_CoverageID],&#xA; [SK_ProducerID], [SK_CarrierID], [SK_ProgramID], [SoFarWP], [SoFarEP]&#xA;FROM [DataMart].[factSoFarPremiumTransactionalMonthly] fpm&#xA;CROSS JOIN [DataMart].[dimMonth] as dm &#xA;WHERE [SK_TransactionMonthID] = @PrevMonthID AND dm.SK_MonthID &gt;= @UpdateMonthID&#xA;UNION ALL&#xA;SELECT dm.SK_MonthID AS SK_TransactionMonthID,  ISNULL([SK_VehicleID], @NA), ISNULL([SK_PolicyID], @NA), ISNULL([SK_RatedDriverID], @NA), ISNULL([SK_DriversID], @NA), &#xA; ISNULL([SK_CoverageID],@NA),&#xA; ISNULL([SK_ProducerID], @NA), ISNULL([SK_CarrierID], @NA), ISNULL([SK_ProgramID], @NA), ISNULL(sum(WP), 0) AS SoFarWP, ISNULL(sum(EP), 0) AS SoFarEP&#xA; &#xA;FROM [DataMart].[dimMonth] as dm&#xA; LEFT JOIN [DataMart].[factPremiumsTransactionalMonthly] AS fpm ON fpm.SK_TransactionMonthID &gt;= @UpdateMonthID AND fpm.SK_TransactionMonthID &lt;= dm.SK_MonthID&#xA;WHERE dm.SK_MonthID &gt;= @UpdateMonthID&#xA;GROUP BY dm.SK_MonthID, [SK_VehicleID], [SK_PolicyID], [SK_RatedDriverID], [SK_DriversID], [SK_CoverageID],&#xA; [SK_ProducerID], [SK_CarrierID], [SK_ProgramID]&#xA;)&#xA;INSERT INTO [DataMart].[factSoFarPremiumTransactionalMonthly]&#xA;SELECT [SK_TransactionMonthID], [SK_VehicleID], [SK_PolicyID], [SK_RatedDriverID], [SK_DriversID], [SK_CoverageID],&#xA; [SK_ProducerID], [SK_CarrierID], [SK_ProgramID], sum([SoFarWP]), sum([SoFarEP]) FROM GroupedPremiums&#xA;GROUP BY [SK_TransactionMonthID], [SK_VehicleID], [SK_PolicyID], [SK_RatedDriverID], [SK_DriversID], [SK_CoverageID],&#xA; [SK_ProducerID], [SK_CarrierID], [SK_ProgramID]&#xA;                            &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                              <SQLTask:ParameterBinding SQLTask:DataType="17" SQLTask:DtsVariableName="User::IsIncremental" SQLTask:ParameterDirection="Input" SQLTask:ParameterName="0" SQLTask:ParameterSize="0">
                              </SQLTask:ParameterBinding>
                              <SQLTask:ParameterBinding SQLTask:DataType="7" SQLTask:DtsVariableName="User::IncrementalStartDate" SQLTask:ParameterDirection="Input" SQLTask:ParameterName="1" SQLTask:ParameterSize="0">
                              </SQLTask:ParameterBinding>
                            </SQLTask:SqlTaskData>
                          </DTS:ObjectData>
                        </DTS:Executable>
                        <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{9741F103-27FE-4642-9F40-FA6FA9C35E12}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factPaymentTransaction table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create Complete Transactional fact tables\SQL create factPaymentTransaction table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                          <DTS:ObjectData>
                            <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                      &#xA;                                        DECLARE @OrgTimeZoneID int&#xA;                                        SELECT TOP 1 @OrgTimeZoneID = Timezone from [Extract].[P1_Organization]&#xA;  &#xA;                                        ;WITH PaymentTransactionsData AS&#xA;                                        (           &#xA;                                        SELECT  CAST(CONVERT(varchar(10), dbo.fFloorDateTime(dbo.fGetDateFromUTCDate(pt.TransactionDate, ISNULL(@OrgTimeZoneID, proggrp.TimeZone))), 112) AS INT) AS SK_TransactionDateID&#xA;                                          ,CAST(CONVERT(varchar(6), dbo.fFloorDateTime(dbo.fGetDateFromUTCDate(pt.TransactionDate, ISNULL(@OrgTimeZoneID, proggrp.TimeZone))), 112) AS INT) AS SK_TransactionMonthID&#xA;                                          ,dimpay.SK_PaymentTransactionID&#xA;                                          ,pol.SK_PolicyID             &#xA;                                          ,dendo.SK_EndorsementID&#xA;                                          ,ISNULL(dimprod.SK_ProducerID, -1) AS SK_ProducerID&#xA;                                          ,dcarr.SK_CarrierID&#xA;                                          ,ISNULL(pp.SK_ProgramID, -1) AS SK_ProgramID&#xA;                                          ,pt.PaymentTransactionID AS BK_PaymentTransactionID              &#xA;                                          ,CAST(pt.Amount AS DECIMAL(28, 14)) AS Amount &#xA; &#xA;                                        FROM&#xA;                                         [Extract].[P1_PaymentTransaction] AS pt&#xA;                                          LEFT JOIN [Extract].[P1_Payment] AS pay ON pt.PaymentID = pay.PaymentID&#xA;                                          LEFT JOIN (SELECT PolicyTermID, MIN(TriggeringEndorsementID) AS TriggeringEndorsementID FROM [Staging].[PeriodsData] GROUP BY PolicyTermID) AS first_tendo ON pt.PolicyTermID = first_tendo.PolicyTermID&#xA;                                          LEFT JOIN (SELECT [BK_PolicyTermID], MIN([BK_ProducerID]) AS ProducerID,  MIN([BK_ProgramGroupID]) AS BK_ProgramGroupID, MIN([BK_ProgramID]) AS BK_ProgramID  FROM [DataMart].[dimPolicy] GROUP BY [BK_PolicyTermID]) AS first_producer ON pt.PolicyTermID = first_producer.[BK_PolicyTermID]&#xA;                                          LEFT JOIN [Extract].[P1_Program] as prog ON prog.ProgramID = first_producer.BK_ProgramID     &#xA;                                          LEFT JOIN [Extract].[P1_ProgramGroup] AS proggrp ON proggrp.ProgramGroupID = first_producer.BK_ProgramGroupID&#xA;                                          LEFT JOIN [Staging].[PeriodsData] AS period ON period.PolicyTermID = pt.PolicyTermID AND period.PeriodActiveStartDate &lt;= pt.TransactionDate AND ISNULL(period.PeriodActiveEndDate, GETDATE()) &gt; pt.TransactionDate&#xA;                                          LEFT JOIN [Extract].[P1_PaymentType] AS ptype on ptype.PaymentTypeID = pay.PaymentType&#xA;                                          LEFT JOIN [DataMart].[dimPaymentTransaction] AS dimpay ON dimpay.BK_PaymentTransactionID = pt.PaymentTransactionID&#xA;                                          LEFT JOIN [Staging].[PolicyID] AS pol ON pol.BK_EndorsementID = ISNULL(period.TriggeringEndorsementID, first_tendo.TriggeringEndorsementID)&#xA;                                          LEFT JOIN [DataMart].[dimEndorsement] AS dendo ON dendo.BK_EndorsementID = ISNULL(period.TriggeringEndorsementID, first_tendo.TriggeringEndorsementID)           &#xA;                                          LEFT JOIN [DataMart].[dimProducer] AS dimprod ON dimprod.BK_ProducerID = first_producer.ProducerID&#xA;                                          LEFT JOIN [DataMart].[dimCarrier] AS dcarr ON dcarr.BK_CarrierID = prog.CarrierID &#xA;                                          LEFT JOIN [Staging].[PolicyProgram] AS pp ON pol.SK_PolicyID = pp.SK_PolicyID&#xA;                                        )&#xA;                                        MERGE [DataMart].[factPaymentTransaction] AS TGT&#xA;                                        USING (SELECT * FROM PaymentTransactionsData)&#xA;                                        AS PaymentTransactions &#xA;                                         ON TGT.BK_PaymentTransactionID = PaymentTransactions.BK_PaymentTransactionID&#xA;                                         AND TGT.SK_PaymentTransactionID = PaymentTransactions.SK_PaymentTransactionID&#xA;                                        WHEN MATCHED THEN UPDATE&#xA;                                        SET&#xA;                                         TGT.[SK_TransactionDateID] = PaymentTransactions.[SK_TransactionDateID],&#xA;                                         TGT.[SK_TransactionMonthID] = PaymentTransactions.[SK_TransactionMonthID],&#xA;                                         TGT.[SK_PolicyID] = PaymentTransactions.[SK_PolicyID],&#xA;                                         TGT.[SK_EndorsementID] = PaymentTransactions.[SK_EndorsementID],&#xA;                                         TGT.[SK_ProducerID] = PaymentTransactions.[SK_ProducerID],&#xA;                                         TGT.[SK_CarrierID] = PaymentTransactions.[SK_CarrierID],&#xA;                                         TGT.[SK_ProgramID] = PaymentTransactions.[SK_ProgramID],&#xA;                                         TGT.[Amount] = PaymentTransactions.[Amount]&#xA;                                        WHEN NOT MATCHED THEN&#xA;                                        INSERT&#xA;                                        (&#xA;                                         [SK_TransactionDateID]&#xA;                                         ,[SK_TransactionMonthID]&#xA;                                         ,[SK_PaymentTransactionID]&#xA;                                         ,[SK_PolicyID]&#xA;                                         ,[SK_EndorsementID]&#xA;                                         ,[SK_ProducerID]&#xA;                                         ,[SK_CarrierID]&#xA;                                         ,[SK_ProgramID]&#xA;                                         ,[BK_PaymentTransactionID]&#xA;                                         ,[Amount]&#xA;                                        ) &#xA;                                        VALUES&#xA;                                        (&#xA;                                         [SK_TransactionDateID]&#xA;                                         ,[SK_TransactionMonthID]&#xA;                                         ,[SK_PaymentTransactionID]&#xA;                                         ,[SK_PolicyID]&#xA;                                         ,[SK_EndorsementID]&#xA;                                         ,[SK_ProducerID]&#xA;                                         ,[SK_CarrierID]&#xA;                                         ,[SK_ProgramID]&#xA;                                         ,[BK_PaymentTransactionID]&#xA;                                         ,[Amount]&#xA;                                        );&#xA;          &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                            </SQLTask:SqlTaskData>
                          </DTS:ObjectData>
                        </DTS:Executable>
                        <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{7C327009-8BE1-46C9-947A-981B9B991908}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factCashAppliedTransaction table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create Complete Transactional fact tables\SQL create factCashAppliedTransaction table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                          <DTS:ObjectData>
                            <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                      &#xA;                                          DECLARE @OrgTimeZoneID INT;&#xA;&#xA;                                          DECLARE @IsIncremental INT = ?;&#xA;                                          DECLARE @UpdateDate DATETIME2 = ?;&#xA;&#xA;                                          IF @IsIncremental = 0 SET @UpdateDate = '19000101';&#xA;&#xA;                                          DECLARE @UpdateDateID int = CAST(CONVERT(varchar(10), @UpdateDate, 112) AS INT);&#xA;&#xA;                                          SELECT TOP 1 @OrgTimeZoneID = Timezone&#xA;                                          FROM [Extract].[P1_Organization];&#xA;&#xA;                                          DELETE FROM [DataMart].[factCashAppliedTransaction]&#xA;                                          WHERE SK_AppliedDateID &gt;= @UpdateDateID;&#xA;&#xA;                                          ;WITH CashAppliedData AS&#xA;                                          (&#xA;                                          SELECT SK_AppliedDateID&#xA;                                           ,CAST(LEFT(CAST(SK_AppliedDateID AS VARCHAR(8)), 6) AS INT) AS SK_AppliedMonthID&#xA;                                           ,SK_PolicyID&#xA;                                           ,SK_EndorsementID&#xA;                                           ,SK_ProducerID&#xA;                                           ,SK_CarrierID&#xA;                                           ,SK_ProgramID&#xA;                                           ,ISNULL(Premium, 0) AS Premium&#xA;                                           ,ISNULL(UndefinedFee, 0) AS UndefinedFee&#xA;                                           ,ISNULL(UserDefinedFee, 0) AS UserDefinedFee&#xA;                                           ,ISNULL(InstallmentFee, 0) AS InstallmentFee&#xA;                                           ,ISNULL(EndorsementFee, 0) AS EndorsementFee&#xA;                                           ,ISNULL(ShortPaymentFee, 0) AS ShortPaymentFee&#xA;                                           ,ISNULL(CancellationFee, 0) AS CancellationFee&#xA;                                           ,ISNULL(ReinstatementFee, 0) AS ReinstatementFee&#xA;                                           ,ISNULL(SR22ReinstatementFee, 0) AS SR22ReinstatementFee&#xA;                                           ,ISNULL(SR22Fee, 0) AS SR22Fee&#xA;                                           ,ISNULL(ReturnItemFee, 0) AS ReturnItemFee&#xA;                                           ,ISNULL(FraudFee, 0) AS FraudFee&#xA;                                           ,ISNULL(PolicyFee, 0) AS PolicyFee&#xA;                                           ,ISNULL(InstallmentEFTFee, 0) AS InstallmentEFTFee&#xA;                                           ,ISNULL(ReinstatementGoodDriverFee, 0) AS ReinstatementGoodDriverFee&#xA;                                           ,ISNULL(LateFee, 0) AS LateFee&#xA;                                           ,ISNULL(MVRFee, 0) AS MVRFee&#xA;                                           ,ISNULL(ReturnMailFee, 0) AS ReturnMailFee&#xA;                                           ,ISNULL(RegistrationFee, 0) AS RegistrationFee&#xA;                                           ,ISNULL(RewriteFee, 0) AS RewriteFee&#xA;                                           ,ISNULL(InstallmentRCCPFee, 0) AS InstallmentRCCPFee&#xA;                                           ,ISNULL(MotorVehicleLawEnforcementFee, 0) AS MotorVehicleLawEnforcementFee&#xA;                                           ,ISNULL(PolicyFeeGoodDriver, 0) AS PolicyFeeGoodDriver&#xA;                                           ,ISNULL(NSDFee, 0) AS NSDFee&#xA;                                              ,ISNULL(FR44Fee, 0) AS FR44Fee&#xA;                                              ,ISNULL(FR44ReinstatementFee, 0) AS FR44ReinstatementFee&#xA;                                              ,ISNULL(MGAFee, 0) AS MGAFee&#xA;                                              ,ISNULL(FloridaHurricaneCatastropheFee, 0) AS FloridaHurricaneCatastropheFee&#xA;                                              ,ISNULL(ServiceFee, 0) AS ServiceFee&#xA;                                              ,ISNULL(RoadsideMembershipFee, 0) AS RoadsideMembershipFee&#xA;                                              ,ISNULL(EFTReturnItemFee, 0) AS EFTReturnItemFee&#xA;                                              ,ISNULL(DeclinedPaymentFee, 0) AS DeclinedPaymentFee&#xA;                                              ,ISNULL(CancellationFeeforNonPayment, 0) AS CancellationFeeforNonPayment&#xA;                                              ,ISNULL(EndorsementFeeforGoodDriver, 0) AS EndorsementFeeforGoodDriver&#xA;                                           ,ISNULL(PaperDocumentFee, 0) AS PaperDocumentFee&#xA;                                           ,ISNULL(RenewalPolicyFee, 0) AS RenewalPolicyFee&#xA;                                           ,ISNULL(RenewalPolicyFeeforCaliforniaGoodDriver, 0) AS RenewalPolicyFeeforCaliforniaGoodDriver&#xA;                                           ,ISNULL(EFTReturnItemFeeforGoodDriver, 0) AS EFTReturnItemFeeforGoodDriver&#xA;                                           ,ISNULL(DeclinedPaymentFeeforGoodDriver, 0) AS DeclinedPaymentFeeforGoodDriver&#xA;                                           ,ISNULL(CheckReturnItemFeeforGoodDriver, 0) AS CheckReturnItemFeeforGoodDriver&#xA;                                           ,ISNULL(CheckReturnItemFee, 0) AS CheckReturnItemFee&#xA;                                          FROM (&#xA;                                           SELECT  CAST(CONVERT(VARCHAR(10), dbo.fFloorDateTime(dbo.fGetDateFromUTCDate(ca.DateApplied, @OrgTimeZoneID)), 112) AS INT) AS SK_AppliedDateID&#xA;                                            ,ISNULL(pol.SK_PolicyID, -1) AS SK_PolicyID&#xA;                                            ,ISNULL(dendo.SK_EndorsementID, -1) AS SK_EndorsementID&#xA;                                            ,ISNULL(dimprod.SK_ProducerID, - 1) AS SK_ProducerID&#xA;                                            ,ISNULL(dcarr.SK_CarrierID, - 1) AS SK_CarrierID&#xA;                                            ,ISNULL(pp.SK_ProgramID, - 1) AS SK_ProgramID&#xA;                                            ,CAST(ca.AmountApplied AS DECIMAL(28, 14)) AS AmountApplied&#xA;                                            ,CASE &#xA;                                             WHEN ard.FeeTypeID = - 1&#xA;                                              THEN 'Premium'&#xA;                                             WHEN ard.FeeTypeID &gt; - 1&#xA;                                              AND fee.FeeType IS NOT NULL&#xA;                                              AND replace(fee.FeeType, ' ', '') IN (&#xA;                                               'UserDefinedFee'&#xA;                                               ,'InstallmentFee'&#xA;                                               ,'EndorsementFee'&#xA;                                               ,'ShortPaymentFee'&#xA;                                               ,'CancellationFee'&#xA;                                               ,'ReinstatementFee'&#xA;                                               ,'SR22ReinstatementFee'&#xA;                                               ,'SR22Fee'&#xA;                                               ,'ReturnItemFee'&#xA;                                               ,'FraudFee'&#xA;                                               ,'PolicyFee'&#xA;                                               ,'InstallmentEFTFee'&#xA;                                               ,'ReinstatementGoodDriverFee'&#xA;                                               ,'LateFee'&#xA;                                               ,'MVRFee'&#xA;                                               ,'ReturnMailFee'&#xA;                                               ,'RegistrationFee'&#xA;                                               ,'RewriteFee'&#xA;                                               ,'InstallmentRCCPFee'&#xA;                                               ,'MotorVehicleLawEnforcementFee'&#xA;                                               ,'PolicyFeeGoodDriver'&#xA;                                               ,'NSDFee'&#xA;                                                      ,'FR44Fee'&#xA;                                                      ,'FR44ReinstatementFee'&#xA;                                                      ,'MGAFee'&#xA;                                                      ,'FloridaHurricaneCatastropheFee'&#xA;                                                      ,'ServiceFee'&#xA;                                                      ,'RoadsideMembershipFee'&#xA;                                                      ,'EFTReturnItemFee'&#xA;                                                      ,'DeclinedPaymentFee'&#xA;                                                      ,'CancellationFeeforNonPayment'&#xA;                                                      ,'EndorsementFeeforGoodDriver'&#xA;                                             ,'PaperDocumentFee' &#xA;                                             ,'RenewalPolicyFee'&#xA;                                             ,'RenewalPolicyFeeforCaliforniaGoodDriver'&#xA;                                             ,'EFTReturnItemFeeforGoodDriver'&#xA;                                             ,'DeclinedPaymentFeeforGoodDriver'&#xA;                                             ,'CheckReturnItemFeeforGoodDriver'&#xA;                                             ,'CheckReturnItemFee'&#xA;                                               )&#xA;                                              THEN replace(fee.FeeType, ' ', '')&#xA;                                             ELSE 'UndefinedFee'&#xA;                                             END CashAppliedType&#xA;                                           FROM [Extract].[P1_CashToApply] AS ca&#xA;                                           LEFT JOIN [Extract].[P1_AccountReceivableDetail] AS ard ON ard.AccountReceivableDetailID = ca.AccountReceivableDetailID&#xA;                                           LEFT JOIN [Extract].[P1_FeeType] AS fee ON fee.FeeTypeID = ard.FeeTypeID&#xA;                                           LEFT JOIN [DataMart].[dimPaymentTransaction] AS pt ON pt.BK_PaymentTransactionID = ca.PaymentTransactionID&#xA;                                           LEFT JOIN [Staging].[PeriodsData] AS period ON period.PolicyTermID = pt.BK_PolicyTermID&#xA;                                            AND period.PeriodActiveStartDate &lt;= ca.DateApplied&#xA;                                            AND ISNULL(period.PeriodActiveEndDate, GETDATE()) &gt; ca.DateApplied&#xA;                                           LEFT JOIN (&#xA;                                            SELECT PolicyTermID&#xA;                                             ,MIN(TriggeringEndorsementID) AS TriggeringEndorsementID&#xA;                                            FROM [Staging].[PeriodsData]&#xA;                                            GROUP BY PolicyTermID&#xA;                                            ) AS first_tendo ON pt.BK_PolicyTermID = first_tendo.PolicyTermID&#xA;                                           OUTER APPLY (&#xA;                                            SELECT BK_PolicyTermID, &#xA;                                             MIN(BK_ProducerID) AS ProducerID, MIN(BK_ProgramID) AS ProgramID&#xA;                                            FROM [DataMart].[dimPolicy] dp&#xA;                                            WHERE dp.BK_PolicyTermID = pt.BK_PolicyTermID&#xA;                                            GROUP BY BK_PolicyTermID&#xA;                                            ) AS first_producer&#xA;                                           OUTER APPLY (&#xA;                                            SELECT dcarr.SK_CarrierID&#xA;                                            FROM [Extract].[P1_Program] prog&#xA;                                             LEFT JOIN  [DataMart].[dimCarrier] AS dcarr &#xA;                                              ON dcarr.BK_CarrierID = prog.CarrierID&#xA;                                            WHERE prog.ProgramID = first_producer.ProgramID&#xA;                                           ) AS dcarr&#xA;                                           LEFT JOIN [Staging].[PolicyID] AS pol ON pol.BK_EndorsementID = ISNULL(period.TriggeringEndorsementID, first_tendo.TriggeringEndorsementID)&#xA;                                           LEFT JOIN [DataMart].[dimEndorsement] AS dendo ON dendo.BK_EndorsementID = ISNULL(period.TriggeringEndorsementID, first_tendo.TriggeringEndorsementID)&#xA;                                           LEFT JOIN [DataMart].[dimProducer] AS dimprod ON dimprod.BK_ProducerID = first_producer.ProducerID&#xA;                                           LEFT JOIN [Staging].[PolicyProgram] AS pp ON pol.SK_PolicyID = pp.SK_PolicyID&#xA;           &#xA;                                           ) AS SourceTable&#xA;                                          PIVOT(SUM(AmountApplied) FOR CashAppliedType IN (&#xA;                                             Premium&#xA;                                             ,UndefinedFee&#xA;                                             ,UserDefinedFee&#xA;                                             ,InstallmentFee&#xA;                                             ,EndorsementFee&#xA;                                             ,ShortPaymentFee&#xA;                                             ,CancellationFee&#xA;                                             ,ReinstatementFee&#xA;                                             ,SR22ReinstatementFee&#xA;                                             ,SR22Fee&#xA;                                             ,ReturnItemFee&#xA;                                             ,FraudFee&#xA;                                             ,PolicyFee&#xA;                                             ,InstallmentEFTFee&#xA;                                             ,ReinstatementGoodDriverFee&#xA;                                             ,LateFee&#xA;                                             ,MVRFee&#xA;                                             ,ReturnMailFee&#xA;                                             ,RegistrationFee&#xA;                                             ,RewriteFee&#xA;                                             ,InstallmentRCCPFee&#xA;                                             ,MotorVehicleLawEnforcementFee&#xA;                                             ,PolicyFeeGoodDriver&#xA;                                             ,NSDFee&#xA;                                                  ,FR44Fee&#xA;                                                  ,FR44ReinstatementFee&#xA;                                                  ,MGAFee&#xA;                                                  ,FloridaHurricaneCatastropheFee&#xA;                                                  ,ServiceFee&#xA;                                                  ,RoadsideMembershipFee&#xA;                                                  ,EFTReturnItemFee&#xA;                                                  ,DeclinedPaymentFee&#xA;                                                  ,CancellationFeeforNonPayment&#xA;                                                  ,EndorsementFeeforGoodDriver&#xA;                                            ,PaperDocumentFee&#xA;                                            ,RenewalPolicyFee&#xA;                                            ,RenewalPolicyFeeforCaliforniaGoodDriver&#xA;                                            ,EFTReturnItemFeeforGoodDriver&#xA;                                            ,DeclinedPaymentFeeforGoodDriver&#xA;                                            ,CheckReturnItemFeeforGoodDriver&#xA;                                            ,CheckReturnItemFee&#xA;                                           )) AS PivotTable&#xA;           &#xA;                                          )&#xA;                                          INSERT INTO [DataMart].[factCashAppliedTransaction] &#xA;                                          (&#xA;                                           [SK_AppliedDateID],&#xA;                                           [SK_AppliedMonthID],&#xA;                                           [SK_PolicyID],&#xA;                                           [SK_EndorsementID],&#xA;                                           [SK_ProducerID],&#xA;                                           [SK_CarrierID],&#xA;                                           [SK_ProgramID],&#xA;                                           [Premium],&#xA;                                           [UndefinedFee],&#xA;                                           [UserDefinedFee],&#xA;                                           [InstallmentFee],&#xA;                                           [EndorsementFee],&#xA;                                           [ShortPaymentFee],&#xA;                                           [CancellationFee],&#xA;                                           [ReinstatementFee],&#xA;                                           [SR22ReinstatementFee],&#xA;                                           [SR22Fee],&#xA;                                           [ReturnItemFee],&#xA;                                           [FraudFee],&#xA;                                           [PolicyFee],&#xA;                                           [InstallmentEFTFee],&#xA;                                           [ReinstatementGoodDriverFee],&#xA;                                           [LateFee],&#xA;                                           [MVRFee],&#xA;                                           [ReturnMailFee],&#xA;                                           [RegistrationFee],&#xA;                                           [RewriteFee],&#xA;                                           [InstallmentRCCPFee],&#xA;                                           [MotorVehicleLawEnforcementFee],&#xA;                                           [PolicyFeeGoodDriver],&#xA;                                           [NSDFee],&#xA;                                           [FR44Fee],&#xA;                                           [FR44ReinstatementFee],&#xA;                                           [MGAFee],&#xA;                                           [FloridaHurricaneCatastropheFee],&#xA;                                           [ServiceFee],&#xA;                                           [RoadsideMembershipFee],&#xA;                                           [EFTReturnItemFee],&#xA;                                           [DeclinedPaymentFee],&#xA;                                           [CancellationFeeforNonPayment],&#xA;                                           [EndorsementFeeforGoodDriver],&#xA;                                           [PaperDocumentFee],&#xA;                                           [RenewalPolicyFee],&#xA;                                           [RenewalPolicyFeeforCaliforniaGoodDriver],&#xA;                                           [EFTReturnItemFeeforGoodDriver],&#xA;                                           [DeclinedPaymentFeeforGoodDriver],&#xA;                                           [CheckReturnItemFeeforGoodDriver],&#xA;                                           [CheckReturnItemFee]&#xA;                                          )&#xA;                                          SELECT&#xA;                                           [SK_AppliedDateID],&#xA;                                           [SK_AppliedMonthID],&#xA;                                           [SK_PolicyID],&#xA;                                           [SK_EndorsementID],&#xA;                                           [SK_ProducerID],&#xA;                                           [SK_CarrierID],&#xA;                                           [SK_ProgramID],&#xA;                                           [Premium],&#xA;                                           [UndefinedFee],&#xA;                                           [UserDefinedFee],&#xA;                                           [InstallmentFee],&#xA;                                           [EndorsementFee],&#xA;                                           [ShortPaymentFee],&#xA;                                           [CancellationFee],&#xA;                                           [ReinstatementFee],&#xA;                                           [SR22ReinstatementFee],&#xA;                                           [SR22Fee],&#xA;                                           [ReturnItemFee],&#xA;                                           [FraudFee],&#xA;                                           [PolicyFee],&#xA;                                           [InstallmentEFTFee],&#xA;                                           [ReinstatementGoodDriverFee],&#xA;                                           [LateFee],&#xA;                                           [MVRFee],&#xA;                                           [ReturnMailFee],&#xA;                                           [RegistrationFee],&#xA;                                           [RewriteFee],&#xA;                                           [InstallmentRCCPFee],&#xA;                                           [MotorVehicleLawEnforcementFee],&#xA;                                           [PolicyFeeGoodDriver],&#xA;                                           [NSDFee],&#xA;                                           [FR44Fee],&#xA;                                           [FR44ReinstatementFee],&#xA;                                           [MGAFee],&#xA;                                           [FloridaHurricaneCatastropheFee],&#xA;                                           [ServiceFee],&#xA;                                           [RoadsideMembershipFee],&#xA;                                           [EFTReturnItemFee],&#xA;                                           [DeclinedPaymentFee],&#xA;                                           [CancellationFeeforNonPayment],&#xA;                                           [EndorsementFeeforGoodDriver],&#xA;                                           [PaperDocumentFee],&#xA;                                           [RenewalPolicyFee],&#xA;                                           [RenewalPolicyFeeforCaliforniaGoodDriver],&#xA;                                           [EFTReturnItemFeeforGoodDriver],&#xA;                                           [DeclinedPaymentFeeforGoodDriver],&#xA;                                           [CheckReturnItemFeeforGoodDriver],&#xA;                                           [CheckReturnItemFee]&#xA;                                          FROM CashAppliedData&#xA;                                          WHERE SK_AppliedDateID &gt;= @UpdateDateID;&#xA;                            &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                              <SQLTask:ParameterBinding SQLTask:DataType="17" SQLTask:DtsVariableName="User::IsIncremental" SQLTask:ParameterDirection="Input" SQLTask:ParameterName="0" SQLTask:ParameterSize="0">
                              </SQLTask:ParameterBinding>
                              <SQLTask:ParameterBinding SQLTask:DataType="7" SQLTask:DtsVariableName="User::IncrementalStartDate" SQLTask:ParameterDirection="Input" SQLTask:ParameterName="1" SQLTask:ParameterSize="0">
                              </SQLTask:ParameterBinding>
                            </SQLTask:SqlTaskData>
                          </DTS:ObjectData>
                        </DTS:Executable>
                      </DTS:Executables>
                      <DTS:PrecedenceConstraints>
                        <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{C19139EF-7776-4634-8F1F-B0FB4C27CBA5}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create Complete Transactional fact tables\SQL create Transactional EP EE base" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL create Transactional EP EE base_To_SQL create factPIFVIFDIFTransaction table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create Complete Transactional fact tables.PrecedenceConstraints[Constraint_SQL create Transactional EP EE base_To_SQL create factPIFVIFDIFTransaction table]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create Complete Transactional fact tables\SQL create factPIFVIFDIFTransaction table">
                        </DTS:PrecedenceConstraint>
                        <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{A638B722-3569-482A-815E-43EC9E381119}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create Complete Transactional fact tables\SQL create factPIFVIFDIFTransaction table" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL create factPIFVIFDIFTransaction table_To_SQL create factInforcePremiumTransactional table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create Complete Transactional fact tables.PrecedenceConstraints[Constraint_SQL create factPIFVIFDIFTransaction table_To_SQL create factInforcePremiumTransactional table]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create Complete Transactional fact tables\SQL create factInforcePremiumTransactional table">
                        </DTS:PrecedenceConstraint>
                        <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{E969F3DD-B8C1-4DAA-9099-BA018718582D}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create Complete Transactional fact tables\SQL create Transactional EP EE base" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL create Transactional EP EE base_To_SQL create factPremiumsTransactional table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create Complete Transactional fact tables.PrecedenceConstraints[Constraint_SQL create Transactional EP EE base_To_SQL create factPremiumsTransactional table]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create Complete Transactional fact tables\SQL create factPremiumsTransactional table">
                        </DTS:PrecedenceConstraint>
                        <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{5FA61843-BC46-431A-B168-0ACA936789CF}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create Complete Transactional fact tables\SQL create factPremiumsTransactional table" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL create factPremiumsTransactional table_To_SQL create factPremiumChangingEndorsement table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create Complete Transactional fact tables.PrecedenceConstraints[Constraint_SQL create factPremiumsTransactional table_To_SQL create factPremiumChangingEndorsement table]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create Complete Transactional fact tables\SQL create factPremiumChangingEndorsement table">
                        </DTS:PrecedenceConstraint>
                        <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{57416230-09C6-46D3-949E-B4962E46CDDF}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create Complete Transactional fact tables\SQL create factPremiumsTransactional table" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL create factPremiumsTransactional table_To_SQL create factPremiumsTransactionalMonthly table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create Complete Transactional fact tables.PrecedenceConstraints[Constraint_SQL create factPremiumsTransactional table_To_SQL create factPremiumsTransactionalMonthly table]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create Complete Transactional fact tables\SQL create factPremiumsTransactionalMonthly table">
                        </DTS:PrecedenceConstraint>
                        <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{A3666B4C-B2B2-4DF3-8959-B2F960BD12D5}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create Complete Transactional fact tables\SQL create factPIFVIFDIFTransaction table" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL create factPIFVIFDIFTransaction table_To_SQL create factPIFVIFDIFTransactionMonthly table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create Complete Transactional fact tables.PrecedenceConstraints[Constraint_SQL create factPIFVIFDIFTransaction table_To_SQL create factPIFVIFDIFTransactionMonthly table]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create Complete Transactional fact tables\SQL create factPIFVIFDIFTransactionMonthly table">
                        </DTS:PrecedenceConstraint>
                        <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{9F031E9F-F091-4989-A76F-497560A02006}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create Complete Transactional fact tables\SQL create factPIFVIFDIFTransactionMonthly table" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL create factPIFVIFDIFTransactionMonthly table_To_SQL create factInforcePremiumTransactionalMonthly table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create Complete Transactional fact tables.PrecedenceConstraints[Constraint_SQL create factPIFVIFDIFTransactionMonthly table_To_SQL create factInforcePremiumTransactionalMonthly table]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create Complete Transactional fact tables\SQL create factInforcePremiumTransactionalMonthly table">
                        </DTS:PrecedenceConstraint>
                        <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{18452FAD-1F7C-4044-AE9D-E530294FB7E6}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create Complete Transactional fact tables\SQL create factInforcePremiumTransactional table" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL create factInforcePremiumTransactional table_To_SQL create factInforcePremiumTransactionalMonthly table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create Complete Transactional fact tables.PrecedenceConstraints[Constraint_SQL create factInforcePremiumTransactional table_To_SQL create factInforcePremiumTransactionalMonthly table]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create Complete Transactional fact tables\SQL create factInforcePremiumTransactionalMonthly table">
                        </DTS:PrecedenceConstraint>
                        <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{AAA1074A-1CB7-46E4-BA8C-2B21A63A498E}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create Complete Transactional fact tables\SQL create factPremiumsTransactionalMonthly table" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL create factPremiumsTransactionalMonthly table_To_SQL create factSoFarPremiumTransactionalMonthly table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create Complete Transactional fact tables.PrecedenceConstraints[Constraint_SQL create factPremiumsTransactionalMonthly table_To_SQL create factSoFarPremiumTransactionalMonthly table]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create Complete Transactional fact tables\SQL create factSoFarPremiumTransactionalMonthly table">
                        </DTS:PrecedenceConstraint>
                      </DTS:PrecedenceConstraints>
                      <DTS:PropertyExpression DTS:Name="Disable">!@[User::config_Process_TransactionalDataMart]</DTS:PropertyExpression>
                    </DTS:Executable>
                    <DTS:Executable DTS:CreationName="STOCK:SEQUENCE" DTS:DTSID="{DA8F9062-9552-4BDA-80B6-F2EC47D51AA9}" DTS:ExecutableType="STOCK:SEQUENCE" DTS:LocaleID="-1" DTS:ObjectName="SEQC Create empty placeholder Transactional fact tables" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create empty placeholder Transactional fact tables">
                      <DTS:Executables>
                        <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{68FC1EFA-FB6F-4F6F-B915-F8BF7D000BF8}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factPremiumsTransactional table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create empty placeholder Transactional fact tables\SQL create factPremiumsTransactional table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                          <DTS:ObjectData>
                            <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                                 &#xA;           CREATE TABLE [DataMart].[factPremiumsTransactional]&#xA;           (&#xA;            [SK_TransactionDateID] [int] NULL,                        &#xA;            [SK_VehicleID] [int] NULL,&#xA;            [SK_PolicyID] [int] NULL,&#xA;            [SK_RatedDriverID] [int] NOT NULL,&#xA;            [SK_DriversID] [int] NULL,&#xA;            [SK_CoverageID] [int] NULL,&#xA;            [SK_EndorsementID] [int] NULL,&#xA;            [SK_ProducerID] [int] NULL,&#xA;            [BK_TriggeringEndorsementID] [int] NULL,&#xA;            [SK_CarrierID] [int] NULL,&#xA;                        [SK_ProgramID] [int] NULL,&#xA;                        [SK_ProgramGroupID] int NOT NULL,&#xA;                        [BK_PolicyTermID] [int] NULL,&#xA;                        [SK_AgencyOfficeID] int NULL,&#xA;            [EP] [decimal](38, 13) NULL,&#xA;            [EE] [int] NULL,&#xA;            [WP] [decimal](38, 12) NULL,&#xA;            [WE] [int] NULL&#xA;           )&#xA;           &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                            </SQLTask:SqlTaskData>
                          </DTS:ObjectData>
                        </DTS:Executable>
                        <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{01A65B1D-3192-4106-ABBC-F8DD956545E9}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factPremiumsTransactionalMonthly table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create empty placeholder Transactional fact tables\SQL create factPremiumsTransactionalMonthly table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                          <DTS:ObjectData>
                            <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                                 &#xA;           CREATE TABLE [DataMart].[factPremiumsTransactionalMonthly]&#xA;           (&#xA;            [SK_TransactionMonthID] [int] NULL,                        &#xA;            [SK_VehicleID] [int] NULL,&#xA;            [SK_PolicyID] [int] NULL,&#xA;            [SK_RatedDriverID] [int] NOT NULL,&#xA;            [SK_DriversID] [int] NULL,&#xA;            [SK_CoverageID] [int] NULL,&#xA;            [SK_EndorsementID] [int] NULL,&#xA;            [SK_ProducerID] [int] NULL,&#xA;            [BK_TriggeringEndorsementID] [int] NULL,&#xA;            [SK_CarrierID] [int] NULL,&#xA;                        [SK_ProgramID] [int] NULL,&#xA;                        [SK_ProgramGroupID] int NOT NULL,&#xA;                        [BK_PolicyTermID] [int] NULL,&#xA;                        [SK_AgencyOfficeID] int NULL,&#xA;            [EP] [decimal](38, 13) NULL,&#xA;            [EE] [int] NULL,&#xA;            [WP] [decimal](38, 12) NULL,&#xA;            [WE] [int] NULL&#xA;           )&#xA;           &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                            </SQLTask:SqlTaskData>
                          </DTS:ObjectData>
                        </DTS:Executable>
                        <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{FA257806-6106-47AC-B765-8246E511A9E5}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factSoFarPremiumTransactionalMonthly table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create empty placeholder Transactional fact tables\SQL create factSoFarPremiumTransactionalMonthly table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                          <DTS:ObjectData>
                            <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                                 &#xA;                                      CREATE TABLE [DataMart].[factSoFarPremiumTransactionalMonthly](&#xA;                                       [SK_TransactionMonthID] [int] NOT NULL,&#xA;                                       [SK_VehicleID] [int] NULL,&#xA;                                       [SK_PolicyID] [int] NULL,&#xA;                                       [SK_RatedDriverID] [int] NULL,&#xA;                                       [SK_DriversID] [int] NULL,&#xA;                                       [SK_CoverageID] [int] NULL,&#xA;                                       [SK_ProducerID] [int] NULL,&#xA;                                       [SK_CarrierID] [int] NULL,&#xA;                                       [SK_ProgramID] [int] NULL,&#xA;                                       [SoFarWP] [decimal](38, 12) NOT NULL,&#xA;                                       [SoFarEP] [decimal](38, 13) NOT NULL&#xA;                                      )                                      &#xA;                           &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                            </SQLTask:SqlTaskData>
                          </DTS:ObjectData>
                        </DTS:Executable>
                        <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{7DAAA4C8-43F5-4523-A342-68F1C9815676}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factPaymentTransaction" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create empty placeholder Transactional fact tables\SQL create factPaymentTransaction" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                          <DTS:ObjectData>
                            <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                      &#xA;           CREATE TABLE [DataMart].[factPaymentTransaction]&#xA;           (&#xA;            [SK_TransactionDateID] [int] NULL,&#xA;                        [SK_TransactionMonthID] [int] NULL,&#xA;            [SK_PaymentTransactionID] [int] NULL,&#xA;            [SK_PolicyID] [int] NULL,&#xA;            [SK_EndorsementID] [int] NULL,&#xA;            [SK_ProducerID] [int] NOT NULL,&#xA;            [SK_CarrierID] [int] NULL,&#xA;                        [SK_ProgramID] [int] NULL,&#xA;            [BK_PaymentTransactionID] [int] NOT NULL,&#xA;            [Amount] [decimal](28, 14) NULL&#xA;           )           &#xA;          &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                            </SQLTask:SqlTaskData>
                          </DTS:ObjectData>
                        </DTS:Executable>
                        <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{5CAD048E-A621-4A4C-8450-B302A26AD01D}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factCashAppliedTransaction" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create empty placeholder Transactional fact tables\SQL create factCashAppliedTransaction" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                          <DTS:ObjectData>
                            <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                      &#xA;            CREATE TABLE [DataMart].[factCashAppliedTransaction]&#xA;            (&#xA;             [SK_AppliedDateID] [int] NULL,&#xA;                          [SK_AppliedMonthID] [int] NULL,&#xA;             [SK_PolicyID] [int] NULL,&#xA;             [SK_EndorsementID] [int] NULL,&#xA;             [SK_ProducerID] [int] NOT NULL,&#xA;             [SK_CarrierID] [int] NULL,&#xA;                          [SK_ProgramID] [int] NULL,&#xA;             [Premium] [decimal](38, 14) NOT NULL,&#xA;             [UndefinedFee] [decimal](38, 14) NOT NULL,&#xA;             [UserDefinedFee] [decimal](38, 14) NOT NULL,&#xA;             [InstallmentFee] [decimal](38, 14) NOT NULL,&#xA;             [EndorsementFee] [decimal](38, 14) NOT NULL,&#xA;             [ShortPaymentFee] [decimal](38, 14) NOT NULL,&#xA;             [CancellationFee] [decimal](38, 14) NOT NULL,&#xA;             [ReinstatementFee] [decimal](38, 14) NOT NULL,&#xA;             [SR22ReinstatementFee] [decimal](38, 14) NOT NULL,&#xA;             [SR22Fee] [decimal](38, 14) NOT NULL,&#xA;             [ReturnItemFee] [decimal](38, 14) NOT NULL,&#xA;             [FraudFee] [decimal](38, 14) NOT NULL,&#xA;             [PolicyFee] [decimal](38, 14) NOT NULL,&#xA;             [InstallmentEFTFee] [decimal](38, 14) NOT NULL,&#xA;             [ReinstatementGoodDriverFee] [decimal](38, 14) NOT NULL,&#xA;             [LateFee] [decimal](38, 14) NOT NULL,&#xA;             [MVRFee] [decimal](38, 14) NOT NULL,&#xA;             [ReturnMailFee] [decimal](38, 14) NOT NULL,&#xA;             [RegistrationFee] [decimal](38, 14) NOT NULL,&#xA;             [RewriteFee] [decimal](38, 14) NOT NULL,&#xA;             [InstallmentRCCPFee] [decimal](38, 14) NOT NULL,&#xA;             [MotorVehicleLawEnforcementFee] [decimal](38, 14) NOT NULL,&#xA;             [PolicyFeeGoodDriver] [decimal](38, 14) NOT NULL,&#xA;             [NSDFee] [decimal](38, 14) NOT NULL&#xA;            )&#xA;          &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                            </SQLTask:SqlTaskData>
                          </DTS:ObjectData>
                        </DTS:Executable>
                        <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{ED747F10-834D-47B9-82D2-105117F71941}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factInforcePremiumTransactional table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create empty placeholder Transactional fact tables\SQL create factInforcePremiumTransactional table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                          <DTS:ObjectData>
                            <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                          &#xA;CREATE TABLE [DataMart].[factInforcePremiumTransactional](&#xA; [SK_TransactionDateID] [int] NOT NULL,&#xA; [SK_VehicleID] [int] NOT NULL,&#xA; [SK_PolicyID] [int] NOT NULL,&#xA; [SK_RatedDriverID] [int] NOT NULL,&#xA; [SK_DriversID] [int] NOT NULL,&#xA; [SK_CoverageID] [int] NOT NULL,&#xA; [SK_EndorsementID] [int] NOT NULL,&#xA; [SK_ProducerID] [int] NOT NULL,&#xA; [BK_TriggeringEndorsementID] [int] NULL,&#xA; [SK_CarrierID] [int] NULL,&#xA; [SK_ProgramID] [int] NOT NULL,&#xA; [SK_ProgramGroupID] [int] NOT NULL,&#xA; [BK_PolicyTermID] [int] NULL,&#xA; [SK_AgencyOfficeID] [int] NOT NULL,&#xA; [WP] [decimal](38, 12) NULL,&#xA; [WE] [int] NULL&#xA;) ON [PRIMARY]&#xA;                                        &#xA;                           &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                            </SQLTask:SqlTaskData>
                          </DTS:ObjectData>
                        </DTS:Executable>
                        <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{38307900-EB41-4864-8FFC-41BADCC41B58}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factInforcePremiumTransactionalMonthly table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create empty placeholder Transactional fact tables\SQL create factInforcePremiumTransactionalMonthly table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                          <DTS:ObjectData>
                            <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                          &#xA;&#xA;                                        CREATE TABLE [DataMart].[factInforcePremiumTransactionalMonthly](&#xA;                                         [SK_TransactionMonthID] [int] NULL,&#xA;                                         [SK_VehicleID] [int] NULL,&#xA;                                         [SK_PolicyID] [int] NULL,&#xA;                                         [SK_RatedDriverID] [int] NULL,&#xA;                                         [SK_DriversID] [int] NULL,&#xA;                                         [SK_CoverageID] [int] NULL,&#xA;                                         [SK_ProducerID] [int] NULL,&#xA;                                         [SK_CarrierID] [int] NULL,&#xA;                                         [SK_ProgramID] [int] NULL,&#xA;                                         [InforceWP] [decimal](38, 12) NOT NULL                                         &#xA;                                        )                                      &#xA;                           &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                            </SQLTask:SqlTaskData>
                          </DTS:ObjectData>
                        </DTS:Executable>
                        <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{FCE9FB91-6AD7-4CF0-8D2B-8FA06C719E32}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factPIFVIFDIFTransaction table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create empty placeholder Transactional fact tables\SQL create factPIFVIFDIFTransaction table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                          <DTS:ObjectData>
                            <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                        &#xA;                                        CREATE TABLE [DataMart].[factPIFVIFDIFTransaction](&#xA;                                         [SK_TransactionDateID] [int] NULL,&#xA;                                         [SK_VehicleID] [int] NULL,&#xA;                                         [SK_PolicyID] [int] NULL,&#xA;                                         [SK_RatedDriverID] [int] NOT NULL,&#xA;                                         [SK_CoverageID] [int] NULL,&#xA;                                         [SK_EndorsementID] [int] NULL,&#xA;                                         [SK_ProducerID] [int] NULL,&#xA;                                         [SK_CarrierID] [int] NULL,&#xA;                                         [BK_PolicyID] [int] NULL,&#xA;                                         [BK_VehicleID] [int] NULL,&#xA;                                         [BK_DriverID] [int] NULL,&#xA;                                         [NoValidDriver] [int] NULL,&#xA;                                         [SK_ProgramID] [int] NOT NULL,&#xA;           [SK_ProgramGroupID] [int] NOT NULL,&#xA;           [SK_AgencyOfficeID] [int] NOT NULL&#xA;                                        )                                      &#xA;                           &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                            </SQLTask:SqlTaskData>
                          </DTS:ObjectData>
                        </DTS:Executable>
                        <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{F19303E8-78DC-4F40-933A-DD7ED06870A2}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factPIFVIFDIFTransactionMonthly table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts\SEQC Create Transactional fact tables\SEQC Create empty placeholder Transactional fact tables\SQL create factPIFVIFDIFTransactionMonthly table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                          <DTS:ObjectData>
                            <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                       &#xA;                                      CREATE TABLE [DataMart].[factPIFVIFDIFTransactionMonthly](&#xA;                                       [SK_TransactionMonthID] [int] NULL,&#xA;                                       [SK_VehicleID] [int] NULL,&#xA;                                       [SK_PolicyID] [int] NULL,&#xA;                                       [SK_RatedDriverID] [int] NOT NULL,&#xA;                                       [SK_CoverageID] [int] NULL,&#xA;                                       [SK_EndorsementID] [int] NULL,&#xA;                                       [SK_ProducerID] [int] NULL,&#xA;                                       [SK_CarrierID] [int] NULL,&#xA;                                       [BK_PolicyID] [int] NULL,&#xA;                                       [BK_VehicleID] [int] NULL,&#xA;                                       [BK_DriverID] [int] NULL,&#xA;                                       [NoValidDriver] [int] NULL,&#xA;                                       [SK_ProgramID] [int] NOT NULL,&#xA;            [SK_ProgramGroupID] [int] NOT NULL,&#xA;            [SK_AgencyOfficeID] [int] NOT NULL&#xA;                                      )                                      &#xA;                           &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                            </SQLTask:SqlTaskData>
                          </DTS:ObjectData>
                        </DTS:Executable>
                      </DTS:Executables>
                      <DTS:PropertyExpression DTS:Name="Disable">@[User::config_Process_TransactionalDataMart]</DTS:PropertyExpression>
                    </DTS:Executable>
                  </DTS:Executables>
                </DTS:Executable>
              </DTS:Executables>
            </DTS:Executable>
            <DTS:Executable DTS:CreationName="STOCK:SEQUENCE" DTS:DTSID="{4D36472D-1259-4F8B-8CB4-276AC27B0A76}" DTS:ExecutableType="STOCK:SEQUENCE" DTS:LocaleID="-1" DTS:ObjectName="SEQC Create Claim Facts" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts">
              <DTS:Executables>
                <DTS:Executable DTS:CreationName="STOCK:SEQUENCE" DTS:DTSID="{AD5E00AB-80DB-4C21-A039-179277342134}" DTS:ExecutableType="STOCK:SEQUENCE" DTS:LocaleID="-1" DTS:ObjectName="SEQC Create Claim Fact Tables" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts\SEQC Create Claim Fact Tables">
                  <DTS:Executables>
                    <DTS:Executable DTS:CreationName="STOCK:SEQUENCE" DTS:DTSID="{D604840D-3A50-496A-894F-E88B596BF175}" DTS:ExecutableType="STOCK:SEQUENCE" DTS:LocaleID="-1" DTS:ObjectName="SEQC Create Empty Claim Fact Tables" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts\SEQC Create Claim Fact Tables\SEQC Create Empty Claim Fact Tables">
                      <DTS:Executables>
                        <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{639ADD8C-08EA-4C8C-94F4-88587BD565FE}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factClaim" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts\SEQC Create Claim Fact Tables\SEQC Create Empty Claim Fact Tables\SQL create factClaim" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                          <DTS:ObjectData>
                            <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                      &#xA;           -- Create [DataMart].[factClaim]&#xA;           CREATE TABLE [DataMart].[factClaim]&#xA;           (&#xA;            [SK_CY_DateID] [int] NULL,&#xA;            [SK_AY_DateID] [int] NULL,&#xA;            [SK_PY_DateID] [int] NOT NULL,&#xA;            [SK_RY_DateID] [int] NULL,&#xA;            [SK_VehicleID] [int] NULL,&#xA;            [SK_PolicyID] [int] NOT NULL,&#xA;            [SK_RatedDriverID] [int] NULL,&#xA;            [SK_DriversID] [int]  NULL,&#xA;            [SK_ClaimID] [int] NULL,&#xA;            [SK_IncidentDriverID] [int] NULL,&#xA;            [SK_ProducerID] [int] NULL,&#xA;            [SK_CarrierID] [int] NULL,&#xA;            [SK_ProgramID] [int] NULL,&#xA;            [BK_ClaimID] [varchar](20) NULL,&#xA;            [BK_ClaimNumber] [varchar](20) NULL,&#xA;            [BK_PolicyTermID] [int] NOT NULL,&#xA;            [BK_VehicleID] [int] NOT NULL,&#xA;                        [SK_Transaction_DateID] [int] NULL&#xA;           )                       &#xA;            &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                            </SQLTask:SqlTaskData>
                          </DTS:ObjectData>
                        </DTS:Executable>
                        <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{B4C4A573-2359-4FCD-8BB0-1F8F4A3728D0}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factFeature" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts\SEQC Create Claim Fact Tables\SEQC Create Empty Claim Fact Tables\SQL create factFeature" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                          <DTS:ObjectData>
                            <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                      &#xA;            CREATE TABLE [DataMart].[factFeature]&#xA;            (&#xA;             [SK_CY_DateID] [int] NULL,&#xA;             [SK_AY_DateID] [int] NULL,&#xA;             [SK_PY_DateID] [int] NOT NULL,&#xA;             [SK_RY_DateID] [int] NULL,&#xA;             [SK_VehicleID] [int] NULL,&#xA;             [SK_PolicyID] [int] NOT NULL,&#xA;             [SK_RatedDriverID] [int] NULL,&#xA;             [SK_DriversID] [int] NULL,&#xA;             [SK_CoverageID] [int] NULL,&#xA;             [SK_ClaimID] [int] NULL,&#xA;             [SK_FeatureID] [int] NULL,&#xA;             [SK_IncidentDriverID] [int] NULL,&#xA;             [SK_ProducerID] [int] NULL,&#xA;             [SK_CarrierID] [int] NULL,&#xA;             [SK_ProgramID] [int] NULL,&#xA;                          [SK_Transaction_DateID] [int] NULL&#xA;            )&#xA;            &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                            </SQLTask:SqlTaskData>
                          </DTS:ObjectData>
                        </DTS:Executable>
                        <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{CAFE6EE4-77D2-41A0-9954-2DB163259F26}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factExpense" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts\SEQC Create Claim Fact Tables\SEQC Create Empty Claim Fact Tables\SQL create factExpense" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                          <DTS:ObjectData>
                            <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                      &#xA;                    CREATE TABLE [DataMart].[factExpense]&#xA;                     (&#xA;                      [SK_CY_DateID] [INT] NULL&#xA;                     ,[SK_AY_DateID] [INT] NULL&#xA;                     ,[SK_PY_DateID] [INT] NOT NULL&#xA;                     ,[SK_RY_DateID] [INT] NULL&#xA;                     ,[SK_VehicleID] [INT] NULL&#xA;                     ,[SK_PolicyID] [INT] NOT NULL&#xA;                     ,[SK_RatedDriverID] [INT] NULL&#xA;                     ,[SK_DriversID] [INT] NULL&#xA;                     ,[SK_CoverageID] [INT] NULL&#xA;                     ,[SK_ClaimID] [INT] NULL&#xA;                     ,[SK_FeatureID] [INT] NULL&#xA;                     ,[SK_IncidentDriverID] [INT] NULL&#xA;                     ,[SK_ProducerID] [INT] NULL&#xA;                     ,[SK_CarrierID] [INT] NULL&#xA;                     ,[SK_ProgramID] [INT] NULL&#xA;                     ,[SK_ProgramGroupID] [INT] NULL&#xA;                     ,[SK_AgencyOfficeID] [INT] NULL&#xA;                     ,[LossPaid] [DECIMAL](38, 10) NULL&#xA;                     ,[ExpensePaid] [DECIMAL](38, 10) NULL&#xA;                     ,[LegalExpensePaid] [DECIMAL](38, 10) NULL&#xA;                     ,[SubroRecovered] [DECIMAL](38, 10) NULL&#xA;                     ,[SalvageRecovered] [DECIMAL](38, 10) NULL&#xA;                                          ,[SK_Transaction_DateID] [int] NULL&#xA;                     )            &#xA;                   &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                            </SQLTask:SqlTaskData>
                          </DTS:ObjectData>
                        </DTS:Executable>
                        <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{13B740E7-D2D9-40BC-B236-67B99DE514E6}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factReserve" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts\SEQC Create Claim Fact Tables\SEQC Create Empty Claim Fact Tables\SQL create factReserve" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                          <DTS:ObjectData>
                            <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                      &#xA;                    CREATE TABLE [DataMart].[factReserve]&#xA;                    (&#xA;                     [SK_CY_DateID] [int] NULL,&#xA;                     [SK_AY_DateID] [int] NULL,&#xA;                     [SK_PY_DateID] [int] NOT NULL,&#xA;                     [SK_RY_DateID] [int] NULL,&#xA;                     [SK_VehicleID] [int] NULL,&#xA;                     [SK_PolicyID] [int] NOT NULL,&#xA;                     [SK_RatedDriverID] [int] NULL,&#xA;                     [SK_DriversID] [int] NULL,&#xA;                     [SK_CoverageID] [int] NULL,&#xA;                     [SK_ClaimID] [int] NULL,&#xA;                     [SK_FeatureID] [int] NULL,&#xA;                     [SK_IncidentDriverID] [int] NULL,&#xA;                     [SK_ProducerID] [int] NULL,&#xA;                     [SK_CarrierID] [int] NULL,&#xA;                     [SK_ProgramID] [int] NULL,&#xA;                     [SK_ProgramGroupID] [INT] NULL,&#xA;                     [SK_AgencyOfficeID] [INT] NULL,&#xA;                     [LossReserve] [decimal](38, 10) NULL,&#xA;                     [ExpenseReserve] [decimal](38, 10) NULL,&#xA;                     [LegalExpenseReserve] [decimal](38, 10) NULL,&#xA;                     [RecoveryReserve] [decimal](38, 10) NULL,&#xA;                                          [SK_Transaction_DateID] [int] NULL&#xA;            )&#xA;            &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                            </SQLTask:SqlTaskData>
                          </DTS:ObjectData>
                        </DTS:Executable>
                        <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{E26308BC-141E-49CE-98E9-C338A70F9D18}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factClaimMonthly" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts\SEQC Create Claim Fact Tables\SEQC Create Empty Claim Fact Tables\SQL create factClaimMonthly" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                          <DTS:ObjectData>
                            <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                      &#xA;            CREATE TABLE [DataMart].[factClaimMonthly]&#xA;            (&#xA;             [SK_CY_MonthID] [int] NULL,&#xA;             [SK_AY_MonthID] [int] NULL,&#xA;             [SK_PY_MonthID] [int] NOT NULL,&#xA;             [SK_RY_MonthID] [int] NULL,&#xA;             [SK_VehicleID] [int] NULL,&#xA;             [SK_PolicyID] [int] NOT NULL,&#xA;             [SK_RatedDriverID] [int] NULL,&#xA;             [SK_DriversID] [int] NOT NULL,&#xA;             [SK_ClaimID] [int] NOT NULL,&#xA;             [SK_IncidentDriverID] [int] NULL,&#xA;             [SK_ProducerID] [int] NULL,&#xA;             [SK_CarrierID] [int] NULL,&#xA;                          [SK_ProgramID] [int] NULL,&#xA;             [BK_ClaimID] [varchar](20) NULL,&#xA;             [BK_ClaimNumber] [varchar](20) NULL,&#xA;             [BK_PolicyTermID] [int] NOT NULL,&#xA;             [BK_VehicleID] [int] NOT NULL,&#xA;                          [SK_Transaction_MonthID] [int] NULL&#xA;            )&#xA;            &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                            </SQLTask:SqlTaskData>
                          </DTS:ObjectData>
                        </DTS:Executable>
                        <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{36CEEE16-C3EB-4F2D-B0B8-AD58B27D5A9B}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factFeatureMonthly" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts\SEQC Create Claim Fact Tables\SEQC Create Empty Claim Fact Tables\SQL create factFeatureMonthly" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                          <DTS:ObjectData>
                            <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                      &#xA;            CREATE TABLE [DataMart].[factFeatureMonthly]&#xA;            (&#xA;             [SK_CY_MonthID] [int] NULL,&#xA;             [SK_AY_MonthID] [int] NULL,&#xA;             [SK_PY_MonthID] [int] NOT NULL,&#xA;             [SK_RY_MonthID] [int] NULL,&#xA;             [SK_VehicleID] [int] NULL,&#xA;             [SK_PolicyID] [int] NOT NULL,&#xA;             [SK_RatedDriverID] [int] NULL,&#xA;             [SK_DriversID] [int] NULL,&#xA;             [SK_CoverageID] [int] NULL,&#xA;             [SK_ClaimID] [int] NULL,&#xA;             [SK_FeatureID] [int] NULL,&#xA;             [SK_IncidentDriverID] [int] NULL,&#xA;             [SK_ProducerID] [int] NULL,&#xA;             [SK_CarrierID] [int] NULL,&#xA;                          [SK_ProgramID] [int] NULL,&#xA;                          [SK_Transaction_MonthID] [int] NULL&#xA;            )&#xA;            &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                            </SQLTask:SqlTaskData>
                          </DTS:ObjectData>
                        </DTS:Executable>
                        <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{23F904F4-9A7F-4C54-B4A6-06038D4423A3}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factExpenseMonthly table" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts\SEQC Create Claim Fact Tables\SEQC Create Empty Claim Fact Tables\SQL create factExpenseMonthly table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                          <DTS:ObjectData>
                            <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                      &#xA;                    CREATE TABLE [DataMart].[factExpenseMonthly]&#xA;                     (&#xA;                      [SK_CY_MonthID] [INT] NULL&#xA;                     ,[SK_AY_MonthID] [INT] NULL&#xA;                     ,[SK_PY_MonthID] [INT] NOT NULL&#xA;                     ,[SK_RY_MonthID] [INT] NULL&#xA;                     ,[SK_VehicleID] [INT] NOT NULL&#xA;                     ,[SK_PolicyID] [INT] NOT NULL&#xA;                     ,[SK_RatedDriverID] [INT] NULL&#xA;                     ,[SK_DriversID] [INT] NULL&#xA;                     ,[SK_CoverageID] [INT] NULL&#xA;                     ,[SK_ClaimID] [INT] NULL&#xA;                     ,[SK_FeatureID] [INT] NULL&#xA;                     ,[SK_IncidentDriverID] [INT] NULL&#xA;                     ,[SK_ProducerID] [INT] NULL&#xA;                     ,[SK_CarrierID] [INT] NULL&#xA;                     ,[SK_ProgramID] [INT] NULL&#xA;                     ,[SK_ProgramGroupID] [INT] NULL&#xA;                     ,[SK_AgencyOfficeID] [INT] NULL&#xA;                     ,[LossPaid] [DECIMAL](38, 10) NULL&#xA;                     ,[ExpensePaid] [DECIMAL](38, 10) NULL&#xA;                     ,[LegalExpensePaid] [DECIMAL](38, 10) NULL&#xA;                     ,[SubroRecovered] [DECIMAL](38, 10) NULL&#xA;                     ,[SalvageRecovered] [DECIMAL](38, 10) NULL&#xA;                                          ,[SK_Transaction_MonthID] [int] NULL&#xA;                     )&#xA;                   &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                            </SQLTask:SqlTaskData>
                          </DTS:ObjectData>
                        </DTS:Executable>
                        <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{D2CC79CC-88C2-4D17-8444-E0313C08C7EF}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factReserveMonthly" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts\SEQC Create Claim Fact Tables\SEQC Create Empty Claim Fact Tables\SQL create factReserveMonthly" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                          <DTS:ObjectData>
                            <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                      &#xA;                    CREATE TABLE [DataMart].[factReserveMonthly]&#xA;                     (&#xA;                      [SK_CY_MonthID] [INT] NULL&#xA;                     ,[SK_AY_MonthID] [INT] NULL&#xA;                     ,[SK_PY_MonthID] [INT] NOT NULL&#xA;                     ,[SK_RY_MonthID] [INT] NULL&#xA;                     ,[SK_VehicleID] [INT] NOT NULL&#xA;                     ,[SK_PolicyID] [INT] NOT NULL&#xA;                     ,[SK_RatedDriverID] [INT] NULL&#xA;                     ,[SK_DriversID] [INT] NULL&#xA;                     ,[SK_CoverageID] [INT] NULL&#xA;                     ,[SK_ClaimID] [INT] NULL&#xA;                     ,[SK_FeatureID] [INT] NULL&#xA;                     ,[SK_IncidentDriverID] [INT] NULL&#xA;                     ,[SK_ProducerID] [INT] NULL&#xA;                     ,[SK_CarrierID] [INT] NULL&#xA;                     ,[SK_ProgramID] [INT] NULL&#xA;                     ,[SK_ProgramGroupID] [INT] NULL&#xA;                     ,[SK_AgencyOfficeID] [INT] NULL&#xA;                     ,[LossReserve] [DECIMAL](38, 10) NULL&#xA;                     ,[ExpenseReserve] [DECIMAL](38, 10) NULL&#xA;                     ,[LegalExpenseReserve] [DECIMAL](38, 10) NULL&#xA;                     ,[RecoveryReserve] [DECIMAL](38, 10) NULL&#xA;                                          ,[SK_Transaction_MonthID] [int] NULL&#xA;                     )&#xA;            &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                            </SQLTask:SqlTaskData>
                          </DTS:ObjectData>
                        </DTS:Executable>
                      </DTS:Executables>
                    </DTS:Executable>
                    <DTS:Executable DTS:CreationName="STOCK:SEQUENCE" DTS:DTSID="{59DEA4DE-9BFF-4521-8DA9-D8D614BF601B}" DTS:ExecutableType="STOCK:SEQUENCE" DTS:LocaleID="-1" DTS:ObjectName="SEQC Process Claims Facts And Dimensions" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts\SEQC Create Claim Fact Tables\SEQC Process Claims Facts And Dimensions">
                      <DTS:Executables>
                        <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{96770608-86CA-46DA-98AA-F09813F71D4E}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL Process Claim Dimension" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts\SEQC Create Claim Fact Tables\SEQC Process Claims Facts And Dimensions\SQL Process Claim Dimension" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                          <DTS:ObjectData>
                            <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                      &#xA;                                        DECLARE @No INT = 0&#xA;                                         ,@Yes INT = 1&#xA;                                         ,@ClaimStatus_Open INT = 1&#xA;                                         ,@ClaimStatus_Closed INT = 2&#xA;                                         ,@ClaimPaymentType_Indemnity INT = 1&#xA;                                         ,@ClaimRecoveryType_Salvage INT = 1&#xA;                                         ,@ClaimRecoveryType_Subrogation INT = 2                                          &#xA;&#xA;                                        INSERT INTO [DataMart].[dimClaim] (&#xA;                                         BK_ClaimID&#xA;                                         ,BK_ClaimNumber&#xA;                                         ,ClaimStatus&#xA;                                         ,ClaimClosureType&#xA;                                         ,LossDate&#xA;                                         ,ReportedDate&#xA;                                         ,ClosedDate&#xA;                                         ,BK_PolicyTermID&#xA;                                         ,BK_PolicyNumber&#xA;                                         ,IsPaid&#xA;                                         )&#xA;                                        SELECT pc.ClaimID AS BK_ClaimID&#xA;                                         ,pc.ClaimNumber AS BK_ClaimNumber&#xA;                                         ,ISNULL(pcs.ClaimStatusName, 'N/A') AS ClaimStatusName&#xA;                                         ,CASE &#xA;                                          WHEN pc.ClosedWithoutPayment IS NOT NULL&#xA;                                           AND pc.ClosedWithoutPayment = @No&#xA;                                           AND pc.ClaimStatus = @ClaimStatus_Closed&#xA;                                           THEN 'Closed W Pay'&#xA;                                          WHEN pc.ClosedWithoutPayment IS NOT NULL&#xA;                                           AND pc.ClosedWithoutPayment = @No&#xA;                                           AND pc.ClaimStatus = @ClaimStatus_Open&#xA;                                           THEN 'Open'&#xA;                                          WHEN pc.ClosedWithoutPayment IS NOT NULL&#xA;                                           AND pc.ClosedWithoutPayment = @Yes&#xA;                                           AND pc.ClaimStatus = @ClaimStatus_Closed&#xA;                                           THEN 'Closed W/O Pay'&#xA;                                          ELSE 'N/A'&#xA;                                          END ClaimClosureType&#xA;                                         ,LossDate.[Date] AS LossDate&#xA;                                         ,ReportedDate.[Date] AS ReportedDate&#xA;                                         ,ClosedDate.[Date] AS ClosedDate&#xA;                                         ,pc.PolicyTermID AS BK_PolicyTermID&#xA;                                         ,pc.PolicyNumber AS BK_PolicyNumber&#xA;                                         ,isnull(IsPaid.Yes, 'No') AS IsPaid&#xA;                                        FROM Extract.P1_Claim pc&#xA;                                        LEFT JOIN Extract.P1_ClaimStatus pcs ON pcs.ClaimStatusID = pc.ClaimStatus&#xA;                                        OUTER APPLY (&#xA;                                         SELECT TOP 1 pg.TimeZone&#xA;                                         FROM [DataMart].[dimPolicy] dp&#xA;                                          JOIN [Extract].[P1_ProgramGroup] pg&#xA;                                           ON dp.[BK_ProgramGroupID] = pg.ProgramGroupID&#xA;                                         WHERE dp.[BK_PolicyTermID] = pc.PolicyTermID&#xA;                                        ) As ProgramGroup&#xA;                                        OUTER APPLY (&#xA;                                         SELECT Dates.LocalDatetime AS [Date]&#xA;                                         FROM dbo.fGetUtcToLocalDatetimeConverter(ProgramGroup.TimeZone, pc.LossDate) AS Dates&#xA;                                         ) AS LossDate&#xA;                                        OUTER APPLY (&#xA;                                         SELECT Dates.LocalDatetime AS [Date]&#xA;                                         FROM dbo.fGetUtcToLocalDatetimeConverter(ProgramGroup.TimeZone, pc.ReportedDate) AS Dates&#xA;                                         ) AS ReportedDate&#xA;                                        OUTER APPLY (&#xA;                                         SELECT Dates.LocalDatetime AS [Date]&#xA;                                         FROM dbo.fGetUtcToLocalDatetimeConverter(ProgramGroup.TimeZone, pc.ClosedDate) AS Dates&#xA;                                         ) AS ClosedDate&#xA;                                        OUTER APPLY (&#xA;                                         SELECT TOP 1 'Yes' AS Yes&#xA;                                         FROM [Extract].[P1_ClaimFeature] cf&#xA;                                         JOIN [Extract].[P1_ClaimPayment] cp ON cp.ClaimFeatureID = cf.ClaimFeatureID&#xA;                                         WHERE cf.ClaimId = pc.ClaimId&#xA;                                          AND cp.ClaimPaymentType = @ClaimPaymentType_Indemnity&#xA;                                          AND cp.ClaimRecoveryType &lt;&gt; @ClaimRecoveryType_Subrogation&#xA;                                          AND cp.ClaimRecoveryType &lt;&gt; @ClaimRecoveryType_Salvage&#xA;                                         ) AS IsPaid&#xA;                   &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                            </SQLTask:SqlTaskData>
                          </DTS:ObjectData>
                        </DTS:Executable>
                        <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{3EE6B3AF-8D9C-4980-8E24-F4A3926A5AA4}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL Process Feature Dimension" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts\SEQC Create Claim Fact Tables\SEQC Process Claims Facts And Dimensions\SQL Process Feature Dimension" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                          <DTS:ObjectData>
                            <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                      &#xA;                                        DECLARE @No INT = 0&#xA;                                         ,@Yes INT = 1&#xA;                                         ,@ClaimFeatureStatus_Open INT = 1&#xA;                                         ,@ClaimFeatureStatus_Closed INT = 2&#xA;                                         ,@ClaimPaymentType_Indemnity INT = 1   &#xA;                                         ,@ClaimRecoveryType_Salvage INT = 1&#xA;                                         ,@ClaimRecoveryType_Subrogation INT = 2                                    &#xA;            &#xA;                                        INSERT INTO DataMart.dimFeature (&#xA;                                             SK_CoverageID&#xA;                                             ,SK_ClaimID&#xA;                                             ,BK_FeatureID&#xA;                                             ,BK_FeatureNumber&#xA;                                             ,BK_ClaimID&#xA;                                             ,BK_ClaimNumber&#xA;                                             ,FeatureType&#xA;                                             ,FaultType&#xA;                                             ,FeatureStatus&#xA;                                             ,FeatureClosureType&#xA;                                             ,VIN&#xA;                                             ,OpenDate&#xA;                                             ,IsPaid&#xA;                                             )&#xA;                                        SELECT ISNULL(dcov.SK_CoverageID, - 1) AS SK_CoverageID&#xA;                                         ,ISNULL(dc.SK_ClaimID, - 1) AS SK_ClaimID&#xA;                                         ,CONVERT(VARCHAR(20), f.ClaimFeatureID) AS BK_FeatureID&#xA;                                         ,ISNULL(dc.BK_ClaimNumber, '') + '/' + ISNULL(f.FeatureNumber, '') AS BK_FeatureNumber&#xA;                                         ,CONVERT(VARCHAR(20), dc.BK_ClaimID) AS BK_ClaimID&#xA;                                         ,dc.BK_ClaimNumber&#xA;                                         ,'N/A' AS FeatureType&#xA;                                         ,CASE &#xA;                                          WHEN f.PercentAtFault IS NOT NULL&#xA;                                           AND f.PercentAtFault &gt;= 51&#xA;                                           THEN 'At Fault'&#xA;                                          WHEN f.PercentAtFault IS NOT NULL&#xA;                                           AND f.PercentAtFault &lt; 51&#xA;                                           THEN 'Not At Fault'&#xA;                                          ELSE 'Unknown'&#xA;                                          END AS FaultType&#xA;                                         ,ISNULL(pcfs.ClaimFeatureStatusName, 'N/A') AS FeatureStatus&#xA;                                         ,CASE &#xA;                                          WHEN f.ClosedWithoutPayment IS NOT NULL&#xA;                                           AND f.ClosedWithoutPayment = @No&#xA;                                           AND f.ClaimFeatureStatus = @ClaimFeatureStatus_Closed&#xA;                                           THEN 'Closed W Pay'&#xA;                                          WHEN f.ClosedWithoutPayment IS NOT NULL&#xA;                                           AND f.ClosedWithoutPayment = @No&#xA;                                           AND f.ClaimFeatureStatus = @ClaimFeatureStatus_Open&#xA;                                           THEN 'Open'&#xA;                                          WHEN f.ClosedWithoutPayment IS NOT NULL&#xA;                                           AND f.ClosedWithoutPayment = @Yes&#xA;                                           AND f.ClaimFeatureStatus = @ClaimFeatureStatus_Closed&#xA;                                           THEN 'Closed W/O Pay'&#xA;                                          ELSE 'N/A'&#xA;                                          END FeatureClosureType&#xA;                                         ,LEFT(ISNULL(CASE &#xA;                                            WHEN f.InsuredVehicleVin = 'NOT A LISTED VEHICLE'&#xA;                                             THEN ''&#xA;                                            ELSE f.InsuredVehicleVin&#xA;                                            END, ''), 17) AS VIN&#xA;                                         ,ISNULL(OpenDate.[Date], dc.LossDate) AS OpenDate&#xA;                                         ,ISNULL(IsPaid.Yes, 'No') AS IsPaid&#xA;                                        FROM [Extract].P1_ClaimFeature AS f&#xA;                                        JOIN [DataMart].[dimClaim] AS dc ON f.ClaimID = dc.BK_ClaimID&#xA;                                        LEFT JOIN [DataMart].[dimCoverage] AS dcov ON f.CoverageType = dcov.BK_CoverageID&#xA;                                        LEFT JOIN [Extract].P1_ClaimFeatureStatus pcfs ON pcfs.ClaimFeatureStatusID = f.ClaimFeatureStatus&#xA;                                        OUTER APPLY (&#xA;                                         SELECT TOP 1 pg.TimeZone&#xA;                                         FROM [DataMart].[dimPolicy] dp&#xA;                                          JOIN [Extract].[P1_ProgramGroup] pg&#xA;                                           ON dp.[BK_ProgramGroupID] = pg.ProgramGroupID&#xA;                                         WHERE dp.[BK_PolicyTermID] = dc.BK_PolicyTermID&#xA;                                        ) As ProgramGroup&#xA;                                        OUTER APPLY (&#xA;                                         SELECT Dates.LocalDatetime AS [Date]&#xA;                                         FROM dbo.fGetUtcToLocalDatetimeConverter(ProgramGroup.TimeZone, f.OpenDate) AS Dates&#xA;                                         ) AS OpenDate&#xA;                                        OUTER APPLY (&#xA;                                         SELECT TOP 1 'Yes' AS Yes&#xA;                                         FROM [Extract].[P1_ClaimPayment] pcl&#xA;                                         WHERE pcl.ClaimFeatureId = f.ClaimFeatureID&#xA;                                          AND pcl.ClaimPaymentType = @ClaimPaymentType_Indemnity&#xA;                                          AND pcl.ClaimRecoveryType &lt;&gt; @ClaimRecoveryType_Subrogation&#xA;                                          AND pcl.ClaimRecoveryType &lt;&gt; @ClaimRecoveryType_Salvage&#xA;                                         ) AS IsPaid&#xA;                   &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                            </SQLTask:SqlTaskData>
                          </DTS:ObjectData>
                        </DTS:Executable>
                        <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{B2D3C724-AA05-4140-A9A1-1DF38892978B}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL Process Claim And Feature Facts" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts\SEQC Create Claim Fact Tables\SEQC Process Claims Facts And Dimensions\SQL Process Claim And Feature Facts" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                          <DTS:ObjectData>
                            <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                      &#xA;                   IF OBJECT_ID('tempdb..#dimPolicy') IS NOT NULL&#xA;                    DROP TABLE #dimPolicy&#xA;&#xA;                   IF OBJECT_ID('tempdb..#Periods') IS NOT NULL&#xA;                    DROP TABLE #Periods&#xA;&#xA;                   IF OBJECT_ID('tempdb..#ClaimFeature') IS NOT NULL&#xA;                    DROP TABLE #ClaimFeature&#xA;&#xA;                   SELECT  dimp.BK_PolicyTermID&#xA;                       ,MIN(dimp.SK_PolicyID) AS MinPolicyID&#xA;                       ,MIN(dimp.EffectiveDate) AS MinEffectiveDate&#xA;                       ,MIN(dimp.BK_PolicyTermID) AS MinBKPolicyTermID&#xA;                   INTO    #dimPolicy&#xA;                   FROM    [DataMart].[dimPolicy] dimp&#xA;                   GROUP BY dimp.BK_PolicyTermID&#xA;&#xA;                   SELECT  p.SK_PolicyID&#xA;                       ,MIN(p.SK_CarrierID) AS MinCarrierID&#xA;                       ,MIN(p.SK_ProducerID) AS MinProducerID&#xA;                   INTO    #Periods&#xA;                   FROM    [Staging].[Periods] p&#xA;                   GROUP BY p.SK_PolicyID&#xA;&#xA;                   SELECT  CAST(CONVERT(VARCHAR(10), dc.LossDate, 112) AS INT) AS SK_AY_DateID&#xA;                       ,CAST(CONVERT(VARCHAR(10), ISNULL(p.EffectiveDate, dp.MinEffectiveDate), 112) AS INT) AS SK_PY_DateID&#xA;                       ,CAST(CONVERT(VARCHAR(10), dc.ReportedDate, 112) AS INT) AS Claim_SK_CY_DateID&#xA;                                           ,CAST(CONVERT(VARCHAR(10), dc.ReportedDate, 112) AS INT) AS Claim_SK_Transaction_DateID&#xA;                       ,CAST(CONVERT(VARCHAR(10), dc.ReportedDate, 112) AS INT) AS Claim_SK_RY_DateID&#xA;                       ,CAST(CONVERT(VARCHAR(10), df.OpenDate, 112) AS INT) AS Feature_SK_CY_DateID&#xA;                       ,CAST(CONVERT(VARCHAR(10), df.OpenDate, 112) AS INT) AS Feature_SK_RY_DateID&#xA;                                           ,CAST(CONVERT(VARCHAR(10), df.OpenDate, 112) AS INT) AS Feature_SK_Transaction_DateID&#xA;                       ,ISNULL(dv.SK_VehicleID, -1) AS SK_VehicleID&#xA;                       ,ISNULL(p.SK_PolicyID, -1) AS SK_PolicyID&#xA;                       ,ISNULL(p.SK_RatedDriverID, -1) AS SK_RatedDriverID&#xA;                       ,ISNULL(p.SK_DriversID, -1) AS SK_DriversID&#xA;                       ,dc.SK_ClaimID&#xA;                       ,-1 AS SK_IncidentDriverID&#xA;                       ,ISNULL(p.SK_ProducerID, ISNULL(minProdCarrier.MinProducerID, -1)) AS SK_ProducerID&#xA;                       ,ISNULL(p.SK_CarrierID, ISNULL(minProdCarrier.MinCarrierID, -1)) AS SK_CarrierID&#xA;                       ,df.SK_FeatureID&#xA;                       ,dc.BK_ClaimID&#xA;                       ,dc.BK_ClaimNumber&#xA;                       ,ISNULL(p.BK_PolicyTermID, dp.MinBKPolicyTermID) AS BK_PolicyTermID&#xA;                       ,ISNULL(dv.BK_VehicleID, -1) AS BK_VehicleID&#xA;                       ,df.BK_FeatureID&#xA;                       ,df.SK_CoverageID&#xA;                       ,pp.SK_ProgramID&#xA;                       ,CASE WHEN dv.BK_VehicleID IS NOT NULL THEN 1&#xA;                       ELSE 0&#xA;                     END AS IsVehicleFound&#xA;                       ,CASE WHEN p.SK_PolicyID IS NOT NULL THEN 1&#xA;                       ELSE 0&#xA;                     END AS IsPeriodFound&#xA;                   INTO    #ClaimFeature&#xA;                   FROM    [DataMart].[dimClaim] AS dc&#xA;                   LEFT JOIN [DataMart].[dimFeature] AS df&#xA;                     ON df.BK_ClaimID = dc.BK_ClaimID&#xA;                   OUTER APPLY ( SELECT TOP 1&#xA;                         p.BK_PolicyTermID&#xA;                           ,p.SK_VehicleID&#xA;                           ,p.SK_PolicyID&#xA;                           ,p.SK_RatedDriverID&#xA;                           ,p.SK_DriversID&#xA;                           ,p.EffectiveDate&#xA;                           ,p.SK_ProducerID&#xA;                           ,p.SK_CarrierID&#xA;                        FROM      [Staging].[Periods] AS p&#xA;                        WHERE     p.BK_PolicyTermID = dc.BK_PolicyTermID&#xA;                         AND dc.LossDate &gt;= p.EndorsementPeriodStartDate&#xA;                         AND dc.LossDate &lt; p.EndorsementPeriodEndDate&#xA;                         AND p.SK_CoverageID = df.SK_CoverageID&#xA;                                                  AND p.VIN = df.VIN&#xA;                      ) AS p&#xA;                   LEFT JOIN DataMart.dimVehicle dv&#xA;                     ON dv.SK_VehicleID = p.SK_VehicleID                        &#xA;                   LEFT JOIN #dimPolicy AS dp&#xA;                     ON dp.BK_PolicyTermID = dc.BK_PolicyTermID&#xA;                   LEFT JOIN #Periods minProdCarrier&#xA;                     ON minProdCarrier.SK_PolicyID = dp.MinPolicyID&#xA;                   LEFT JOIN [Staging].[PolicyProgram] AS pp&#xA;                     ON pp.SK_PolicyID = ISNULL(p.SK_PolicyID, dp.MinPolicyID)&#xA;&#xA;                   INSERT  INTO DataMart.factClaim&#xA;                   SELECT  Claim_SK_CY_DateID AS SK_CY_DateID&#xA;                       ,SK_AY_DateID&#xA;                       ,SK_PY_DateID&#xA;                       ,Claim_SK_RY_DateID AS SK_RY_DateID&#xA;                       ,SK_VehicleID&#xA;                       ,SK_PolicyID&#xA;                       ,SK_RatedDriverID&#xA;                       ,SK_DriversID&#xA;                       ,SK_ClaimID&#xA;                       ,SK_IncidentDriverID&#xA;                       ,SK_ProducerID&#xA;                       ,SK_CarrierID&#xA;                       ,SK_ProgramID&#xA;                       ,BK_ClaimID&#xA;                       ,BK_ClaimNumber&#xA;                       ,BK_PolicyTermID&#xA;                       ,BK_VehicleID&#xA;                                           ,Claim_SK_Transaction_DateID AS SK_Transaction_DateID&#xA;                   FROM    #ClaimFeature AS cf&#xA;&#xA;                   INSERT  INTO DataMart.factFeature&#xA;                   SELECT  Feature_SK_CY_DateID AS SK_CY_DateID&#xA;                       ,SK_AY_DateID&#xA;                       ,SK_PY_DateID&#xA;                       ,Feature_SK_RY_DateID AS SK_RY_DateID&#xA;                       ,SK_VehicleID&#xA;                       ,SK_PolicyID&#xA;                       ,SK_RatedDriverID&#xA;                       ,SK_DriversID&#xA;                       ,SK_CoverageID&#xA;                       ,SK_ClaimID&#xA;                       ,SK_FeatureID&#xA;                       ,SK_IncidentDriverID&#xA;                       ,SK_ProducerID&#xA;                       ,SK_CarrierID&#xA;                       ,SK_ProgramID&#xA;                                           ,Feature_SK_Transaction_DateID AS SK_Transaction_DateID&#xA;                   FROM    #ClaimFeature AS cf&#xA;                   WHERE cf.SK_FeatureID IS NOT NULL &#xA;&#xA;                   IF OBJECT_ID('tempdb..#dimPolicy') IS NOT NULL&#xA;                    DROP TABLE #dimPolicy&#xA;&#xA;                   IF OBJECT_ID('tempdb..#Periods') IS NOT NULL&#xA;                    DROP TABLE #Periods&#xA;&#xA;                   IF OBJECT_ID('tempdb..#ClaimFeature') IS NOT NULL&#xA;                    DROP TABLE #ClaimFeature&#xA;                   &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                            </SQLTask:SqlTaskData>
                          </DTS:ObjectData>
                        </DTS:Executable>
                        <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{BBD015CD-8384-4E3F-A029-0BF526DF82BD}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL Process Fact Expense" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts\SEQC Create Claim Fact Tables\SEQC Process Claims Facts And Dimensions\SQL Process Fact Expense" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                          <DTS:ObjectData>
                            <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                      &#xA;                                        DECLARE @ClaimPaymentType_Indemnity INT = 1&#xA;                                         ,@ClaimPaymentType_Expense INT = 2&#xA;                                         ,@ClaimRecoveryType_Salvage INT = 1&#xA;                                         ,@ClaimRecoveryType_Subrogation INT = 2&#xA;&#xA;                                        INSERT INTO DataMart.factExpense&#xA;                                        SELECT CAST(CONVERT(VARCHAR(10), dbo.fGetDateFromUTCDate(pay.PaymentDate, ppg.TimeZone), 112) AS INT) AS SK_CY_DateID&#xA;                                         ,SK_AY_DateID&#xA;                                         ,SK_PY_DateID&#xA;                                         ,CAST(CONVERT(VARCHAR(10), dbo.fGetDateFromUTCDate(pay.PaymentDate, ppg.TimeZone), 112) AS INT) AS SK_RY_DateID&#xA;                                         ,SK_VehicleID&#xA;                                         ,SK_PolicyID&#xA;                                         ,SK_RatedDriverID&#xA;                                         ,SK_DriversID&#xA;                                         ,ff.SK_CoverageID&#xA;                                         ,ff.SK_ClaimID&#xA;                                         ,ff.SK_FeatureID&#xA;                                         ,SK_IncidentDriverID&#xA;                                         ,ff.SK_ProducerID&#xA;                                         ,SK_CarrierID&#xA;                                         ,SK_ProgramID&#xA;                                         ,dpg.SK_ProgramGroupID&#xA;                                         ,dimA.SK_AgencyOfficeID&#xA;                                         ,SUM(CASE &#xA;                                           WHEN pay.ClaimPaymentType = @ClaimPaymentType_Indemnity&#xA;                                            THEN PaymentAmount&#xA;                                           ELSE 0&#xA;                                           END) AS LossPaid&#xA;                                         ,SUM(CASE &#xA;                                           WHEN pay.ClaimPaymentType = @ClaimPaymentType_Expense&#xA;                                            THEN PaymentAmount&#xA;                                           ELSE 0&#xA;                                           END) AS ExpensePaid&#xA;                                         ,SUM(0) AS LegalExpensePaid&#xA;                                         ,SUM(CASE &#xA;                                           WHEN pay.ClaimRecoveryType = @ClaimRecoveryType_Subrogation&#xA;                                            THEN PaymentAmount&#xA;                                           ELSE 0&#xA;                                           END) AS SubroRecovered&#xA;                                         ,SUM(CASE &#xA;                                           WHEN pay.ClaimRecoveryType = @ClaimRecoveryType_Salvage&#xA;                                            THEN PaymentAmount&#xA;                                           ELSE 0&#xA;                                           END) AS SalvageRecovered&#xA;                                              ,CAST(CONVERT(VARCHAR(10), dbo.fGetDateFromUTCDate(pay.PaymentDate,&#xA;                                                  ppg.TimeZone), 112) AS INT) AS SK_Transaction_DateID&#xA;                                        FROM [Extract].P1_ClaimPayment AS pay&#xA;                                        LEFT JOIN DataMart.dimFeature AS df ON df.BK_FeatureID = pay.ClaimFeatureID&#xA;                                        LEFT JOIN DataMart.factFeature AS ff ON df.SK_FeatureID = ff.SK_FeatureID&#xA;                                        LEFT JOIN [Extract].P1_Claim AS pc ON pc.ClaimID = df.BK_ClaimID&#xA;                                        LEFT JOIN [Extract].P1_PolicyTerm AS ppt ON ppt.PolicyTermID = pc.PolicyTermID&#xA;                                        LEFT JOIN [Extract].P1_Program AS pp ON pp.ProgramID = ppt.ProgramID&#xA;                                        LEFT JOIN [Extract].P1_ProgramGroup AS ppg ON ppg.ProgramGroupID = pp.ProgramGroupID&#xA;                                        LEFT JOIN DataMart.dimProgramGroup AS dpg ON dpg.BK_ProgramGroupID = ppg.ProgramGroupID&#xA;                                        LEFT JOIN [DataMart].[dimProducer] AS dimprod ON dimprod.SK_ProducerID = ff.SK_ProducerID&#xA;                                        LEFT JOIN DataMart.dimAgencyOffice dimA ON dimA.BK_AgencyOfficeID = dimprod.BK_OfficeID&#xA;                                        WHERE ff.SK_FeatureID IS NOT NULL&#xA;                                      AND pay.ClaimPaymentStatus &lt;&gt; 2 -- not void&#xA;                                        GROUP BY pay.PaymentDate&#xA;                                         ,SK_AY_DateID&#xA;                                         ,SK_PY_DateID&#xA;                                         ,SK_VehicleID&#xA;                                         ,SK_PolicyID&#xA;                                         ,SK_RatedDriverID&#xA;                                         ,SK_DriversID&#xA;                                         ,ff.SK_CoverageID&#xA;                                         ,ff.SK_ClaimID&#xA;                                         ,ff.SK_FeatureID&#xA;                                         ,SK_IncidentDriverID&#xA;                                         ,ff.SK_ProducerID&#xA;                                         ,SK_CarrierID&#xA;                                         ,SK_ProgramID&#xA;                                         ,ppg.TimeZone&#xA;                                         ,dpg.SK_ProgramGroupID&#xA;                                         ,dimA.SK_AgencyOfficeID&#xA;                  &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                            </SQLTask:SqlTaskData>
                          </DTS:ObjectData>
                        </DTS:Executable>
                        <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{59F7295F-245B-48AD-9753-DC93BEE2153B}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL Process Fact Reserve" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts\SEQC Create Claim Fact Tables\SEQC Process Claims Facts And Dimensions\SQL Process Fact Reserve" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                          <DTS:ObjectData>
                            <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                      &#xA;                    INSERT  INTO DataMart.factReserve&#xA;                    SELECT  CAST(CONVERT(VARCHAR(10), dbo.fGetDateFromUTCDate(res.ReserveChangeDate,&#xA;                                    ppg.TimeZone), 112) AS INT) AS SK_CY_DateID&#xA;                        ,SK_AY_DateID&#xA;                        ,SK_PY_DateID&#xA;                        ,CAST(CONVERT(VARCHAR(10), dbo.fGetDateFromUTCDate(res.ReserveChangeDate,&#xA;                                    ppg.TimeZone), 112) AS INT) AS SK_RY_DateID&#xA;                        ,SK_VehicleID&#xA;                        ,SK_PolicyID&#xA;                        ,SK_RatedDriverID&#xA;                        ,SK_DriversID&#xA;                        ,ff.SK_CoverageID&#xA;                        ,ff.SK_ClaimID&#xA;                        ,ff.SK_FeatureID&#xA;                        ,SK_IncidentDriverID&#xA;                        ,ff.SK_ProducerID&#xA;                        ,SK_CarrierID&#xA;                        ,SK_ProgramID&#xA;                        ,dpg.SK_ProgramGroupID&#xA;                        ,dimA.SK_AgencyOfficeID&#xA;                        ,SUM(res.ReserveAmount) AS LossReserve&#xA;                        ,SUM(0) AS ExpenseReserve&#xA;                        ,SUM(0) AS LegalExpenseReserve&#xA;                        ,SUM(0) AS RecoveryReserve&#xA;                                             ,CAST(CONVERT(VARCHAR(10), dbo.fGetDateFromUTCDate(res.ReserveChangeDate,&#xA;                                    ppg.TimeZone), 112) AS INT) AS SK_Transaction_DateID&#xA;                    FROM    [Extract].P1_ClaimReserve AS res&#xA;                    LEFT JOIN DataMart.dimFeature AS df&#xA;                      ON res.ClaimFeatureID = df.BK_FeatureID&#xA;                    LEFT JOIN DataMart.factFeature AS ff&#xA;                      ON ff.SK_FeatureID = df.SK_FeatureID&#xA;                    LEFT JOIN [Extract].P1_Claim AS pc&#xA;                      ON pc.ClaimID = df.BK_ClaimID&#xA;                    LEFT JOIN [Extract].P1_PolicyTerm AS ppt&#xA;                      ON ppt.PolicyTermID = pc.PolicyTermID&#xA;                    LEFT JOIN [Extract].P1_Program AS pp&#xA;                      ON pp.ProgramID = ppt.ProgramID&#xA;                    LEFT JOIN [Extract].P1_ProgramGroup AS ppg&#xA;                      ON ppg.ProgramGroupID = pp.ProgramGroupID&#xA;                    LEFT JOIN DataMart.dimProgramGroup AS dpg&#xA;                      ON dpg.BK_ProgramGroupID = ppg.ProgramGroupID&#xA;                    LEFT JOIN [DataMart].[dimProducer] AS dimprod&#xA;                      ON dimprod.SK_ProducerID = ff.SK_ProducerID&#xA;                    LEFT JOIN DataMart.dimAgencyOffice dimA&#xA;                      ON dimA.BK_AgencyOfficeID = dimprod.BK_OfficeID&#xA;                    WHERE   ff.SK_FeatureID IS NOT NULL&#xA;                    GROUP BY res.ReserveChangeDate&#xA;                        ,SK_AY_DateID&#xA;                        ,SK_PY_DateID&#xA;                        ,SK_VehicleID&#xA;                        ,SK_PolicyID&#xA;                        ,SK_RatedDriverID&#xA;                        ,SK_DriversID&#xA;                        ,ff.SK_CoverageID&#xA;                        ,ff.SK_ClaimID&#xA;                        ,ff.SK_FeatureID&#xA;                        ,SK_IncidentDriverID&#xA;                        ,ff.SK_ProducerID&#xA;                        ,SK_CarrierID&#xA;                        ,SK_ProgramID&#xA;                        ,ppg.TimeZone&#xA;                        ,dpg.SK_ProgramGroupID&#xA;                        ,dimA.SK_AgencyOfficeID&#xA;            &#xA;                  &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                            </SQLTask:SqlTaskData>
                          </DTS:ObjectData>
                        </DTS:Executable>
                        <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{4324E20C-0E0E-4452-A7BD-3C8933D664EB}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL Process Fact Expense Monthly" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts\SEQC Create Claim Fact Tables\SEQC Process Claims Facts And Dimensions\SQL Process Fact Expense Monthly" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                          <DTS:ObjectData>
                            <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                      &#xA;                    INSERT  INTO DataMart.factExpenseMonthly&#xA;                    SELECT  CAST(LEFT(CAST(SK_CY_DateID AS VARCHAR(8)), 6) AS INT) AS SK_CY_MonthID&#xA;                        ,CAST(LEFT(CAST(SK_AY_DateID AS VARCHAR(8)), 6) AS INT) AS SK_AY_MonthID&#xA;                        ,CAST(LEFT(CAST(SK_PY_DateID AS VARCHAR(8)), 6) AS INT) AS SK_PY_MonthID&#xA;                        ,CAST(LEFT(CAST(SK_RY_DateID AS VARCHAR(8)), 6) AS INT) AS SK_RY_MonthID&#xA;                        ,SK_VehicleID&#xA;                        ,SK_PolicyID&#xA;                        ,SK_RatedDriverID&#xA;                        ,SK_DriversID&#xA;                        ,SK_CoverageID&#xA;                        ,SK_ClaimID&#xA;                        ,SK_FeatureID&#xA;                        ,SK_IncidentDriverID&#xA;                        ,SK_ProducerID&#xA;                        ,SK_CarrierID&#xA;                        ,SK_ProgramID&#xA;                        ,SK_ProgramGroupID&#xA;                        ,SK_AgencyOfficeID&#xA;                        ,SUM(LossPaid) AS LossPaid&#xA;                        ,SUM(ExpensePaid) AS ExpensePaid&#xA;                        ,SUM(LegalExpensePaid) AS LegalExpensePaid&#xA;                        ,SUM(SubroRecovered) AS SubroRecovered&#xA;                        ,SUM(SalvageRecovered) AS SalvageRecovered&#xA;                                             ,CAST(LEFT(CAST(SK_CY_DateID AS VARCHAR(8)), 6) AS INT) AS SK_Transaction_MonthID&#xA;                    FROM    [DataMart].[factExpense]&#xA;                    GROUP BY CAST(LEFT(CAST(SK_CY_DateID AS VARCHAR(8)), 6) AS INT)&#xA;                        ,CAST(LEFT(CAST(SK_AY_DateID AS VARCHAR(8)), 6) AS INT)&#xA;                        ,CAST(LEFT(CAST(SK_PY_DateID AS VARCHAR(8)), 6) AS INT)&#xA;                        ,CAST(LEFT(CAST(SK_RY_DateID AS VARCHAR(8)), 6) AS INT)&#xA;                        ,SK_VehicleID&#xA;                        ,SK_PolicyID&#xA;                        ,SK_RatedDriverID&#xA;                        ,SK_DriversID&#xA;                        ,SK_CoverageID&#xA;                        ,SK_ClaimID&#xA;                        ,SK_FeatureID&#xA;                        ,SK_IncidentDriverID&#xA;                        ,SK_ProducerID&#xA;                        ,SK_CarrierID&#xA;                        ,SK_ProgramID&#xA;                        ,SK_ProgramGroupID&#xA;                        ,SK_AgencyOfficeID&#xA;&#xA;                 &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                            </SQLTask:SqlTaskData>
                          </DTS:ObjectData>
                        </DTS:Executable>
                        <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{0181C53F-6B2C-4E5B-8054-8B6DE8D4315C}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL Process Fact Reserve Monthly" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts\SEQC Create Claim Fact Tables\SEQC Process Claims Facts And Dimensions\SQL Process Fact Reserve Monthly" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                          <DTS:ObjectData>
                            <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                      &#xA;                    INSERT  INTO DataMart.factReserveMonthly&#xA;                    SELECT  CAST(LEFT(CAST(SK_CY_DateID AS VARCHAR(8)), 6) AS INT) AS SK_CY_MonthID&#xA;                        ,CAST(LEFT(CAST(SK_AY_DateID AS VARCHAR(8)), 6) AS INT) AS SK_AY_MonthID&#xA;                        ,CAST(LEFT(CAST(SK_PY_DateID AS VARCHAR(8)), 6) AS INT) AS SK_PY_MonthID&#xA;                        ,CAST(LEFT(CAST(SK_RY_DateID AS VARCHAR(8)), 6) AS INT) AS SK_RY_MonthID&#xA;                        ,SK_VehicleID&#xA;                        ,SK_PolicyID&#xA;                        ,SK_RatedDriverID&#xA;                        ,SK_DriversID&#xA;                        ,SK_CoverageID&#xA;                        ,SK_ClaimID&#xA;                        ,SK_FeatureID&#xA;                        ,SK_IncidentDriverID&#xA;                        ,SK_ProducerID&#xA;                        ,SK_CarrierID&#xA;                        ,SK_ProgramID&#xA;                        ,SK_ProgramGroupID&#xA;                        ,SK_AgencyOfficeID&#xA;                        ,SUM(LossReserve) AS LossReserve&#xA;                        ,SUM(ExpenseReserve) AS ExpenseReserve&#xA;                        ,SUM(LegalExpenseReserve) AS LegalExpenseReserve&#xA;                        ,SUM(RecoveryReserve) AS RecoveryReserve&#xA;                                             ,CAST(LEFT(CAST(SK_CY_DateID AS VARCHAR(8)), 6) AS INT) AS SK_Transaction_MonthID&#xA;                    FROM    [DataMart].[factReserve]&#xA;                    GROUP BY CAST(LEFT(CAST(SK_CY_DateID AS VARCHAR(8)), 6) AS INT)&#xA;                        ,CAST(LEFT(CAST(SK_AY_DateID AS VARCHAR(8)), 6) AS INT)&#xA;                        ,CAST(LEFT(CAST(SK_PY_DateID AS VARCHAR(8)), 6) AS INT)&#xA;                        ,CAST(LEFT(CAST(SK_RY_DateID AS VARCHAR(8)), 6) AS INT)&#xA;                        ,SK_VehicleID&#xA;                        ,SK_PolicyID&#xA;                        ,SK_RatedDriverID&#xA;                        ,SK_DriversID&#xA;                        ,SK_CoverageID&#xA;                        ,SK_ClaimID&#xA;                        ,SK_FeatureID&#xA;                        ,SK_IncidentDriverID&#xA;                        ,SK_ProducerID&#xA;                        ,SK_CarrierID&#xA;                        ,SK_ProgramID&#xA;                        ,SK_ProgramGroupID&#xA;                        ,SK_AgencyOfficeID&#xA;             &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                            </SQLTask:SqlTaskData>
                          </DTS:ObjectData>
                        </DTS:Executable>
                        <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{0D7AE5E3-05F9-4E15-9D11-0A01BF872C43}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL Process Claim Monthly" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts\SEQC Create Claim Fact Tables\SEQC Process Claims Facts And Dimensions\SQL Process Claim Monthly" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                          <DTS:ObjectData>
                            <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                      &#xA;              INSERT INTO DataMart.factClaimMonthly (&#xA;               SK_CY_MonthID&#xA;               , SK_AY_MonthID&#xA;               , SK_PY_MonthID&#xA;               , SK_RY_MonthID&#xA;               , SK_VehicleID&#xA;               , SK_PolicyID&#xA;               , SK_RatedDriverID&#xA;               , SK_DriversID&#xA;               , SK_ClaimID&#xA;               , SK_IncidentDriverID&#xA;               , SK_ProducerID&#xA;               , SK_CarrierID&#xA;               , SK_ProgramID&#xA;               , BK_ClaimID&#xA;               , BK_ClaimNumber&#xA;               , BK_PolicyTermID&#xA;               , BK_VehicleID&#xA;                              , SK_Transaction_MonthID&#xA;               )&#xA;              SELECT cast(left(cast(SK_CY_DateID AS VARCHAR(8)), 6) AS INT) AS SK_CY_MonthID&#xA;               , cast(left(cast(SK_AY_DateID AS VARCHAR(8)), 6) AS INT) AS SK_AY_MonthID&#xA;               , cast(left(cast(SK_PY_DateID AS VARCHAR(8)), 6) AS INT) AS SK_PY_MonthID&#xA;               , cast(left(cast(SK_RY_DateID AS VARCHAR(8)), 6) AS INT) AS SK_RY_MonthID&#xA;               , SK_VehicleID&#xA;               , SK_PolicyID&#xA;               , SK_RatedDriverID&#xA;               , SK_DriversID&#xA;               , SK_ClaimID&#xA;               , SK_IncidentDriverID&#xA;               , SK_ProducerID&#xA;               , SK_CarrierID&#xA;               , SK_ProgramID&#xA;               , BK_ClaimID&#xA;               , BK_ClaimNumber&#xA;               , BK_PolicyTermID&#xA;               , BK_VehicleID&#xA;                              , cast(left(cast(SK_CY_DateID AS VARCHAR(8)), 6) AS INT) AS SK_Transaction_MonthID&#xA;              FROM [DataMart].[factClaim]&#xA;             &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                            </SQLTask:SqlTaskData>
                          </DTS:ObjectData>
                        </DTS:Executable>
                        <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{B1163201-D557-407A-8C04-100741450880}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL Process Fact Feature Monthly" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts\SEQC Create Claim Fact Tables\SEQC Process Claims Facts And Dimensions\SQL Process Fact Feature Monthly" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                          <DTS:ObjectData>
                            <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                      &#xA;              INSERT INTO DataMart.factFeatureMonthly (&#xA;               SK_CY_MonthID&#xA;               , SK_AY_MonthID&#xA;               , SK_PY_MonthID&#xA;               , SK_RY_MonthID&#xA;               , SK_VehicleID&#xA;               , SK_PolicyID&#xA;               , SK_RatedDriverID&#xA;               , SK_DriversID&#xA;               , SK_CoverageID&#xA;               , SK_ClaimID&#xA;               , SK_FeatureID&#xA;               , SK_IncidentDriverID&#xA;               , SK_ProducerID&#xA;               , SK_CarrierID&#xA;               , SK_ProgramID&#xA;                              ,SK_Transaction_MonthID&#xA;               )&#xA;              SELECT cast(left(cast(SK_CY_DateID AS VARCHAR(8)), 6) AS INT) AS SK_CY_MonthID&#xA;               , cast(left(cast(SK_AY_DateID AS VARCHAR(8)), 6) AS INT) AS SK_AY_MonthID&#xA;               , cast(left(cast(SK_PY_DateID AS VARCHAR(8)), 6) AS INT) AS SK_PY_MonthID&#xA;               , cast(left(cast(SK_RY_DateID AS VARCHAR(8)), 6) AS INT) AS SK_RY_MonthID&#xA;               , SK_VehicleID&#xA;               , SK_PolicyID&#xA;               , SK_RatedDriverID&#xA;               , SK_DriversID&#xA;               , SK_CoverageID&#xA;               , SK_ClaimID&#xA;               , SK_FeatureID&#xA;               , SK_IncidentDriverID&#xA;               , SK_ProducerID&#xA;               , SK_CarrierID&#xA;               , SK_ProgramID&#xA;                              , cast(left(cast(SK_CY_DateID AS VARCHAR(8)), 6) AS INT) AS SK_Transaction_MonthID&#xA;              FROM [DataMart].[factFeature]&#xA;             &#xA;                                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                            </SQLTask:SqlTaskData>
                          </DTS:ObjectData>
                        </DTS:Executable>
                      </DTS:Executables>
                      <DTS:PrecedenceConstraints>
                        <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{E1AD0C41-FB8F-4D07-B9AD-DDB3C6E6E0AF}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts\SEQC Create Claim Fact Tables\SEQC Process Claims Facts And Dimensions\SQL Process Claim Dimension" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL Process Claim Dimension_To_SQL Process Feature Dimension" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts\SEQC Create Claim Fact Tables\SEQC Process Claims Facts And Dimensions.PrecedenceConstraints[Constraint_SQL Process Claim Dimension_To_SQL Process Feature Dimension]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts\SEQC Create Claim Fact Tables\SEQC Process Claims Facts And Dimensions\SQL Process Feature Dimension">
                        </DTS:PrecedenceConstraint>
                        <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{AA66D8AA-AFFE-464F-BF39-B9BECAE214B6}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts\SEQC Create Claim Fact Tables\SEQC Process Claims Facts And Dimensions\SQL Process Feature Dimension" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL Process Feature Dimension_To_SQL Process Claim And Feature Facts" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts\SEQC Create Claim Fact Tables\SEQC Process Claims Facts And Dimensions.PrecedenceConstraints[Constraint_SQL Process Feature Dimension_To_SQL Process Claim And Feature Facts]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts\SEQC Create Claim Fact Tables\SEQC Process Claims Facts And Dimensions\SQL Process Claim And Feature Facts">
                        </DTS:PrecedenceConstraint>
                        <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{0FC62BAE-A760-4505-A5D4-342EF9132FCD}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts\SEQC Create Claim Fact Tables\SEQC Process Claims Facts And Dimensions\SQL Process Claim And Feature Facts" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL Process Claim And Feature Facts_To_SQL Process Fact Expense" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts\SEQC Create Claim Fact Tables\SEQC Process Claims Facts And Dimensions.PrecedenceConstraints[Constraint_SQL Process Claim And Feature Facts_To_SQL Process Fact Expense]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts\SEQC Create Claim Fact Tables\SEQC Process Claims Facts And Dimensions\SQL Process Fact Expense">
                        </DTS:PrecedenceConstraint>
                        <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{6C467487-F4E4-402E-A58E-FAE346CA0831}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts\SEQC Create Claim Fact Tables\SEQC Process Claims Facts And Dimensions\SQL Process Claim And Feature Facts" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL Process Claim And Feature Facts_To_SQL Process Fact Reserve" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts\SEQC Create Claim Fact Tables\SEQC Process Claims Facts And Dimensions.PrecedenceConstraints[Constraint_SQL Process Claim And Feature Facts_To_SQL Process Fact Reserve]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts\SEQC Create Claim Fact Tables\SEQC Process Claims Facts And Dimensions\SQL Process Fact Reserve">
                        </DTS:PrecedenceConstraint>
                        <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{3E40831F-23FA-4ACA-810B-6347200C8A42}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts\SEQC Create Claim Fact Tables\SEQC Process Claims Facts And Dimensions\SQL Process Fact Expense" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL Process Fact Expense_To_SQL Process Fact Expense Monthly" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts\SEQC Create Claim Fact Tables\SEQC Process Claims Facts And Dimensions.PrecedenceConstraints[Constraint_SQL Process Fact Expense_To_SQL Process Fact Expense Monthly]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts\SEQC Create Claim Fact Tables\SEQC Process Claims Facts And Dimensions\SQL Process Fact Expense Monthly">
                        </DTS:PrecedenceConstraint>
                        <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{5FF604F1-2DD6-4FEC-B6C1-E59385D47E08}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts\SEQC Create Claim Fact Tables\SEQC Process Claims Facts And Dimensions\SQL Process Fact Reserve" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL Process Fact Reserve_To_SQL Process Fact Reserve Monthly" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts\SEQC Create Claim Fact Tables\SEQC Process Claims Facts And Dimensions.PrecedenceConstraints[Constraint_SQL Process Fact Reserve_To_SQL Process Fact Reserve Monthly]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts\SEQC Create Claim Fact Tables\SEQC Process Claims Facts And Dimensions\SQL Process Fact Reserve Monthly">
                        </DTS:PrecedenceConstraint>
                        <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{0BC61D8B-EB2C-4059-98B8-E1631332B150}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts\SEQC Create Claim Fact Tables\SEQC Process Claims Facts And Dimensions\SQL Process Claim And Feature Facts" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL Process Claim And Feature Facts_To_SQL Process Claim Monthly" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts\SEQC Create Claim Fact Tables\SEQC Process Claims Facts And Dimensions.PrecedenceConstraints[Constraint_SQL Process Claim And Feature Facts_To_SQL Process Claim Monthly]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts\SEQC Create Claim Fact Tables\SEQC Process Claims Facts And Dimensions\SQL Process Claim Monthly">
                        </DTS:PrecedenceConstraint>
                        <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{6BC24063-DCFE-4699-9C88-8EAED562FB30}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts\SEQC Create Claim Fact Tables\SEQC Process Claims Facts And Dimensions\SQL Process Claim And Feature Facts" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL Process Claim And Feature Facts_To_SQL Process Fact Feature Monthly" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts\SEQC Create Claim Fact Tables\SEQC Process Claims Facts And Dimensions.PrecedenceConstraints[Constraint_SQL Process Claim And Feature Facts_To_SQL Process Fact Feature Monthly]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts\SEQC Create Claim Fact Tables\SEQC Process Claims Facts And Dimensions\SQL Process Fact Feature Monthly">
                        </DTS:PrecedenceConstraint>
                      </DTS:PrecedenceConstraints>
                      <DTS:PropertyExpression DTS:Name="Disable">!@[User::config_ProcessClaims]</DTS:PropertyExpression>
                    </DTS:Executable>
                  </DTS:Executables>
                  <DTS:PrecedenceConstraints>
                    <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{16547DAD-509D-47C4-912B-046D03DE6387}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts\SEQC Create Claim Fact Tables\SEQC Create Empty Claim Fact Tables" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SEQC Create Empty Claim Fact Tables_To_SEQC Process Claims Facts And Dimensions" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts\SEQC Create Claim Fact Tables.PrecedenceConstraints[Constraint_SEQC Create Empty Claim Fact Tables_To_SEQC Process Claims Facts And Dimensions]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts\SEQC Create Claim Fact Tables\SEQC Process Claims Facts And Dimensions">
                    </DTS:PrecedenceConstraint>
                  </DTS:PrecedenceConstraints>
                </DTS:Executable>
              </DTS:Executables>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:PrecedenceConstraints>
            <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{55D8363E-2F4C-47C1-8E5C-DF60B7431312}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create dimensions" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SEQC Create dimensions_To_SEQC for keys, indexes and Staging Periods process" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions.PrecedenceConstraints[Constraint_SEQC Create dimensions_To_SEQC for keys, indexes and Staging Periods process]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC for keys, indexes and Staging Periods process">
            </DTS:PrecedenceConstraint>
            <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{47FA82C1-53CA-42B2-A695-13369E479820}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC for keys, indexes and Staging Periods process" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SEQC for keys, indexes and Staging Periods process_To_SEQC Prepare common base tables" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions.PrecedenceConstraints[Constraint_SEQC for keys, indexes and Staging Periods process_To_SEQC Prepare common base tables]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Prepare common base tables">
            </DTS:PrecedenceConstraint>
            <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{CCE61526-DB4C-4268-BE03-69C6C6E1D783}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Prepare common base tables" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SEQC Prepare common base tables_To_SEQC Process Ratemaking tables" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions.PrecedenceConstraints[Constraint_SEQC Prepare common base tables_To_SEQC Process Ratemaking tables]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Process Ratemaking tables">
            </DTS:PrecedenceConstraint>
            <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{1BE06486-F082-4C5C-A7A5-D330496F618D}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Prepare common base tables" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SEQC Prepare common base tables_To_SEQC Create Transactional Facts" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions.PrecedenceConstraints[Constraint_SEQC Prepare common base tables_To_SEQC Create Transactional Facts]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Transactional Facts">
            </DTS:PrecedenceConstraint>
            <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{A7D6857A-9EE0-4C51-97A1-9A86AC9755FA}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Prepare common base tables" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SEQC Prepare common base tables_To_SEQC Create Claim Facts" DTS:refId="Package\SEQC Package Logic\SEQC Create facts and dimensions.PrecedenceConstraints[Constraint_SEQC Prepare common base tables_To_SEQC Create Claim Facts]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions\SEQC Create Claim Facts">
            </DTS:PrecedenceConstraint>
          </DTS:PrecedenceConstraints>
        </DTS:Executable>
        <DTS:Executable DTS:CreationName="STOCK:SEQUENCE" DTS:DTSID="{D1800B24-1238-4B49-AA8D-E9CCB6F4FBE4}" DTS:ExecutableType="STOCK:SEQUENCE" DTS:LocaleID="-1" DTS:ObjectName="SEQC Create indexes, FKs and Columnstore indexes" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes">
          <DTS:Executables>
            <DTS:Executable DTS:CreationName="STOCK:SEQUENCE" DTS:DTSID="{C0BA0441-2CD7-435E-9ABC-74FA74964008}" DTS:ExecutableType="STOCK:SEQUENCE" DTS:LocaleID="-1" DTS:ObjectName="SEQC Create dimension columnstore indexes" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create dimension columnstore indexes">
              <DTS:Executables>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{AC6A64FF-3F5A-48F7-B9FD-4F64AFE2ACDF}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create columnstore indexes" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create dimension columnstore indexes\SQL create columnstore indexes" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                  &#xA;                 CREATE NONCLUSTERED COLUMNSTORE INDEX [CS_IX_factlessVehicleLienholder] ON [DataMart].[factlessVehicleLienholder] (&#xA;                  SK_VehicleID&#xA;                  ,SK_LienholderID&#xA;                  )&#xA;                  WITH (DATA_COMPRESSION = COLUMNSTORE_ARCHIVE)&#xA;                                          &#xA;                 CREATE NONCLUSTERED COLUMNSTORE INDEX [CS_IX_factlessDrivers] ON [DataMart].[factlessDrivers] (&#xA;                  SK_DriversID&#xA;                  ,SK_DriverID&#xA;                  ,BK_DriverID&#xA;                  )&#xA;                  WITH (DATA_COMPRESSION = COLUMNSTORE_ARCHIVE)                                          &#xA;                                          &#xA;                         &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
              </DTS:Executables>
              <DTS:PropertyExpression DTS:Name="Disable">!@[User::config_CreateColumnstoreIndexes]</DTS:PropertyExpression>
            </DTS:Executable>
            <DTS:Executable DTS:CreationName="STOCK:SEQUENCE" DTS:DTSID="{020CB8A4-DB7B-47F7-9513-FBFE5F9B9826}" DTS:ExecutableType="STOCK:SEQUENCE" DTS:LocaleID="-1" DTS:ObjectName="SEQC Create Ratemaking Indexes and FKs" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Ratemaking Indexes and FKs">
              <DTS:Executables>
                <DTS:Executable DTS:CreationName="STOCK:SEQUENCE" DTS:DTSID="{AAFE39C8-01A2-4B09-9094-CAC4A2ED216F}" DTS:ExecutableType="STOCK:SEQUENCE" DTS:LocaleID="-1" DTS:ObjectName="SEQC Fake Ratemaking Indexes and FKs" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Ratemaking Indexes and FKs\SEQC Fake Ratemaking Indexes and FKs">
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="STOCK:SEQUENCE" DTS:DTSID="{26B3C866-2A68-4CC0-954C-608A47290611}" DTS:ExecutableType="STOCK:SEQUENCE" DTS:LocaleID="-1" DTS:ObjectName="SEQC Create Daily Indexes and FKs" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Ratemaking Indexes and FKs\SEQC Create Daily Indexes and FKs">
                  <DTS:Executables>
                    <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{C8E1982E-49B6-4656-A634-DE1A92A49299}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factPremiums Indexes and FKs" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Ratemaking Indexes and FKs\SEQC Create Daily Indexes and FKs\SQL create factPremiums Indexes and FKs" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                      <DTS:ObjectData>
                        <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                            &#xA;             --) Create indexes&#xA;             CREATE CLUSTERED INDEX CLUST_IX ON [DataMart].[factPremiums](SK_AY_DateID, SK_PolicyID) WITH (DATA_COMPRESSION = PAGE)&#xA;&#xA;             -- this two indexes are required to speed up SSAS db processing&#xA;             CREATE INDEX IX_BK_PolicyID ON [DataMart].[factPremiums](BK_PolicyTermID) INCLUDE(SK_PolicyID, SK_DriversID, SK_AY_DateID, SK_VehicleID, SK_CoverageID, SK_RatedDriverID)   WITH ( DATA_COMPRESSION = PAGE )&#xA;             CREATE INDEX IX_BK_VehicleID ON [DataMart].[factPremiums](BK_VehicleID) INCLUDE(SK_PolicyID, SK_DriversID, SK_AY_DateID, SK_VehicleID, SK_CoverageID, SK_RatedDriverID)  WITH ( DATA_COMPRESSION = PAGE )&#xA;          &#xA;             --Create FKs&#xA;             ALTER TABLE [DataMart].[factPremiums] WITH NOCHECK ADD CONSTRAINT FK_factPremiums_SK_CY_DateID FOREIGN KEY (SK_CY_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;             ALTER TABLE [DataMart].[factPremiums] WITH NOCHECK ADD CONSTRAINT FK_factPremiums_SK_AY_DateID FOREIGN KEY (SK_AY_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;             ALTER TABLE [DataMart].[factPremiums] WITH NOCHECK ADD CONSTRAINT FK_factPremiums_SK_PY_DateID FOREIGN KEY (SK_PY_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;             ALTER TABLE [DataMart].[factPremiums] WITH NOCHECK ADD CONSTRAINT FK_factPremiums_SK_RY_DateID FOREIGN KEY (SK_RY_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;             ALTER TABLE [DataMart].[factPremiums] WITH NOCHECK ADD CONSTRAINT FK_factPremiums_SK_VehicleID FOREIGN KEY (SK_VehicleID) REFERENCES [DataMart].[dimVehicle](SK_VehicleID)&#xA;             ALTER TABLE [DataMart].[factPremiums] WITH NOCHECK ADD CONSTRAINT FK_factPremiums_SK_PolicyID FOREIGN KEY (SK_PolicyID) REFERENCES [DataMart].[dimPolicy](SK_PolicyID)&#xA;             ALTER TABLE [DataMart].[factPremiums] WITH NOCHECK ADD CONSTRAINT FK_factPremiums_SK_CoverageID FOREIGN KEY (SK_CoverageID) REFERENCES [DataMart].[dimCoverage](SK_CoverageID)&#xA;             ALTER TABLE [DataMart].[factPremiums] WITH NOCHECK ADD CONSTRAINT FK_factPremiums_SK_DriversID FOREIGN KEY (SK_DriversID) REFERENCES [DataMart].[dimDrivers](SK_DriversID)&#xA;             ALTER TABLE [DataMart].[factPremiums] WITH NOCHECK ADD CONSTRAINT FK_factPremiums_SK_RatedDriverID FOREIGN KEY (SK_RatedDriverID) REFERENCES [DataMart].[dimDriver](SK_DriverID)&#xA;             ALTER TABLE [DataMart].[factPremiums] WITH NOCHECK ADD CONSTRAINT FK_factPremiums_SK_ProducerID FOREIGN KEY (SK_ProducerID) REFERENCES [DataMart].[dimProducer](SK_ProducerID)&#xA;             ALTER TABLE [DataMart].[factPremiums] WITH NOCHECK ADD CONSTRAINT FK_factPremiums_SK_CarrierID FOREIGN KEY (SK_CarrierID) REFERENCES [DataMart].[dimCarrier](SK_CarrierID)&#xA;             ALTER TABLE [DataMart].[factPremiums] WITH NOCHECK ADD CONSTRAINT FK_factPremiums_SK_ProgramID FOREIGN KEY (SK_ProgramID) REFERENCES [DataMart].[dimProgram](SK_ProgramID)&#xA;             ALTER TABLE [DataMart].[factPremiums] WITH NOCHECK ADD CONSTRAINT FK_factPremiums_SK_ProgramGroupID FOREIGN KEY (SK_ProgramGroupID) REFERENCES [DataMart].[dimProgramGroup](SK_ProgramGroupID)&#xA;             ALTER TABLE [DataMart].[factPremiums] WITH NOCHECK ADD CONSTRAINT FK_factPremiums_SK_AgencyOfficeID FOREIGN KEY (SK_AgencyOfficeID) REFERENCES [DataMart].[dimAgencyOffice](SK_AgencyOfficeID)&#xA;             &#xA;                                " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                        </SQLTask:SqlTaskData>
                      </DTS:ObjectData>
                    </DTS:Executable>
                    <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{6D791874-A769-4A82-81E9-1C9719D836A6}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factQuotePremium Indexes and FKs" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Ratemaking Indexes and FKs\SEQC Create Daily Indexes and FKs\SQL create factQuotePremium Indexes and FKs" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                      <DTS:ObjectData>
                        <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                  ALTER TABLE [DataMart].[factQuotePremium] WITH NOCHECK ADD CONSTRAINT FK_factQuotePremium_SK_TransactionDateID FOREIGN KEY (SK_TransactionDateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;                                  ALTER TABLE [DataMart].[factQuotePremium] WITH NOCHECK ADD CONSTRAINT FK_factQuotePremium_SK_TransactionMonthID FOREIGN KEY (SK_TransactionMonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;                                  ALTER TABLE [DataMart].[factQuotePremium] WITH NOCHECK ADD CONSTRAINT FK_factQuotePremium_SK_CoverageID FOREIGN KEY (SK_CoverageID) REFERENCES [DataMart].[dimCoverage](SK_CoverageID)&#xA;                                  ALTER TABLE [DataMart].[factQuotePremium] WITH NOCHECK ADD CONSTRAINT FK_factQuotePremium_SK_PolicyID FOREIGN KEY (SK_PolicyID) REFERENCES [DataMart].[dimQuotePolicyTerm](SK_PolicyID)&#xA;                                  ALTER TABLE [DataMart].[factQuotePremium] WITH NOCHECK ADD CONSTRAINT FK_factQuotePremium_SK_VehicleID FOREIGN KEY (SK_VehicleID) REFERENCES [DataMart].[dimQuoteVehicle](SK_VehicleID)&#xA;                                  ALTER TABLE [DataMart].[factQuotePremium] WITH NOCHECK ADD CONSTRAINT FK_factQuotePremium_SK_CarrierID FOREIGN KEY (SK_CarrierID) REFERENCES [DataMart].[dimCarrier](SK_CarrierID)&#xA;                                  ALTER TABLE [DataMart].[factQuotePremium] WITH NOCHECK ADD CONSTRAINT FK_factQuotePremium_SK_ProgramId FOREIGN KEY (SK_ProgramId) REFERENCES [DataMart].[dimProgram](SK_ProgramId)&#xA;                                  ALTER TABLE [DataMart].[factQuotePremium] WITH NOCHECK ADD CONSTRAINT FK_factQuotePremium_SK_DriverId FOREIGN KEY (SK_RatedDriverId) REFERENCES [DataMart].[dimDriver](SK_DriverId)&#xA;                                  ALTER TABLE [DataMart].[factQuotePremium] WITH NOCHECK ADD CONSTRAINT FK_factQuotePremium_SK_ProducerID FOREIGN KEY (SK_ProducerID) REFERENCES [DataMart].[dimProducer](SK_ProducerID)&#xA;                                " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                        </SQLTask:SqlTaskData>
                      </DTS:ObjectData>
                    </DTS:Executable>
                    <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{A5FBE2A1-5BF7-4ABF-92BD-3A8112571FD4}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factNewBusiness Indexes and FKs" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Ratemaking Indexes and FKs\SEQC Create Daily Indexes and FKs\SQL create factNewBusiness Indexes and FKs" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                      <DTS:ObjectData>
                        <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                  &#xA;             --) Create indexes&#xA;             CREATE CLUSTERED INDEX CLUST_IX ON [DataMart].[factNewBusiness](SK_AY_DateID) WITH (DATA_COMPRESSION = PAGE)             &#xA;           &#xA;             --) Create FKs&#xA;             ALTER TABLE [DataMart].[factNewBusiness] ADD CONSTRAINT FK_factNewBusiness_SK_CY_DateID FOREIGN KEY (SK_CY_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;             ALTER TABLE [DataMart].[factNewBusiness] ADD CONSTRAINT FK_factNewBusiness_SK_AY_DateID FOREIGN KEY (SK_AY_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;             ALTER TABLE [DataMart].[factNewBusiness] ADD CONSTRAINT FK_factNewBusiness_SK_PY_DateID FOREIGN KEY (SK_PY_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;             ALTER TABLE [DataMart].[factNewBusiness] ADD CONSTRAINT FK_factNewBusiness_SK_RY_DateID FOREIGN KEY (SK_RY_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;             ALTER TABLE [DataMart].[factNewBusiness] ADD CONSTRAINT FK_factNewBusiness_SK_VehicleID FOREIGN KEY (SK_VehicleID) REFERENCES [DataMart].[dimVehicle](SK_VehicleID)&#xA;             ALTER TABLE [DataMart].[factNewBusiness] ADD CONSTRAINT FK_factNewBusiness_SK_PolicyID FOREIGN KEY (SK_PolicyID) REFERENCES [DataMart].[dimPolicy](SK_PolicyID)&#xA;             ALTER TABLE [DataMart].[factNewBusiness] ADD CONSTRAINT FK_factNewBusiness_SK_DriversID FOREIGN KEY (SK_DriversID) REFERENCES [DataMart].[dimDrivers](SK_DriversID)&#xA;             ALTER TABLE [DataMart].[factNewBusiness] ADD CONSTRAINT FK_factNewBusiness_SK_RatedDriverID FOREIGN KEY (SK_RatedDriverID) REFERENCES [DataMart].[dimDriver](SK_DriverID)&#xA;             ALTER TABLE [DataMart].[factNewBusiness] ADD CONSTRAINT FK_factNewBusiness_SK_ProducerID FOREIGN KEY (SK_ProducerID) REFERENCES [DataMart].[dimProducer](SK_ProducerID)&#xA;             ALTER TABLE [DataMart].[factNewBusiness] ADD CONSTRAINT FK_factNewBusiness_SK_CarrierID FOREIGN KEY (SK_CarrierID) REFERENCES [DataMart].[dimCarrier](SK_CarrierID)&#xA;             ALTER TABLE [DataMart].[factNewBusiness] ADD CONSTRAINT FK_factNewBusiness_SK_ProgramID FOREIGN KEY (SK_ProgramID) REFERENCES [DataMart].[dimProgram](SK_ProgramID)&#xA;             ALTER TABLE [DataMart].[factNewBusiness] ADD CONSTRAINT FK_factNewBusiness_SK_ProgramGroupID FOREIGN KEY (SK_ProgramGroupID) REFERENCES [DataMart].[dimProgramGroup](SK_ProgramGroupID)&#xA;             ALTER TABLE [DataMart].[factNewBusiness] ADD CONSTRAINT FK_factNewBusiness_SK_AgencyOfficeID FOREIGN KEY (SK_AgencyOfficeID) REFERENCES [DataMart].[dimAgencyOffice](SK_AgencyOfficeID)&#xA;             &#xA;                                " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                        </SQLTask:SqlTaskData>
                      </DTS:ObjectData>
                    </DTS:Executable>
                    <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{5EB27D96-36F3-4F17-9E2E-3C5556D2BB46}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factRenewal FKs" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Ratemaking Indexes and FKs\SEQC Create Daily Indexes and FKs\SQL create factRenewal FKs" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                      <DTS:ObjectData>
                        <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                             &#xA;             --) Create indexes factRenewals&#xA;             CREATE CLUSTERED INDEX CLUST_IX ON [DataMart].[factRenewals](SK_AY_DateID) WITH (DATA_COMPRESSION = PAGE)             &#xA;           &#xA;             --) Create FKs&#xA;             ALTER TABLE [DataMart].[factRenewals] ADD CONSTRAINT FK_factRenewals_SK_CY_DateID FOREIGN KEY (SK_CY_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;             ALTER TABLE [DataMart].[factRenewals] ADD CONSTRAINT FK_factRenewals_SK_AY_DateID FOREIGN KEY (SK_AY_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;             ALTER TABLE [DataMart].[factRenewals] ADD CONSTRAINT FK_factRenewals_SK_PY_DateID FOREIGN KEY (SK_PY_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;             ALTER TABLE [DataMart].[factRenewals] ADD CONSTRAINT FK_factRenewals_SK_RY_DateID FOREIGN KEY (SK_RY_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)          &#xA;             ALTER TABLE [DataMart].[factRenewals] ADD CONSTRAINT FK_factRenewals_SK_PolicyID FOREIGN KEY (SK_PolicyID) REFERENCES [DataMart].[dimPolicy](SK_PolicyID)&#xA;             ALTER TABLE [DataMart].[factRenewals] ADD CONSTRAINT FK_factRenewals_SK_ProducerID FOREIGN KEY (SK_ProducerID) REFERENCES [DataMart].[dimProducer](SK_ProducerID)&#xA;             ALTER TABLE [DataMart].[factRenewals] ADD CONSTRAINT FK_factRenewals_SK_CarrierID FOREIGN KEY (SK_CarrierID) REFERENCES [DataMart].[dimCarrier](SK_CarrierID)&#xA;                    ALTER TABLE [DataMart].[factRenewals] ADD CONSTRAINT FK_factRenewals_SK_ProgramID FOREIGN KEY (SK_ProgramID) REFERENCES [DataMart].[dimProgram](SK_ProgramID)&#xA;          &#xA;             --) Create indexes factRenewalsActual&#xA;             CREATE CLUSTERED INDEX CLUST_IX ON [DataMart].[factRenewalsActual](SK_AY_DateID) WITH (DATA_COMPRESSION = PAGE)             &#xA;           &#xA;             --) Create FKs&#xA;             ALTER TABLE [DataMart].[factRenewalsActual] ADD CONSTRAINT FK_factRenewalsActual_SK_CY_DateID FOREIGN KEY (SK_CY_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;             ALTER TABLE [DataMart].[factRenewalsActual] ADD CONSTRAINT FK_factRenewalsActual_SK_AY_DateID FOREIGN KEY (SK_AY_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;             ALTER TABLE [DataMart].[factRenewalsActual] ADD CONSTRAINT FK_factRenewalsActual_SK_PY_DateID FOREIGN KEY (SK_PY_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;             ALTER TABLE [DataMart].[factRenewalsActual] ADD CONSTRAINT FK_factRenewalsActual_SK_RY_DateID FOREIGN KEY (SK_RY_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)          &#xA;             ALTER TABLE [DataMart].[factRenewalsActual] ADD CONSTRAINT FK_factRenewalsActual_SK_PolicyID FOREIGN KEY (SK_PolicyID) REFERENCES [DataMart].[dimPolicy](SK_PolicyID)&#xA;             ALTER TABLE [DataMart].[factRenewalsActual] ADD CONSTRAINT FK_factRenewalsActual_SK_ProducerID FOREIGN KEY (SK_ProducerID) REFERENCES [DataMart].[dimProducer](SK_ProducerID)&#xA;             ALTER TABLE [DataMart].[factRenewalsActual] ADD CONSTRAINT FK_factRenewalsActual_SK_CarrierID FOREIGN KEY (SK_CarrierID) REFERENCES [DataMart].[dimCarrier](SK_CarrierID)&#xA;                    ALTER TABLE [DataMart].[factRenewalsActual] ADD CONSTRAINT FK_factRenewalsActual_SK_ProgramID FOREIGN KEY (SK_ProgramID) REFERENCES [DataMart].[dimProgram](SK_ProgramID)&#xA;&#xA;&#xA;             --) Create indexes factRenewalsCarrioverActual&#xA;             CREATE CLUSTERED INDEX CLUST_IX ON [DataMart].[factRenewalsCarrioverActual](SK_AY_DateID) WITH (DATA_COMPRESSION = PAGE)             &#xA;           &#xA;             --) Create FKs&#xA;             ALTER TABLE [DataMart].[factRenewalsCarrioverActual] ADD CONSTRAINT FK_factRenewalsCarrioverActual_SK_CY_DateID FOREIGN KEY (SK_CY_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;             ALTER TABLE [DataMart].[factRenewalsCarrioverActual] ADD CONSTRAINT FK_factRenewalsCarrioverActual_SK_AY_DateID FOREIGN KEY (SK_AY_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;             ALTER TABLE [DataMart].[factRenewalsCarrioverActual] ADD CONSTRAINT FK_factRenewalsCarrioverActual_SK_PY_DateID FOREIGN KEY (SK_PY_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;             ALTER TABLE [DataMart].[factRenewalsCarrioverActual] ADD CONSTRAINT FK_factRenewalsCarrioverActual_SK_RY_DateID FOREIGN KEY (SK_RY_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)          &#xA;             ALTER TABLE [DataMart].[factRenewalsCarrioverActual] ADD CONSTRAINT FK_factRenewalsCarrioverActual_SK_PolicyID FOREIGN KEY (SK_PolicyID) REFERENCES [DataMart].[dimPolicy](SK_PolicyID)&#xA;             ALTER TABLE [DataMart].[factRenewalsCarrioverActual] ADD CONSTRAINT FK_factRenewalsCarrioverActual_SK_ProducerID FOREIGN KEY (SK_ProducerID) REFERENCES [DataMart].[dimProducer](SK_ProducerID)&#xA;             ALTER TABLE [DataMart].[factRenewalsCarrioverActual] ADD CONSTRAINT FK_factRenewalsCarrioverActual_SK_CarrierID FOREIGN KEY (SK_CarrierID) REFERENCES [DataMart].[dimCarrier](SK_CarrierID)&#xA;                    ALTER TABLE [DataMart].[factRenewalsCarrioverActual] ADD CONSTRAINT FK_factRenewalsCarrioverActual_SK_ProgramID FOREIGN KEY (SK_ProgramID) REFERENCES [DataMart].[dimProgram](SK_ProgramID)&#xA;&#xA;&#xA;             &#xA;                                " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                        </SQLTask:SqlTaskData>
                      </DTS:ObjectData>
                    </DTS:Executable>
                    <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{989CB96E-B11C-432B-A1ED-EFD2DDF1A4A9}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factDriverCount FKs" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Ratemaking Indexes and FKs\SEQC Create Daily Indexes and FKs\SQL create factDriverCount FKs" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                      <DTS:ObjectData>
                        <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                  &#xA;                                  CREATE CLUSTERED INDEX CLUST_IX ON [DataMart].[factDriverCount](SK_AY_DateID, SK_PolicyID) WITH ( DATA_COMPRESSION = PAGE)&#xA;                                  &#xA;                        ALTER TABLE [DataMart].[factDriverCount] WITH NOCHECK ADD CONSTRAINT FK_factDriverCount_SK_CY_DateID FOREIGN KEY (SK_CY_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;                        ALTER TABLE [DataMart].[factDriverCount] WITH NOCHECK ADD CONSTRAINT FK_factDriverCount_SK_AY_DateID FOREIGN KEY (SK_AY_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;                        ALTER TABLE [DataMart].[factDriverCount] WITH NOCHECK ADD CONSTRAINT FK_factDriverCount_SK_PY_DateID FOREIGN KEY (SK_PY_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;                        ALTER TABLE [DataMart].[factDriverCount] WITH NOCHECK ADD CONSTRAINT FK_factDriverCount_SK_RY_DateID FOREIGN KEY (SK_RY_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;                        ALTER TABLE [DataMart].[factDriverCount] WITH NOCHECK ADD CONSTRAINT FK_factDriverCount_SK_VehicleID FOREIGN KEY (SK_VehicleID) REFERENCES [DataMart].[dimVehicle](SK_VehicleID)&#xA;                        ALTER TABLE [DataMart].[factDriverCount] WITH NOCHECK ADD CONSTRAINT FK_factDriverCount_SK_PolicyID FOREIGN KEY (SK_PolicyID) REFERENCES [DataMart].[dimPolicy](SK_PolicyID)&#xA;                        ALTER TABLE [DataMart].[factDriverCount] WITH NOCHECK ADD CONSTRAINT FK_factDriverCount_SK_ProducerID FOREIGN KEY (SK_ProducerID) REFERENCES [DataMart].[dimProducer](SK_ProducerID)&#xA;                        ALTER TABLE [DataMart].[factDriverCount] WITH NOCHECK ADD CONSTRAINT FK_factDriverCount_SK_CarrierID FOREIGN KEY (SK_CarrierID) REFERENCES [DataMart].[dimCarrier](SK_CarrierID)&#xA;                                  ALTER TABLE [DataMart].[factDriverCount] WITH NOCHECK ADD CONSTRAINT FK_factDriverCount_SK_ProgramID FOREIGN KEY (SK_ProgramID) REFERENCES [DataMart].[dimProgram](SK_ProgramID)&#xA;                                                                    &#xA;                        &#xA;                                " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                        </SQLTask:SqlTaskData>
                      </DTS:ObjectData>
                    </DTS:Executable>
                    <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{0AF4756E-9C81-45E4-964A-9CEFC46867CF}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factDIF FKs" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Ratemaking Indexes and FKs\SEQC Create Daily Indexes and FKs\SQL create factDIF FKs" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                      <DTS:ObjectData>
                        <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                  &#xA;                                  CREATE CLUSTERED INDEX CLUST_IX ON [DataMart].[factDIF](SK_AY_DateID, SK_PolicyID) WITH ( DATA_COMPRESSION = PAGE)&#xA;                                  &#xA;                        ALTER TABLE [DataMart].[factDIF] WITH NOCHECK ADD CONSTRAINT FK_factDIF_SK_CY_DateID FOREIGN KEY (SK_CY_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;                        ALTER TABLE [DataMart].[factDIF] WITH NOCHECK ADD CONSTRAINT FK_factDIF_SK_AY_DateID FOREIGN KEY (SK_AY_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;                        ALTER TABLE [DataMart].[factDIF] WITH NOCHECK ADD CONSTRAINT FK_factDIF_SK_PY_DateID FOREIGN KEY (SK_PY_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;                        ALTER TABLE [DataMart].[factDIF] WITH NOCHECK ADD CONSTRAINT FK_factDIF_SK_RY_DateID FOREIGN KEY (SK_RY_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;                        ALTER TABLE [DataMart].[factDIF] WITH NOCHECK ADD CONSTRAINT FK_factDIF_SK_VehicleID FOREIGN KEY (SK_VehicleID) REFERENCES [DataMart].[dimVehicle](SK_VehicleID)&#xA;                        ALTER TABLE [DataMart].[factDIF] WITH NOCHECK ADD CONSTRAINT FK_factDIF_SK_PolicyID FOREIGN KEY (SK_PolicyID) REFERENCES [DataMart].[dimPolicy](SK_PolicyID)&#xA;                                  ALTER TABLE [DataMart].[factDIF] WITH NOCHECK ADD CONSTRAINT FK_factDIF_SK_CoverageID FOREIGN KEY (SK_CoverageID) REFERENCES [DataMart].[dimCoverage](SK_CoverageID)&#xA;                        ALTER TABLE [DataMart].[factDIF] WITH NOCHECK ADD CONSTRAINT FK_factDIF_SK_ProducerID FOREIGN KEY (SK_ProducerID) REFERENCES [DataMart].[dimProducer](SK_ProducerID)&#xA;                        ALTER TABLE [DataMart].[factDIF] WITH NOCHECK ADD CONSTRAINT FK_factDIF_SK_CarrierID FOREIGN KEY (SK_CarrierID) REFERENCES [DataMart].[dimCarrier](SK_CarrierID)&#xA;                                  ALTER TABLE [DataMart].[factDIF] WITH NOCHECK ADD CONSTRAINT FK_factDIF_SK_ProgramID FOREIGN KEY (SK_ProgramID) REFERENCES [DataMart].[dimProgram](SK_ProgramID)                                  &#xA;                                  &#xA;                        &#xA;                                " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                        </SQLTask:SqlTaskData>
                      </DTS:ObjectData>
                    </DTS:Executable>
                  </DTS:Executables>
                  <DTS:PropertyExpression DTS:Name="Disable">!@[User::config_Process_DailyDataMart]</DTS:PropertyExpression>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="STOCK:SEQUENCE" DTS:DTSID="{E34EFAFA-EC95-4777-AC9A-FA07BF641A40}" DTS:ExecutableType="STOCK:SEQUENCE" DTS:LocaleID="-1" DTS:ObjectName="SEQC Create Monthly Indexes and FKs" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Ratemaking Indexes and FKs\SEQC Create Monthly Indexes and FKs">
                  <DTS:Executables>
                    <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{F73A72A6-32B5-4352-B86E-57BF5C30B712}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factPremiumsMonthly Indexes and FKs" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Ratemaking Indexes and FKs\SEQC Create Monthly Indexes and FKs\SQL create factPremiumsMonthly Indexes and FKs" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                      <DTS:ObjectData>
                        <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                          &#xA;              --) Create indexes&#xA;              CREATE CLUSTERED INDEX CLUST_IX ON [DataMart].[factPremiumsMonthly](SK_AY_MonthID, SK_PolicyID) WITH ( DATA_COMPRESSION = PAGE)&#xA;&#xA;              -- this two indexes are required to speed up SSAS db processing&#xA;              CREATE INDEX IX_BK_PolicyID ON [DataMart].[factPremiumsMonthly](BK_PolicyTermID) INCLUDE(SK_PolicyID, SK_DriversID, SK_AY_MonthID, SK_VehicleID, SK_CoverageID, SK_RatedDriverID)   WITH ( DATA_COMPRESSION = PAGE )&#xA;              CREATE INDEX IX_BK_VehicleID ON [DataMart].[factPremiumsMonthly](BK_VehicleID) INCLUDE(SK_PolicyID, SK_DriversID, SK_AY_MonthID, SK_VehicleID, SK_CoverageID, SK_RatedDriverID)  WITH ( DATA_COMPRESSION = PAGE )&#xA;           &#xA;              --Create FKs&#xA;              ALTER TABLE [DataMart].[factPremiumsMonthly] WITH NOCHECK ADD CONSTRAINT FK_factPremiumsMonthly_SK_CY_MonthID FOREIGN KEY (SK_CY_MonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;              ALTER TABLE [DataMart].[factPremiumsMonthly] WITH NOCHECK ADD CONSTRAINT FK_factPremiumsMonthly_SK_AY_MonthID FOREIGN KEY (SK_AY_MonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;              ALTER TABLE [DataMart].[factPremiumsMonthly] WITH NOCHECK ADD CONSTRAINT FK_factPremiumsMonthly_SK_PY_MonthID FOREIGN KEY (SK_PY_MonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;              ALTER TABLE [DataMart].[factPremiumsMonthly] WITH NOCHECK ADD CONSTRAINT FK_factPremiumsMonthly_SK_RY_MonthID FOREIGN KEY (SK_RY_MonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;              ALTER TABLE [DataMart].[factPremiumsMonthly] WITH NOCHECK ADD CONSTRAINT FK_factPremiumsMonthly_SK_VehicleID FOREIGN KEY (SK_VehicleID) REFERENCES [DataMart].[dimVehicle](SK_VehicleID)&#xA;              ALTER TABLE [DataMart].[factPremiumsMonthly] WITH NOCHECK ADD CONSTRAINT FK_factPremiumsMonthly_SK_PolicyID FOREIGN KEY (SK_PolicyID) REFERENCES [DataMart].[dimPolicy](SK_PolicyID)&#xA;              ALTER TABLE [DataMart].[factPremiumsMonthly] WITH NOCHECK ADD CONSTRAINT FK_factPremiumsMonthly_SK_CoverageID FOREIGN KEY (SK_CoverageID) REFERENCES [DataMart].[dimCoverage](SK_CoverageID)&#xA;              ALTER TABLE [DataMart].[factPremiumsMonthly] WITH NOCHECK ADD CONSTRAINT FK_factPremiumsMonthly_SK_DriversID FOREIGN KEY (SK_DriversID) REFERENCES [DataMart].[dimDrivers](SK_DriversID)&#xA;              ALTER TABLE [DataMart].[factPremiumsMonthly] WITH NOCHECK ADD CONSTRAINT FK_factPremiumsMonthly_SK_RatedDriverID FOREIGN KEY (SK_RatedDriverID) REFERENCES [DataMart].[dimDriver](SK_DriverID)&#xA;              ALTER TABLE [DataMart].[factPremiumsMonthly] WITH NOCHECK ADD CONSTRAINT FK_factPremiumsMonthly_SK_ProducerID FOREIGN KEY (SK_ProducerID) REFERENCES [DataMart].[dimProducer](SK_ProducerID)&#xA;              ALTER TABLE [DataMart].[factPremiumsMonthly] WITH NOCHECK ADD CONSTRAINT FK_factPremiumsMonthly_SK_CarrierID FOREIGN KEY (SK_CarrierID) REFERENCES [DataMart].[dimCarrier](SK_CarrierID)&#xA;              ALTER TABLE [DataMart].[factPremiumsMonthly] WITH NOCHECK ADD CONSTRAINT FK_factPremiumsMonthly_SK_ProgramID FOREIGN KEY (SK_ProgramID) REFERENCES [DataMart].[dimProgram](SK_ProgramID)                      &#xA;              ALTER TABLE [DataMart].[factPremiumsMonthly] WITH NOCHECK ADD CONSTRAINT FK_factPremiumsMonthly_SK_ProgramGroupID FOREIGN KEY (SK_ProgramGroupID) REFERENCES [DataMart].[dimProgramGroup](SK_ProgramGroupID)                      &#xA;              ALTER TABLE [DataMart].[factPremiumsMonthly] WITH NOCHECK ADD CONSTRAINT FK_factPremiumsMonthly_SK_AgencyOfficeID FOREIGN KEY (SK_AgencyOfficeID) REFERENCES [DataMart].[dimAgencyOffice](SK_AgencyOfficeID)                      &#xA;             &#xA;                                " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                        </SQLTask:SqlTaskData>
                      </DTS:ObjectData>
                    </DTS:Executable>
                    <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{251C856D-7E34-4521-91AA-FB42F747AC98}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factPifVifMonthly Indexes and FKs" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Ratemaking Indexes and FKs\SEQC Create Monthly Indexes and FKs\SQL create factPifVifMonthly Indexes and FKs" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                      <DTS:ObjectData>
                        <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                  &#xA;                --) Create indexes&#xA;              CREATE CLUSTERED INDEX CLUST_IX ON [DataMart].[factPifVifMonthly](SK_AY_MonthID, SK_PolicyID) WITH ( DATA_COMPRESSION = PAGE)&#xA;&#xA;              --Create FKs&#xA;              ALTER TABLE [DataMart].[factPifVifMonthly] WITH NOCHECK ADD CONSTRAINT FK_factPifVifMonthly_SK_CY_MonthID FOREIGN KEY (SK_CY_MonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;              ALTER TABLE [DataMart].[factPifVifMonthly] WITH NOCHECK ADD CONSTRAINT FK_factPifVifMonthly_SK_AY_MonthID FOREIGN KEY (SK_AY_MonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;              ALTER TABLE [DataMart].[factPifVifMonthly] WITH NOCHECK ADD CONSTRAINT FK_factPifVifMonthly_SK_RY_MonthID FOREIGN KEY (SK_RY_MonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;              ALTER TABLE [DataMart].[factPifVifMonthly] WITH NOCHECK ADD CONSTRAINT FK_factPifVifMonthly_SK_VehicleID FOREIGN KEY (SK_VehicleID) REFERENCES [DataMart].[dimVehicle](SK_VehicleID)&#xA;              ALTER TABLE [DataMart].[factPifVifMonthly] WITH NOCHECK ADD CONSTRAINT FK_factPifVifMonthly_SK_PolicyID FOREIGN KEY (SK_PolicyID) REFERENCES [DataMart].[dimPolicy](SK_PolicyID)&#xA;              ALTER TABLE [DataMart].[factPifVifMonthly] WITH NOCHECK ADD CONSTRAINT FK_factPifVifMonthly_SK_CoverageID FOREIGN KEY (SK_CoverageID) REFERENCES [DataMart].[dimCoverage](SK_CoverageID)&#xA;              --ALTER TABLE [DataMart].[factPifVifMonthly] WITH NOCHECK ADD CONSTRAINT FK_factPifVifMonthly_SK_DriversID FOREIGN KEY (SK_DriversID) REFERENCES [DataMart].[dimDrivers](SK_DriversID)&#xA;              ALTER TABLE [DataMart].[factPifVifMonthly] WITH NOCHECK ADD CONSTRAINT FK_factPifVifMonthly_SK_RatedDriverID FOREIGN KEY (SK_RatedDriverID) REFERENCES [DataMart].[dimDriver](SK_DriverID)&#xA;              ALTER TABLE [DataMart].[factPifVifMonthly] WITH NOCHECK ADD CONSTRAINT FK_factPifVifMonthly_SK_ProducerID FOREIGN KEY (SK_ProducerID) REFERENCES [DataMart].[dimProducer](SK_ProducerID)&#xA;              ALTER TABLE [DataMart].[factPifVifMonthly] WITH NOCHECK ADD CONSTRAINT FK_factPifVifMonthly_SK_CarrierID FOREIGN KEY (SK_CarrierID) REFERENCES [DataMart].[dimCarrier](SK_CarrierID)&#xA;                      ALTER TABLE [DataMart].[factPifVifMonthly] WITH NOCHECK ADD CONSTRAINT FK_factPifVifMonthly_SK_ProgramID FOREIGN KEY (SK_ProgramID) REFERENCES [DataMart].[dimProgram](SK_ProgramID)                      &#xA;             &#xA;                                " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                        </SQLTask:SqlTaskData>
                      </DTS:ObjectData>
                    </DTS:Executable>
                    <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{E18430D3-9590-46C2-BE65-2F074123CD99}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factNewBusinessMonthly Indexes and FKs" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Ratemaking Indexes and FKs\SEQC Create Monthly Indexes and FKs\SQL create factNewBusinessMonthly Indexes and FKs" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                      <DTS:ObjectData>
                        <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                  &#xA;                     --) Create indexes&#xA;                     CREATE CLUSTERED INDEX CLUST_IX ON [DataMart].[factNewBusinessMonthly](SK_AY_MonthID, SK_PolicyID) WITH ( DATA_COMPRESSION = PAGE)&#xA;&#xA;                     --Create FKs&#xA;                     ALTER TABLE [DataMart].[factNewBusinessMonthly] WITH NOCHECK ADD CONSTRAINT FK_factNewBusinessMonthly_SK_CY_MonthID FOREIGN KEY (SK_CY_MonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;                     ALTER TABLE [DataMart].[factNewBusinessMonthly] WITH NOCHECK ADD CONSTRAINT FK_factNewBusinessMonthly_SK_AY_MonthID FOREIGN KEY (SK_AY_MonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;                     ALTER TABLE [DataMart].[factNewBusinessMonthly] WITH NOCHECK ADD CONSTRAINT FK_factNewBusinessMonthly_SK_RY_MonthID FOREIGN KEY (SK_RY_MonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;                     ALTER TABLE [DataMart].[factNewBusinessMonthly] WITH NOCHECK ADD CONSTRAINT FK_factNewBusinessMonthly_SK_VehicleID FOREIGN KEY (SK_VehicleID) REFERENCES [DataMart].[dimVehicle](SK_VehicleID)&#xA;                     ALTER TABLE [DataMart].[factNewBusinessMonthly] WITH NOCHECK ADD CONSTRAINT FK_factNewBusinessMonthly_SK_PolicyID FOREIGN KEY (SK_PolicyID) REFERENCES [DataMart].[dimPolicy](SK_PolicyID)&#xA;                     ALTER TABLE [DataMart].[factNewBusinessMonthly] WITH NOCHECK ADD CONSTRAINT FK_factNewBusinessMonthly_SK_DriversID FOREIGN KEY (SK_DriversID) REFERENCES [DataMart].[dimDrivers](SK_DriversID)&#xA;                     ALTER TABLE [DataMart].[factNewBusinessMonthly] WITH NOCHECK ADD CONSTRAINT FK_factNewBusinessMonthly_SK_RatedDriverID FOREIGN KEY (SK_RatedDriverID) REFERENCES [DataMart].[dimDriver](SK_DriverID)&#xA;                     ALTER TABLE [DataMart].[factNewBusinessMonthly] WITH NOCHECK ADD CONSTRAINT FK_factNewBusinessMonthly_SK_ProducerID FOREIGN KEY (SK_ProducerID) REFERENCES [DataMart].[dimProducer](SK_ProducerID)&#xA;                     ALTER TABLE [DataMart].[factNewBusinessMonthly] WITH NOCHECK ADD CONSTRAINT FK_factNewBusinessMonthly_SK_CarrierID FOREIGN KEY (SK_CarrierID) REFERENCES [DataMart].[dimCarrier](SK_CarrierID)&#xA;                     ALTER TABLE [DataMart].[factNewBusinessMonthly] WITH NOCHECK ADD CONSTRAINT FK_factNewBusinessMonthly_SK_ProgramID FOREIGN KEY (SK_ProgramID) REFERENCES [DataMart].[dimProgram](SK_ProgramID)&#xA;                     ALTER TABLE [DataMart].[factNewBusinessMonthly] WITH NOCHECK ADD CONSTRAINT FK_factNewBusinessMonthly_SK_ProgramGroupID FOREIGN KEY (SK_ProgramGroupID) REFERENCES [DataMart].[dimProgramGroup](SK_ProgramGroupID)&#xA;                     ALTER TABLE [DataMart].[factNewBusinessMonthly] WITH NOCHECK ADD CONSTRAINT FK_factNewBusinessMonthly_SK_AgencyOfficeID FOREIGN KEY (SK_AgencyOfficeID) REFERENCES [DataMart].[dimAgencyOffice](SK_AgencyOfficeID)&#xA;                    &#xA;                                " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                        </SQLTask:SqlTaskData>
                      </DTS:ObjectData>
                    </DTS:Executable>
                    <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{A89D570B-7B47-4A10-9421-D65578FFB31C}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factRenewalsMonthly factRenewalsActualMonthly FKs" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Ratemaking Indexes and FKs\SEQC Create Monthly Indexes and FKs\SQL create factRenewalsMonthly factRenewalsActualMonthly FKs" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                      <DTS:ObjectData>
                        <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                  &#xA;                --) Create indexes&#xA;              CREATE CLUSTERED INDEX CLUST_IX ON [DataMart].[factRenewalsMonthly](SK_AY_MonthID, SK_PolicyID) WITH ( DATA_COMPRESSION = PAGE)&#xA;&#xA;              --Create FKs&#xA;              ALTER TABLE [DataMart].[factRenewalsMonthly] WITH NOCHECK ADD CONSTRAINT FK_factRenewalsMonthly_SK_AY_MonthID FOREIGN KEY (SK_AY_MonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;              ALTER TABLE [DataMart].[factRenewalsMonthly] WITH NOCHECK ADD CONSTRAINT FK_factRenewalsMonthly_SK_CY_MonthID FOREIGN KEY (SK_CY_MonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)            &#xA;              ALTER TABLE [DataMart].[factRenewalsMonthly] WITH NOCHECK ADD CONSTRAINT FK_factRenewalsMonthly_SK_PY_MonthID FOREIGN KEY (SK_PY_MonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;              ALTER TABLE [DataMart].[factRenewalsMonthly] WITH NOCHECK ADD CONSTRAINT FK_factRenewalsMonthly_SK_RY_MonthID FOREIGN KEY (SK_RY_MonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;              ALTER TABLE [DataMart].[factRenewalsMonthly] WITH NOCHECK ADD CONSTRAINT FK_factRenewalsMonthly_SK_PolicyID FOREIGN KEY (SK_PolicyID) REFERENCES [DataMart].[dimPolicy](SK_PolicyID)&#xA;              ALTER TABLE [DataMart].[factRenewalsMonthly] WITH NOCHECK ADD CONSTRAINT FK_factRenewalsMonthly_SK_ProducerID FOREIGN KEY (SK_ProducerID) REFERENCES [DataMart].[dimProducer](SK_ProducerID)&#xA;              ALTER TABLE [DataMart].[factRenewalsMonthly] WITH NOCHECK ADD CONSTRAINT FK_factRenewalsMonthly_SK_CarrierID FOREIGN KEY (SK_CarrierID) REFERENCES [DataMart].[dimCarrier](SK_CarrierID)&#xA;                      ALTER TABLE [DataMart].[factRenewalsMonthly] WITH NOCHECK ADD CONSTRAINT FK_factRenewalsMonthly_SK_ProgramID FOREIGN KEY (SK_ProgramID) REFERENCES [DataMart].[dimProgram](SK_ProgramID)                      &#xA;       &#xA;                --) Create indexes&#xA;              CREATE CLUSTERED INDEX CLUST_IX ON [DataMart].[factRenewalsActualMonthly](SK_AY_MonthID, SK_PolicyID) WITH ( DATA_COMPRESSION = PAGE)&#xA;&#xA;              --Create FKs&#xA;              ALTER TABLE [DataMart].[factRenewalsActualMonthly] WITH NOCHECK ADD CONSTRAINT FK_factRenewalsActualMonthly_SK_AY_MonthID FOREIGN KEY (SK_AY_MonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;              ALTER TABLE [DataMart].[factRenewalsActualMonthly] WITH NOCHECK ADD CONSTRAINT FK_factRenewalsActualMonthly_SK_CY_MonthID FOREIGN KEY (SK_CY_MonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)            &#xA;              ALTER TABLE [DataMart].[factRenewalsActualMonthly] WITH NOCHECK ADD CONSTRAINT FK_factRenewalsActualMonthly_SK_PY_MonthID FOREIGN KEY (SK_PY_MonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;              ALTER TABLE [DataMart].[factRenewalsActualMonthly] WITH NOCHECK ADD CONSTRAINT FK_factRenewalsActualMonthly_SK_RY_MonthID FOREIGN KEY (SK_RY_MonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;              ALTER TABLE [DataMart].[factRenewalsActualMonthly] WITH NOCHECK ADD CONSTRAINT FK_factRenewalsActualMonthly_SK_PolicyID FOREIGN KEY (SK_PolicyID) REFERENCES [DataMart].[dimPolicy](SK_PolicyID)&#xA;              ALTER TABLE [DataMart].[factRenewalsActualMonthly] WITH NOCHECK ADD CONSTRAINT FK_factRenewalsActualMonthly_SK_ProducerID FOREIGN KEY (SK_ProducerID) REFERENCES [DataMart].[dimProducer](SK_ProducerID)&#xA;              ALTER TABLE [DataMart].[factRenewalsActualMonthly] WITH NOCHECK ADD CONSTRAINT FK_factRenewalsActualMonthly_SK_CarrierID FOREIGN KEY (SK_CarrierID) REFERENCES [DataMart].[dimCarrier](SK_CarrierID)&#xA;                      ALTER TABLE [DataMart].[factRenewalsActualMonthly] WITH NOCHECK ADD CONSTRAINT FK_factRenewalsActualMonthly_SK_ProgramID FOREIGN KEY (SK_ProgramID) REFERENCES [DataMart].[dimProgram](SK_ProgramID)&#xA;                      &#xA;&#xA;                --) Create indexes&#xA;              CREATE CLUSTERED INDEX CLUST_IX ON [DataMart].[factRenewalsCarrioverActualMonthly](SK_AY_MonthID, SK_PolicyID) WITH ( DATA_COMPRESSION = PAGE)&#xA;&#xA;              --Create FKs&#xA;              ALTER TABLE [DataMart].[factRenewalsCarrioverActualMonthly] WITH NOCHECK ADD CONSTRAINT FK_factRenewalsCarrioverActualMonthly_SK_AY_MonthID FOREIGN KEY (SK_AY_MonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;              ALTER TABLE [DataMart].[factRenewalsCarrioverActualMonthly] WITH NOCHECK ADD CONSTRAINT FK_factRenewalsCarrioverActualMonthly_SK_CY_MonthID FOREIGN KEY (SK_CY_MonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)            &#xA;              ALTER TABLE [DataMart].[factRenewalsCarrioverActualMonthly] WITH NOCHECK ADD CONSTRAINT FK_factRenewalsCarrioverActualMonthly_SK_PY_MonthID FOREIGN KEY (SK_PY_MonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;              ALTER TABLE [DataMart].[factRenewalsCarrioverActualMonthly] WITH NOCHECK ADD CONSTRAINT FK_factRenewalsCarrioverActualMonthly_SK_RY_MonthID FOREIGN KEY (SK_RY_MonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;              ALTER TABLE [DataMart].[factRenewalsCarrioverActualMonthly] WITH NOCHECK ADD CONSTRAINT FK_factRenewalsCarrioverActualMonthly_SK_PolicyID FOREIGN KEY (SK_PolicyID) REFERENCES [DataMart].[dimPolicy](SK_PolicyID)&#xA;              ALTER TABLE [DataMart].[factRenewalsCarrioverActualMonthly] WITH NOCHECK ADD CONSTRAINT FK_factRenewalsCarrioverActualMonthly_SK_ProducerID FOREIGN KEY (SK_ProducerID) REFERENCES [DataMart].[dimProducer](SK_ProducerID)&#xA;              ALTER TABLE [DataMart].[factRenewalsCarrioverActualMonthly] WITH NOCHECK ADD CONSTRAINT FK_factRenewalsCarrioverActualMonthly_SK_CarrierID FOREIGN KEY (SK_CarrierID) REFERENCES [DataMart].[dimCarrier](SK_CarrierID)&#xA;                      ALTER TABLE [DataMart].[factRenewalsCarrioverActualMonthly] WITH NOCHECK ADD CONSTRAINT FK_factRenewalsCarrioverActualMonthly_SK_ProgramID FOREIGN KEY (SK_ProgramID) REFERENCES [DataMart].[dimProgram](SK_ProgramID)&#xA;                    &#xA;                                " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                        </SQLTask:SqlTaskData>
                      </DTS:ObjectData>
                    </DTS:Executable>
                    <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{4FEF889E-3116-4F72-95EC-0A21DDBD279A}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factDriverCountMonthly FKs" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Ratemaking Indexes and FKs\SEQC Create Monthly Indexes and FKs\SQL create factDriverCountMonthly FKs" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                      <DTS:ObjectData>
                        <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                  &#xA;             --) Create indexes&#xA;             CREATE CLUSTERED INDEX CLUST_IX ON [DataMart].[factDriverCountMonthly](SK_AY_MonthID, SK_PolicyID) WITH ( DATA_COMPRESSION = PAGE)&#xA;          &#xA;             --Create FKs&#xA;             ALTER TABLE [DataMart].[factDriverCountMonthly] WITH NOCHECK ADD CONSTRAINT FK_factDriverCountMonthly_SK_CY_MonthID FOREIGN KEY (SK_CY_MonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;             ALTER TABLE [DataMart].[factDriverCountMonthly] WITH NOCHECK ADD CONSTRAINT FK_factDriverCountMonthly_SK_AY_MonthID FOREIGN KEY (SK_AY_MonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;             ALTER TABLE [DataMart].[factDriverCountMonthly] WITH NOCHECK ADD CONSTRAINT FK_factDriverCountMonthly_SK_PY_MonthID FOREIGN KEY (SK_PY_MonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;             ALTER TABLE [DataMart].[factDriverCountMonthly] WITH NOCHECK ADD CONSTRAINT FK_factDriverCountMonthly_SK_RY_MonthID FOREIGN KEY (SK_RY_MonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;             ALTER TABLE [DataMart].[factDriverCountMonthly] WITH NOCHECK ADD CONSTRAINT FK_factDriverCountMonthly_SK_VehicleID FOREIGN KEY (SK_VehicleID) REFERENCES [DataMart].[dimVehicle](SK_VehicleID)&#xA;             ALTER TABLE [DataMart].[factDriverCountMonthly] WITH NOCHECK ADD CONSTRAINT FK_factDriverCountMonthly_SK_PolicyID FOREIGN KEY (SK_PolicyID) REFERENCES [DataMart].[dimPolicy](SK_PolicyID)&#xA;             ALTER TABLE [DataMart].[factDriverCountMonthly] WITH NOCHECK ADD CONSTRAINT FK_factDriverCountMonthly_SK_ProducerID FOREIGN KEY (SK_ProducerID) REFERENCES [DataMart].[dimProducer](SK_ProducerID)&#xA;             ALTER TABLE [DataMart].[factDriverCountMonthly] WITH NOCHECK ADD CONSTRAINT FK_factDriverCountMonthly_SK_CarrierID FOREIGN KEY (SK_CarrierID) REFERENCES [DataMart].[dimCarrier](SK_CarrierID)&#xA;                    ALTER TABLE [DataMart].[factDriverCountMonthly] WITH NOCHECK ADD CONSTRAINT FK_factDriverCountMonthly_SK_ProgramID FOREIGN KEY (SK_ProgramID) REFERENCES [DataMart].[dimProgram](SK_ProgramID)                    &#xA;             &#xA;                                " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                        </SQLTask:SqlTaskData>
                      </DTS:ObjectData>
                    </DTS:Executable>
                  </DTS:Executables>
                  <DTS:PropertyExpression DTS:Name="Disable">!@[User::config_Process_MonthlyDataMart]</DTS:PropertyExpression>
                </DTS:Executable>
              </DTS:Executables>
              <DTS:PrecedenceConstraints>
                <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{5D8CC20B-B742-4596-9F3F-919A6FF9327F}" DTS:EvalOp="3" DTS:Expression="@[User::ProcessRatemaking]==1" DTS:From="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Ratemaking Indexes and FKs\SEQC Fake Ratemaking Indexes and FKs" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SEQC Fake Ratemaking Indexes and FKs_To_SEQC Create Daily Indexes and FKs" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Ratemaking Indexes and FKs.PrecedenceConstraints[Constraint_SEQC Fake Ratemaking Indexes and FKs_To_SEQC Create Daily Indexes and FKs]" DTS:To="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Ratemaking Indexes and FKs\SEQC Create Daily Indexes and FKs">
                </DTS:PrecedenceConstraint>
                <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{40BC6C83-6940-4407-9170-39A6F2781F86}" DTS:EvalOp="3" DTS:Expression="@[User::ProcessRatemaking]==1" DTS:From="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Ratemaking Indexes and FKs\SEQC Fake Ratemaking Indexes and FKs" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SEQC Fake Ratemaking Indexes and FKs_To_SEQC Create Monthly Indexes and FKs" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Ratemaking Indexes and FKs.PrecedenceConstraints[Constraint_SEQC Fake Ratemaking Indexes and FKs_To_SEQC Create Monthly Indexes and FKs]" DTS:To="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Ratemaking Indexes and FKs\SEQC Create Monthly Indexes and FKs">
                </DTS:PrecedenceConstraint>
              </DTS:PrecedenceConstraints>
            </DTS:Executable>
            <DTS:Executable DTS:CreationName="STOCK:SEQUENCE" DTS:DTSID="{AFF27ADC-45F8-4A44-A643-04C0A1C9D01B}" DTS:ExecutableType="STOCK:SEQUENCE" DTS:LocaleID="-1" DTS:ObjectName="SEQC Create Claim Indexes and FKs" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Claim Indexes and FKs">
              <DTS:Executables>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{AD27A518-FE41-4A58-A396-71DDAF85555E}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factClaim FKs" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Claim Indexes and FKs\SQL create factClaim FKs" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                         &#xA;         --) Create indexes&#xA;         CREATE CLUSTERED INDEX CLUST_IX ON [DataMart].[factClaim](SK_AY_DateID, SK_PolicyID) WITH ( DATA_COMPRESSION = PAGE)&#xA;          &#xA;         --Create FKs&#xA;         ALTER TABLE [DataMart].[factClaim] WITH NOCHECK ADD CONSTRAINT FK_factClaim_SK_CY_DateID FOREIGN KEY (SK_CY_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;         ALTER TABLE [DataMart].[factClaim] WITH NOCHECK ADD CONSTRAINT FK_factClaim_SK_AY_DateID FOREIGN KEY (SK_AY_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;         ALTER TABLE [DataMart].[factClaim] WITH NOCHECK ADD CONSTRAINT FK_factClaim_SK_PY_DateID FOREIGN KEY (SK_PY_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;         ALTER TABLE [DataMart].[factClaim] WITH NOCHECK ADD CONSTRAINT FK_factClaim_SK_RY_DateID FOREIGN KEY (SK_RY_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;         ALTER TABLE [DataMart].[factClaim] WITH NOCHECK ADD CONSTRAINT FK_factClaim_SK_VehicleID FOREIGN KEY (SK_VehicleID) REFERENCES [DataMart].[dimVehicle](SK_VehicleID)&#xA;         ALTER TABLE [DataMart].[factClaim] WITH NOCHECK ADD CONSTRAINT FK_factClaim_SK_PolicyID FOREIGN KEY (SK_PolicyID) REFERENCES [DataMart].[dimPolicy](SK_PolicyID)&#xA;         ALTER TABLE [DataMart].[factClaim] WITH NOCHECK ADD CONSTRAINT FK_factClaim_SK_ClaimID FOREIGN KEY (SK_ClaimID) REFERENCES [DataMart].[dimClaim](SK_ClaimID)&#xA;         ALTER TABLE [DataMart].[factClaim] WITH NOCHECK ADD CONSTRAINT FK_factClaim_SK_DriversID FOREIGN KEY (SK_DriversID) REFERENCES [DataMart].[dimDrivers](SK_DriversID)&#xA;         ALTER TABLE [DataMart].[factClaim] WITH NOCHECK ADD CONSTRAINT FK_factClaim_SK_RatedDriverID FOREIGN KEY (SK_RatedDriverID) REFERENCES [DataMart].[dimDriver](SK_DriverID)          &#xA;         ALTER TABLE [DataMart].[factClaim] WITH NOCHECK ADD CONSTRAINT FK_factClaim_SK_IncidentDriverID FOREIGN KEY (SK_IncidentDriverID) REFERENCES [DataMart].[dimDriver](SK_DriverID)&#xA;         ALTER TABLE [DataMart].[factClaim] WITH NOCHECK ADD CONSTRAINT FK_factClaim_SK_ProducerID FOREIGN KEY (SK_ProducerID) REFERENCES [DataMart].[dimProducer](SK_ProducerID)&#xA;         ALTER TABLE [DataMart].[factClaim] WITH NOCHECK ADD CONSTRAINT FK_factClaim_SK_CarrierID FOREIGN KEY (SK_CarrierID) REFERENCES [DataMart].[dimCarrier](SK_CarrierID)&#xA;                ALTER TABLE [DataMart].[factClaim] WITH NOCHECK ADD CONSTRAINT FK_factClaim_SK_ProgramID FOREIGN KEY (SK_ProgramID) REFERENCES [DataMart].[dimProgram](SK_ProgramID)&#xA;                ALTER TABLE [DataMart].[factClaim] WITH NOCHECK ADD CONSTRAINT FK_factClaim_SK_Transaction_DateID FOREIGN KEY (SK_Transaction_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;                    &#xA;         &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{0A7AD4B7-2DF1-44C4-AAD2-AB6E098509E7}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factFeature FKs" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Claim Indexes and FKs\SQL create factFeature FKs" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                         &#xA;         --) Create indexes&#xA;         CREATE CLUSTERED INDEX CLUST_IX ON [DataMart].[factFeature](SK_AY_DateID, SK_PolicyID) WITH ( DATA_COMPRESSION = PAGE)&#xA;          &#xA;         --Create FKs&#xA;         ALTER TABLE [DataMart].[factFeature] WITH NOCHECK ADD CONSTRAINT FK_factFeature_SK_CY_DateID FOREIGN KEY (SK_CY_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;         ALTER TABLE [DataMart].[factFeature] WITH NOCHECK ADD CONSTRAINT FK_factFeature_SK_AY_DateID FOREIGN KEY (SK_AY_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;         ALTER TABLE [DataMart].[factFeature] WITH NOCHECK ADD CONSTRAINT FK_factFeature_SK_PY_DateID FOREIGN KEY (SK_PY_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;         ALTER TABLE [DataMart].[factFeature] WITH NOCHECK ADD CONSTRAINT FK_factFeature_SK_RY_DateID FOREIGN KEY (SK_RY_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;         ALTER TABLE [DataMart].[factFeature] WITH NOCHECK ADD CONSTRAINT FK_factFeature_SK_VehicleID FOREIGN KEY (SK_VehicleID) REFERENCES [DataMart].[dimVehicle](SK_VehicleID)&#xA;         ALTER TABLE [DataMart].[factFeature] WITH NOCHECK ADD CONSTRAINT FK_factFeature_SK_PolicyID FOREIGN KEY (SK_PolicyID) REFERENCES [DataMart].[dimPolicy](SK_PolicyID)&#xA;         ALTER TABLE [DataMart].[factFeature] WITH NOCHECK ADD CONSTRAINT FK_factFeature_SK_ClaimID FOREIGN KEY (SK_ClaimID) REFERENCES [DataMart].[dimClaim](SK_ClaimID)&#xA;         ALTER TABLE [DataMart].[factFeature] WITH NOCHECK ADD CONSTRAINT FK_factFeature_SK_DriversID FOREIGN KEY (SK_DriversID) REFERENCES [DataMart].[dimDrivers](SK_DriversID)&#xA;         ALTER TABLE [DataMart].[factFeature] WITH NOCHECK ADD CONSTRAINT FK_factFeature_SK_RatedDriverID FOREIGN KEY (SK_RatedDriverID) REFERENCES [DataMart].[dimDriver](SK_DriverID)          &#xA;         ALTER TABLE [DataMart].[factFeature] WITH NOCHECK ADD CONSTRAINT FK_factFeature_SK_IncidentDriverID FOREIGN KEY (SK_IncidentDriverID) REFERENCES [DataMart].[dimDriver](SK_DriverID)&#xA;         ALTER TABLE [DataMart].[factFeature] WITH NOCHECK ADD CONSTRAINT FK_factFeature_SK_CoverageID FOREIGN KEY (SK_CoverageID) REFERENCES [DataMart].[dimCoverage](SK_CoverageID)&#xA;         ALTER TABLE [DataMart].[factFeature] WITH NOCHECK ADD CONSTRAINT FK_factFeature_SK_FeatureID FOREIGN KEY (SK_FeatureID) REFERENCES [DataMart].[dimFeature](SK_FeatureID)&#xA;         ALTER TABLE [DataMart].[factFeature] WITH NOCHECK ADD CONSTRAINT FK_factFeature_SK_ProducerID FOREIGN KEY (SK_ProducerID) REFERENCES [DataMart].[dimProducer](SK_ProducerID)&#xA;         ALTER TABLE [DataMart].[factFeature] WITH NOCHECK ADD CONSTRAINT FK_factFeature_SK_CarrierID FOREIGN KEY (SK_CarrierID) REFERENCES [DataMart].[dimCarrier](SK_CarrierID)&#xA;                ALTER TABLE [DataMart].[factFeature] WITH NOCHECK ADD CONSTRAINT FK_factFeature_SK_ProgramID FOREIGN KEY (SK_ProgramID) REFERENCES [DataMart].[dimProgram](SK_ProgramID)&#xA;                ALTER TABLE [DataMart].[factFeature] WITH NOCHECK ADD CONSTRAINT FK_factFeature_SK_Transaction_DateID FOREIGN KEY (SK_Transaction_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;                    &#xA;         &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{8FD02E27-53C8-43C4-916B-D1F255D64F91}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factExpense FKs" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Claim Indexes and FKs\SQL create factExpense FKs" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                         &#xA;         --) Create indexes&#xA;         CREATE CLUSTERED INDEX CLUST_IX ON [DataMart].[factExpense](SK_AY_DateID, SK_PolicyID) WITH ( DATA_COMPRESSION = PAGE)&#xA;          &#xA;         --Create FKs&#xA;         ALTER TABLE [DataMart].[factExpense] WITH NOCHECK ADD CONSTRAINT FK_factExpense_SK_CY_DateID FOREIGN KEY (SK_CY_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;         ALTER TABLE [DataMart].[factExpense] WITH NOCHECK ADD CONSTRAINT FK_factExpense_SK_AY_DateID FOREIGN KEY (SK_AY_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;         ALTER TABLE [DataMart].[factExpense] WITH NOCHECK ADD CONSTRAINT FK_factExpense_SK_PY_DateID FOREIGN KEY (SK_PY_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;         ALTER TABLE [DataMart].[factExpense] WITH NOCHECK ADD CONSTRAINT FK_factExpense_SK_RY_DateID FOREIGN KEY (SK_RY_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;         ALTER TABLE [DataMart].[factExpense] WITH NOCHECK ADD CONSTRAINT FK_factExpense_SK_VehicleID FOREIGN KEY (SK_VehicleID) REFERENCES [DataMart].[dimVehicle](SK_VehicleID)&#xA;         ALTER TABLE [DataMart].[factExpense] WITH NOCHECK ADD CONSTRAINT FK_factExpense_SK_PolicyID FOREIGN KEY (SK_PolicyID) REFERENCES [DataMart].[dimPolicy](SK_PolicyID)&#xA;         ALTER TABLE [DataMart].[factExpense] WITH NOCHECK ADD CONSTRAINT FK_factExpense_SK_ClaimID FOREIGN KEY (SK_ClaimID) REFERENCES [DataMart].[dimClaim](SK_ClaimID)&#xA;         ALTER TABLE [DataMart].[factExpense] WITH NOCHECK ADD CONSTRAINT FK_factExpense_SK_DriversID FOREIGN KEY (SK_DriversID) REFERENCES [DataMart].[dimDrivers](SK_DriversID)&#xA;         ALTER TABLE [DataMart].[factExpense] WITH NOCHECK ADD CONSTRAINT FK_factExpense_SK_RatedDriverID FOREIGN KEY (SK_RatedDriverID) REFERENCES [DataMart].[dimDriver](SK_DriverID)          &#xA;         ALTER TABLE [DataMart].[factExpense] WITH NOCHECK ADD CONSTRAINT FK_factExpense_SK_IncidentDriverID FOREIGN KEY (SK_IncidentDriverID) REFERENCES [DataMart].[dimDriver](SK_DriverID)&#xA;         ALTER TABLE [DataMart].[factExpense] WITH NOCHECK ADD CONSTRAINT FK_factExpense_SK_CoverageID FOREIGN KEY (SK_CoverageID) REFERENCES [DataMart].[dimCoverage](SK_CoverageID)&#xA;         ALTER TABLE [DataMart].[factExpense] WITH NOCHECK ADD CONSTRAINT FK_factExpense_SK_FeatureID FOREIGN KEY (SK_FeatureID) REFERENCES [DataMart].[dimFeature](SK_FeatureID)&#xA;         ALTER TABLE [DataMart].[factExpense] WITH NOCHECK ADD CONSTRAINT FK_factExpense_SK_ProducerID FOREIGN KEY (SK_ProducerID) REFERENCES [DataMart].[dimProducer](SK_ProducerID)&#xA;         ALTER TABLE [DataMart].[factExpense] WITH NOCHECK ADD CONSTRAINT FK_factExpense_SK_CarrierID FOREIGN KEY (SK_CarrierID) REFERENCES [DataMart].[dimCarrier](SK_CarrierID)&#xA;         ALTER TABLE [DataMart].[factExpense] WITH NOCHECK ADD CONSTRAINT FK_factExpense_SK_ProgramID FOREIGN KEY (SK_ProgramID) REFERENCES [DataMart].[dimProgram](SK_ProgramID)&#xA;         ALTER TABLE [DataMart].[factExpense] WITH NOCHECK ADD CONSTRAINT FK_factExpense_SK_ProgramGroupID FOREIGN KEY (SK_ProgramGroupID) REFERENCES [DataMart].[dimProgramGroup](SK_ProgramGroupID)&#xA;         ALTER TABLE [DataMart].[factExpense] WITH NOCHECK ADD CONSTRAINT FK_factExpense_SK_AgencyOfficeID FOREIGN KEY (SK_AgencyOfficeID) REFERENCES [DataMart].[dimAgencyOffice](SK_AgencyOfficeID)&#xA;                ALTER TABLE [DataMart].[factExpense] WITH NOCHECK ADD CONSTRAINT FK_factExpense_SK_Transaction_DateID FOREIGN KEY (SK_Transaction_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;         &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{17230B0E-40EA-4AF0-81F2-9C8E8D2ED3B5}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factReserve FKs" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Claim Indexes and FKs\SQL create factReserve FKs" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                         &#xA;         --) Create indexes&#xA;         CREATE CLUSTERED INDEX CLUST_IX ON [DataMart].[factReserve](SK_AY_DateID, SK_PolicyID) WITH ( DATA_COMPRESSION = PAGE)&#xA;          &#xA;         --Create FKs&#xA;         ALTER TABLE [DataMart].[factReserve] WITH NOCHECK ADD CONSTRAINT FK_factReserve_SK_CY_DateID FOREIGN KEY (SK_CY_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;         ALTER TABLE [DataMart].[factReserve] WITH NOCHECK ADD CONSTRAINT FK_factReserve_SK_AY_DateID FOREIGN KEY (SK_AY_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;         ALTER TABLE [DataMart].[factReserve] WITH NOCHECK ADD CONSTRAINT FK_factReserve_SK_PY_DateID FOREIGN KEY (SK_PY_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;         ALTER TABLE [DataMart].[factReserve] WITH NOCHECK ADD CONSTRAINT FK_factReserve_SK_RY_DateID FOREIGN KEY (SK_RY_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;         ALTER TABLE [DataMart].[factReserve] WITH NOCHECK ADD CONSTRAINT FK_factReserve_SK_VehicleID FOREIGN KEY (SK_VehicleID) REFERENCES [DataMart].[dimVehicle](SK_VehicleID)&#xA;         ALTER TABLE [DataMart].[factReserve] WITH NOCHECK ADD CONSTRAINT FK_factReserve_SK_PolicyID FOREIGN KEY (SK_PolicyID) REFERENCES [DataMart].[dimPolicy](SK_PolicyID)&#xA;         ALTER TABLE [DataMart].[factReserve] WITH NOCHECK ADD CONSTRAINT FK_factReserve_SK_ClaimID FOREIGN KEY (SK_ClaimID) REFERENCES [DataMart].[dimClaim](SK_ClaimID)&#xA;         ALTER TABLE [DataMart].[factReserve] WITH NOCHECK ADD CONSTRAINT FK_factReserve_SK_DriversID FOREIGN KEY (SK_DriversID) REFERENCES [DataMart].[dimDrivers](SK_DriversID)&#xA;         ALTER TABLE [DataMart].[factReserve] WITH NOCHECK ADD CONSTRAINT FK_factReserve_SK_RatedDriverID FOREIGN KEY (SK_RatedDriverID) REFERENCES [DataMart].[dimDriver](SK_DriverID)          &#xA;         ALTER TABLE [DataMart].[factReserve] WITH NOCHECK ADD CONSTRAINT FK_factReserve_SK_IncidentDriverID FOREIGN KEY (SK_IncidentDriverID) REFERENCES [DataMart].[dimDriver](SK_DriverID)&#xA;         ALTER TABLE [DataMart].[factReserve] WITH NOCHECK ADD CONSTRAINT FK_factReserve_SK_CoverageID FOREIGN KEY (SK_CoverageID) REFERENCES [DataMart].[dimCoverage](SK_CoverageID)&#xA;         ALTER TABLE [DataMart].[factReserve] WITH NOCHECK ADD CONSTRAINT FK_factReserve_SK_FeatureID FOREIGN KEY (SK_FeatureID) REFERENCES [DataMart].[dimFeature](SK_FeatureID)&#xA;         ALTER TABLE [DataMart].[factReserve] WITH NOCHECK ADD CONSTRAINT FK_factReserve_SK_ProducerID FOREIGN KEY (SK_ProducerID) REFERENCES [DataMart].[dimProducer](SK_ProducerID)&#xA;         ALTER TABLE [DataMart].[factReserve] WITH NOCHECK ADD CONSTRAINT FK_factReserve_SK_CarrierID FOREIGN KEY (SK_CarrierID) REFERENCES [DataMart].[dimCarrier](SK_CarrierID)&#xA;         ALTER TABLE [DataMart].[factReserve] WITH NOCHECK ADD CONSTRAINT FK_factReserve_SK_ProgramID FOREIGN KEY (SK_ProgramID) REFERENCES [DataMart].[dimProgram](SK_ProgramID)&#xA;         ALTER TABLE [DataMart].[factReserve] WITH NOCHECK ADD CONSTRAINT FK_factReserve_SK_ProgramGroupID FOREIGN KEY (SK_ProgramGroupID) REFERENCES [DataMart].[dimProgramGroup](SK_ProgramGroupID)&#xA;         ALTER TABLE [DataMart].[factReserve] WITH NOCHECK ADD CONSTRAINT FK_factReserve_SK_AgencyOfficeID FOREIGN KEY (SK_AgencyOfficeID) REFERENCES [DataMart].[dimAgencyOffice](SK_AgencyOfficeID)&#xA;                ALTER TABLE [DataMart].[factReserve] WITH NOCHECK ADD CONSTRAINT FK_factReserve_SK_Transaction_DateID FOREIGN KEY (SK_Transaction_DateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;                    &#xA;         &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{0007844E-5CD6-4BFA-8E6E-E94A6D58FDC8}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factClaimMonthly FKs" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Claim Indexes and FKs\SQL create factClaimMonthly FKs" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;           --) Create indexes&#xA;           CREATE CLUSTERED INDEX CLUST_IX ON [DataMart].[factClaimMonthly](SK_AY_MonthID, SK_PolicyID) WITH ( DATA_COMPRESSION = PAGE)&#xA;            &#xA;           --Create FKs&#xA;           ALTER TABLE [DataMart].[factClaimMonthly] WITH NOCHECK ADD CONSTRAINT FK_factClaimMonthly_SK_CY_MonthID FOREIGN KEY (SK_CY_MonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;           ALTER TABLE [DataMart].[factClaimMonthly] WITH NOCHECK ADD CONSTRAINT FK_factClaimMonthly_SK_AY_MonthID FOREIGN KEY (SK_AY_MonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;           ALTER TABLE [DataMart].[factClaimMonthly] WITH NOCHECK ADD CONSTRAINT FK_factClaimMonthly_SK_PY_MonthID FOREIGN KEY (SK_PY_MonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;           ALTER TABLE [DataMart].[factClaimMonthly] WITH NOCHECK ADD CONSTRAINT FK_factClaimMonthly_SK_RY_MonthID FOREIGN KEY (SK_RY_MonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;           ALTER TABLE [DataMart].[factClaimMonthly] WITH NOCHECK ADD CONSTRAINT FK_factClaimMonthly_SK_VehicleID FOREIGN KEY (SK_VehicleID) REFERENCES [DataMart].[dimVehicle](SK_VehicleID)&#xA;           ALTER TABLE [DataMart].[factClaimMonthly] WITH NOCHECK ADD CONSTRAINT FK_factClaimMonthly_SK_PolicyID FOREIGN KEY (SK_PolicyID) REFERENCES [DataMart].[dimPolicy](SK_PolicyID)&#xA;           ALTER TABLE [DataMart].[factClaimMonthly] WITH NOCHECK ADD CONSTRAINT FK_factClaimMonthly_SK_ClaimID FOREIGN KEY (SK_ClaimID) REFERENCES [DataMart].[dimClaim](SK_ClaimID)&#xA;           ALTER TABLE [DataMart].[factClaimMonthly] WITH NOCHECK ADD CONSTRAINT FK_factClaimMonthly_SK_DriversID FOREIGN KEY (SK_DriversID) REFERENCES [DataMart].[dimDrivers](SK_DriversID)&#xA;           ALTER TABLE [DataMart].[factClaimMonthly] WITH NOCHECK ADD CONSTRAINT FK_factClaimMonthly_SK_RatedDriverID FOREIGN KEY (SK_RatedDriverID) REFERENCES [DataMart].[dimDriver](SK_DriverID)          &#xA;           ALTER TABLE [DataMart].[factClaimMonthly] WITH NOCHECK ADD CONSTRAINT FK_factClaimMonthly_SK_IncidentDriverID FOREIGN KEY (SK_IncidentDriverID) REFERENCES [DataMart].[dimDriver](SK_DriverID)&#xA;           ALTER TABLE [DataMart].[factClaimMonthly] WITH NOCHECK ADD CONSTRAINT FK_factClaimMonthly_SK_ProducerID FOREIGN KEY (SK_ProducerID) REFERENCES [DataMart].[dimProducer](SK_ProducerID)&#xA;           ALTER TABLE [DataMart].[factClaimMonthly] WITH NOCHECK ADD CONSTRAINT FK_factClaimMonthly_SK_CarrierID FOREIGN KEY (SK_CarrierID) REFERENCES [DataMart].[dimCarrier](SK_CarrierID)&#xA;                    ALTER TABLE [DataMart].[factClaimMonthly] WITH NOCHECK ADD CONSTRAINT FK_factClaimMonthly_SK_ProgramID FOREIGN KEY (SK_ProgramID) REFERENCES [DataMart].[dimProgram](SK_ProgramID)                        &#xA;         &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{5E3F855A-850E-4B38-9ACC-5D3E858960DF}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factFeatureMonthly FKs" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Claim Indexes and FKs\SQL create factFeatureMonthly FKs" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;         --) Create indexes&#xA;         CREATE CLUSTERED INDEX CLUST_IX ON [DataMart].[factFeatureMonthly](SK_AY_MonthID, SK_PolicyID) WITH ( DATA_COMPRESSION = PAGE)&#xA;          &#xA;         --Create FKs&#xA;         ALTER TABLE [DataMart].[factFeatureMonthly] WITH NOCHECK ADD CONSTRAINT FK_factFeatureMonthly_SK_CY_MonthID FOREIGN KEY (SK_CY_MonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;         ALTER TABLE [DataMart].[factFeatureMonthly] WITH NOCHECK ADD CONSTRAINT FK_factFeatureMonthly_SK_AY_MonthID FOREIGN KEY (SK_AY_MonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;         ALTER TABLE [DataMart].[factFeatureMonthly] WITH NOCHECK ADD CONSTRAINT FK_factFeatureMonthly_SK_PY_MonthID FOREIGN KEY (SK_PY_MonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;         ALTER TABLE [DataMart].[factFeatureMonthly] WITH NOCHECK ADD CONSTRAINT FK_factFeatureMonthly_SK_RY_MonthID FOREIGN KEY (SK_RY_MonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;         ALTER TABLE [DataMart].[factFeatureMonthly] WITH NOCHECK ADD CONSTRAINT FK_factFeatureMonthly_SK_VehicleID FOREIGN KEY (SK_VehicleID) REFERENCES [DataMart].[dimVehicle](SK_VehicleID)&#xA;         ALTER TABLE [DataMart].[factFeatureMonthly] WITH NOCHECK ADD CONSTRAINT FK_factFeatureMonthly_SK_PolicyID FOREIGN KEY (SK_PolicyID) REFERENCES [DataMart].[dimPolicy](SK_PolicyID)&#xA;         ALTER TABLE [DataMart].[factFeatureMonthly] WITH NOCHECK ADD CONSTRAINT FK_factFeatureMonthly_SK_ClaimID FOREIGN KEY (SK_ClaimID) REFERENCES [DataMart].[dimClaim](SK_ClaimID)&#xA;         ALTER TABLE [DataMart].[factFeatureMonthly] WITH NOCHECK ADD CONSTRAINT FK_factFeatureMonthly_SK_DriversID FOREIGN KEY (SK_DriversID) REFERENCES [DataMart].[dimDrivers](SK_DriversID)&#xA;         ALTER TABLE [DataMart].[factFeatureMonthly] WITH NOCHECK ADD CONSTRAINT FK_factFeatureMonthly_SK_RatedDriverID FOREIGN KEY (SK_RatedDriverID) REFERENCES [DataMart].[dimDriver](SK_DriverID)&#xA;         ALTER TABLE [DataMart].[factFeatureMonthly] WITH NOCHECK ADD CONSTRAINT FK_factFeatureMonthly_SK_IncidentDriverID FOREIGN KEY (SK_IncidentDriverID) REFERENCES [DataMart].[dimDriver](SK_DriverID)&#xA;         ALTER TABLE [DataMart].[factFeatureMonthly] WITH NOCHECK ADD CONSTRAINT FK_factFeatureMonthly_SK_CoverageID FOREIGN KEY (SK_CoverageID) REFERENCES [DataMart].[dimCoverage](SK_CoverageID)&#xA;         ALTER TABLE [DataMart].[factFeatureMonthly] WITH NOCHECK ADD CONSTRAINT FK_factFeatureMonthly_SK_FeatureID FOREIGN KEY (SK_FeatureID) REFERENCES [DataMart].[dimFeature](SK_FeatureID)&#xA;         ALTER TABLE [DataMart].[factFeatureMonthly] WITH NOCHECK ADD CONSTRAINT FK_factFeatureMonthly_SK_ProducerID FOREIGN KEY (SK_ProducerID) REFERENCES [DataMart].[dimProducer](SK_ProducerID)&#xA;         ALTER TABLE [DataMart].[factFeatureMonthly] WITH NOCHECK ADD CONSTRAINT FK_factFeatureMonthly_SK_CarrierID FOREIGN KEY (SK_CarrierID) REFERENCES [DataMart].[dimCarrier](SK_CarrierID)&#xA;                ALTER TABLE [DataMart].[factFeatureMonthly] WITH NOCHECK ADD CONSTRAINT FK_factFeatureMonthly_SK_ProgramID FOREIGN KEY (SK_ProgramID) REFERENCES [DataMart].[dimProgram](SK_ProgramID)                    &#xA;                ALTER TABLE [DataMart].[factFeatureMonthly] WITH NOCHECK ADD CONSTRAINT FK_factFeatureMonthly_SK_Transaction_MonthID FOREIGN KEY (SK_Transaction_MonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;         &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{1C330B57-0352-475A-8F4C-565CD8ED988C}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factExpenseMonthly FKs" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Claim Indexes and FKs\SQL create factExpenseMonthly FKs" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;         --) Create indexes&#xA;         CREATE CLUSTERED INDEX CLUST_IX ON [DataMart].[factExpenseMonthly](SK_AY_MonthID, SK_PolicyID) WITH ( DATA_COMPRESSION = PAGE)&#xA;          &#xA;         --Create FKs&#xA;         ALTER TABLE [DataMart].[factExpenseMonthly] WITH NOCHECK ADD CONSTRAINT FK_factExpenseMonthly_SK_CY_MonthID FOREIGN KEY (SK_CY_MonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;         ALTER TABLE [DataMart].[factExpenseMonthly] WITH NOCHECK ADD CONSTRAINT FK_factExpenseMonthly_SK_AY_MonthID FOREIGN KEY (SK_AY_MonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;         ALTER TABLE [DataMart].[factExpenseMonthly] WITH NOCHECK ADD CONSTRAINT FK_factExpenseMonthly_SK_PY_MonthID FOREIGN KEY (SK_PY_MonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;         ALTER TABLE [DataMart].[factExpenseMonthly] WITH NOCHECK ADD CONSTRAINT FK_factExpenseMonthly_SK_RY_MonthID FOREIGN KEY (SK_RY_MonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;         ALTER TABLE [DataMart].[factExpenseMonthly] WITH NOCHECK ADD CONSTRAINT FK_factExpenseMonthly_SK_VehicleID FOREIGN KEY (SK_VehicleID) REFERENCES [DataMart].[dimVehicle](SK_VehicleID)&#xA;         ALTER TABLE [DataMart].[factExpenseMonthly] WITH NOCHECK ADD CONSTRAINT FK_factExpenseMonthly_SK_PolicyID FOREIGN KEY (SK_PolicyID) REFERENCES [DataMart].[dimPolicy](SK_PolicyID)&#xA;         ALTER TABLE [DataMart].[factExpenseMonthly] WITH NOCHECK ADD CONSTRAINT FK_factExpenseMonthly_SK_ClaimID FOREIGN KEY (SK_ClaimID) REFERENCES [DataMart].[dimClaim](SK_ClaimID)&#xA;         ALTER TABLE [DataMart].[factExpenseMonthly] WITH NOCHECK ADD CONSTRAINT FK_factExpenseMonthly_SK_DriversID FOREIGN KEY (SK_DriversID) REFERENCES [DataMart].[dimDrivers](SK_DriversID)&#xA;         ALTER TABLE [DataMart].[factExpenseMonthly] WITH NOCHECK ADD CONSTRAINT FK_factExpenseMonthly_SK_RatedDriverID FOREIGN KEY (SK_RatedDriverID) REFERENCES [DataMart].[dimDriver](SK_DriverID)&#xA;         ALTER TABLE [DataMart].[factExpenseMonthly] WITH NOCHECK ADD CONSTRAINT FK_factExpenseMonthly_SK_IncidentDriverID FOREIGN KEY (SK_IncidentDriverID) REFERENCES [DataMart].[dimDriver](SK_DriverID)&#xA;         ALTER TABLE [DataMart].[factExpenseMonthly] WITH NOCHECK ADD CONSTRAINT FK_factExpenseMonthly_SK_CoverageID FOREIGN KEY (SK_CoverageID) REFERENCES [DataMart].[dimCoverage](SK_CoverageID)&#xA;         ALTER TABLE [DataMart].[factExpenseMonthly] WITH NOCHECK ADD CONSTRAINT FK_factExpenseMonthly_SK_FeatureID FOREIGN KEY (SK_FeatureID) REFERENCES [DataMart].[dimFeature](SK_FeatureID)&#xA;         ALTER TABLE [DataMart].[factExpenseMonthly] WITH NOCHECK ADD CONSTRAINT FK_factExpenseMonthly_SK_ProducerID FOREIGN KEY (SK_ProducerID) REFERENCES [DataMart].[dimProducer](SK_ProducerID)&#xA;         ALTER TABLE [DataMart].[factExpenseMonthly] WITH NOCHECK ADD CONSTRAINT FK_factExpenseMonthly_SK_CarrierID FOREIGN KEY (SK_CarrierID) REFERENCES [DataMart].[dimCarrier](SK_CarrierID)&#xA;         ALTER TABLE [DataMart].[factExpenseMonthly] WITH NOCHECK ADD CONSTRAINT FK_factExpenseMonthly_SK_ProgramID FOREIGN KEY (SK_ProgramID) REFERENCES [DataMart].[dimProgram](SK_ProgramID)                    &#xA;         ALTER TABLE [DataMart].[factExpenseMonthly] WITH NOCHECK ADD CONSTRAINT FK_factExpenseMonthly_SK_ProgramGroupID FOREIGN KEY (SK_ProgramGroupID) REFERENCES [DataMart].[dimProgramGroup](SK_ProgramGroupID)                      &#xA;         ALTER TABLE [DataMart].[factExpenseMonthly] WITH NOCHECK ADD CONSTRAINT FK_factExpenseMonthly_SK_AgencyOfficeID FOREIGN KEY (SK_AgencyOfficeID) REFERENCES [DataMart].[dimAgencyOffice](SK_AgencyOfficeID)                      &#xA;                ALTER TABLE [DataMart].[factExpenseMonthly] WITH NOCHECK ADD CONSTRAINT FK_factExpenseMonthly_SK_Transaction_MonthID FOREIGN KEY (SK_Transaction_MonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;         &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{6C34789B-02F4-483B-88B2-4C18B7D9CAD2}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factReserveMonthly FKs" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Claim Indexes and FKs\SQL create factReserveMonthly FKs" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;         --) Create indexes&#xA;         CREATE CLUSTERED INDEX CLUST_IX ON [DataMart].[factReserveMonthly](SK_AY_MonthID, SK_PolicyID) WITH ( DATA_COMPRESSION = PAGE)&#xA;          &#xA;         --Create FKs&#xA;         ALTER TABLE [DataMart].[factReserveMonthly] WITH NOCHECK ADD CONSTRAINT FK_factReserveMonthly_SK_CY_MonthID FOREIGN KEY (SK_CY_MonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;         ALTER TABLE [DataMart].[factReserveMonthly] WITH NOCHECK ADD CONSTRAINT FK_factReserveMonthly_SK_AY_MonthID FOREIGN KEY (SK_AY_MonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;         ALTER TABLE [DataMart].[factReserveMonthly] WITH NOCHECK ADD CONSTRAINT FK_factReserveMonthly_SK_PY_MonthID FOREIGN KEY (SK_PY_MonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;         ALTER TABLE [DataMart].[factReserveMonthly] WITH NOCHECK ADD CONSTRAINT FK_factReserveMonthly_SK_RY_MonthID FOREIGN KEY (SK_RY_MonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;         ALTER TABLE [DataMart].[factReserveMonthly] WITH NOCHECK ADD CONSTRAINT FK_factReserveMonthly_SK_VehicleID FOREIGN KEY (SK_VehicleID) REFERENCES [DataMart].[dimVehicle](SK_VehicleID)&#xA;         ALTER TABLE [DataMart].[factReserveMonthly] WITH NOCHECK ADD CONSTRAINT FK_factReserveMonthly_SK_PolicyID FOREIGN KEY (SK_PolicyID) REFERENCES [DataMart].[dimPolicy](SK_PolicyID)&#xA;         ALTER TABLE [DataMart].[factReserveMonthly] WITH NOCHECK ADD CONSTRAINT FK_factReserveMonthly_SK_ClaimID FOREIGN KEY (SK_ClaimID) REFERENCES [DataMart].[dimClaim](SK_ClaimID)&#xA;         ALTER TABLE [DataMart].[factReserveMonthly] WITH NOCHECK ADD CONSTRAINT FK_factReserveMonthly_SK_DriversID FOREIGN KEY (SK_DriversID) REFERENCES [DataMart].[dimDrivers](SK_DriversID)&#xA;         ALTER TABLE [DataMart].[factReserveMonthly] WITH NOCHECK ADD CONSTRAINT FK_factReserveMonthly_SK_RatedDriverID FOREIGN KEY (SK_RatedDriverID) REFERENCES [DataMart].[dimDriver](SK_DriverID)&#xA;         ALTER TABLE [DataMart].[factReserveMonthly] WITH NOCHECK ADD CONSTRAINT FK_factReserveMonthly_SK_IncidentDriverID FOREIGN KEY (SK_IncidentDriverID) REFERENCES [DataMart].[dimDriver](SK_DriverID)&#xA;         ALTER TABLE [DataMart].[factReserveMonthly] WITH NOCHECK ADD CONSTRAINT FK_factReserveMonthly_SK_CoverageID FOREIGN KEY (SK_CoverageID) REFERENCES [DataMart].[dimCoverage](SK_CoverageID)&#xA;         ALTER TABLE [DataMart].[factReserveMonthly] WITH NOCHECK ADD CONSTRAINT FK_factReserveMonthly_SK_FeatureID FOREIGN KEY (SK_FeatureID) REFERENCES [DataMart].[dimFeature](SK_FeatureID)&#xA;         ALTER TABLE [DataMart].[factReserveMonthly] WITH NOCHECK ADD CONSTRAINT FK_factReserveMonthly_SK_ProducerID FOREIGN KEY (SK_ProducerID) REFERENCES [DataMart].[dimProducer](SK_ProducerID)&#xA;         ALTER TABLE [DataMart].[factReserveMonthly] WITH NOCHECK ADD CONSTRAINT FK_factReserveMonthly_SK_CarrierID FOREIGN KEY (SK_CarrierID) REFERENCES [DataMart].[dimCarrier](SK_CarrierID)&#xA;         ALTER TABLE [DataMart].[factReserveMonthly] WITH NOCHECK ADD CONSTRAINT FK_factReserveMonthly_SK_ProgramID FOREIGN KEY (SK_ProgramID) REFERENCES [DataMart].[dimProgram](SK_ProgramID)                    &#xA;         ALTER TABLE [DataMart].[factReserveMonthly] WITH NOCHECK ADD CONSTRAINT FK_factReserveMonthly_SK_ProgramGroupID FOREIGN KEY (SK_ProgramGroupID) REFERENCES [DataMart].[dimProgramGroup](SK_ProgramGroupID)                      &#xA;         ALTER TABLE [DataMart].[factReserveMonthly] WITH NOCHECK ADD CONSTRAINT FK_factReserveMonthly_SK_AgencyOfficeID FOREIGN KEY (SK_AgencyOfficeID) REFERENCES [DataMart].[dimAgencyOffice](SK_AgencyOfficeID)                      &#xA;                ALTER TABLE [DataMart].[factReserveMonthly] WITH NOCHECK ADD CONSTRAINT FK_factReserveMonthly_SK_Transaction_MonthID FOREIGN KEY (SK_Transaction_MonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;         &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
              </DTS:Executables>
            </DTS:Executable>
            <DTS:Executable DTS:CreationName="STOCK:SEQUENCE" DTS:DTSID="{9B718C9C-E17E-49A6-965C-89E8B5978146}" DTS:ExecutableType="STOCK:SEQUENCE" DTS:LocaleID="-1" DTS:ObjectName="SEQC Create Columnstore indexes for Daily Tables" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Columnstore indexes for Daily Tables">
              <DTS:Executables>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{370C3F17-375B-46CF-9624-3CFE9133489F}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create Columnstore index on factQuotePremium table" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Columnstore indexes for Daily Tables\SQL create Columnstore index on factQuotePremium table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                         &#xA;                                    CREATE NONCLUSTERED COLUMNSTORE INDEX [CS_IX_factQuotePremium] ON [DataMart].[factQuotePremium] (&#xA;                                     [SK_CoverageID]&#xA;                                     ,[SK_TransactionDateID]&#xA;                                     ,[SK_TransactionMonthID]&#xA;                                     ,[SK_PolicyId]&#xA;                                     ,[SK_VehicleID]&#xA;                                     ,[SK_CarrierID]&#xA;                                     ,[SK_ProgramId]&#xA;                                     ,[BK_QuoteID]&#xA;                                     ,[SK_RatedDriverID]&#xA;                                     ,[SK_ProducerID]&#xA;                                     ,[Premium]&#xA;                                     ,[DriverCount]&#xA;                                     ,[Completed]&#xA;                                     ,[PolicyCreated]&#xA;                                     )&#xA;                                     WITH (DATA_COMPRESSION = COLUMNSTORE_ARCHIVE)&#xA;                   &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{E0512F83-31D4-41AE-A601-1E03373B8DDB}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create Columnstore index on factPremiums table" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Columnstore indexes for Daily Tables\SQL create Columnstore index on factPremiums table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                   CREATE NONCLUSTERED COLUMNSTORE INDEX [CS_IX_factPremiums] ON [DataMart].[factPremiums] (&#xA;                    SK_CY_DateID&#xA;                    ,SK_AY_DateID&#xA;                    ,SK_PY_DateID&#xA;                    ,SK_RY_DateID&#xA;                    ,SK_VehicleID&#xA;                    ,SK_PolicyID&#xA;                    ,SK_RatedDriverID&#xA;                    ,SK_DriversID&#xA;                    ,SK_CoverageID&#xA;                    ,SK_ProducerID&#xA;                    ,SK_CarrierID&#xA;                    ,SK_ProgramID&#xA;                    ,SK_ProgramGroupID&#xA;                    ,SK_AgencyOfficeID&#xA;                    ,BK_EndorsementPeriodID&#xA;                    ,BK_PolicyTermID&#xA;                    ,BK_VehicleID&#xA;                    ,WP&#xA;                    ,WE&#xA;                    ,EP&#xA;                    ,EE&#xA;                    )&#xA;                    WITH (DATA_COMPRESSION = COLUMNSTORE_ARCHIVE)&#xA;&#xA;                   &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{CD7E536C-02BC-45D4-811F-946A5EE9208B}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create Columnstore index on factDriverCount table" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Columnstore indexes for Daily Tables\SQL create Columnstore index on factDriverCount table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                   CREATE NONCLUSTERED COLUMNSTORE INDEX [CS_IX_factDriverCount] ON [DataMart].[factDriverCount] (&#xA;                    SK_CY_DateID&#xA;                    ,SK_AY_DateID&#xA;                    ,SK_PY_DateID&#xA;                    ,SK_RY_DateID&#xA;                    ,SK_VehicleID&#xA;                    ,SK_PolicyID&#xA;                    ,SK_ProducerID&#xA;                    ,SK_CarrierID&#xA;                    ,SK_ProgramID&#xA;                    ,BK_DriverID&#xA;                    )&#xA;                    WITH (DATA_COMPRESSION = COLUMNSTORE_ARCHIVE)&#xA;&#xA;                   &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{7DD29326-F66B-4D0F-AEA9-991FD0CED24D}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create Columnstore index on factDIF table" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Columnstore indexes for Daily Tables\SQL create Columnstore index on factDIF table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                   CREATE NONCLUSTERED COLUMNSTORE INDEX [CS_IX_factDIF] ON [DataMart].[factDIF] (&#xA;                    SK_CY_DateID&#xA;                    ,SK_AY_DateID&#xA;                    ,SK_PY_DateID&#xA;                    ,SK_RY_DateID&#xA;                    ,SK_VehicleID&#xA;                    ,SK_PolicyID&#xA;                    ,SK_CoverageID&#xA;                    ,SK_ProducerID&#xA;                    ,SK_CarrierID&#xA;                    ,SK_ProgramID&#xA;                    ,BK_DriverID&#xA;                    )&#xA;                    WITH (DATA_COMPRESSION = COLUMNSTORE_ARCHIVE)&#xA;&#xA;                   &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{F44D4462-D045-4D31-AA6C-56006208D7ED}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create Columnstore index on factNewBusiness table" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Columnstore indexes for Daily Tables\SQL create Columnstore index on factNewBusiness table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                   CREATE NONCLUSTERED COLUMNSTORE INDEX [CS_IX_factNewBusiness] ON [DataMart].[factNewBusiness] (&#xA;                    SK_CY_DateID&#xA;                    ,SK_AY_DateID&#xA;                    ,SK_PY_DateID&#xA;                    ,SK_RY_DateID&#xA;                    ,SK_VehicleID&#xA;                    ,SK_PolicyID&#xA;                    ,SK_RatedDriverID&#xA;                    ,SK_DriversID&#xA;                    ,SK_ProducerID&#xA;                    ,SK_CarrierID&#xA;                    ,SK_ProgramID&#xA;                    ,SK_ProgramGroupID&#xA;                    ,BK_PolicyTermID&#xA;                    ,SK_AgencyOfficeID&#xA;                    ,NewBusiness&#xA;                    )&#xA;                    WITH (DATA_COMPRESSION = COLUMNSTORE_ARCHIVE)&#xA;&#xA;                   &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{546A619B-CA6E-46D3-A7E2-A210B220AC8F}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create Columnstore index on factRenewalsCarrioverActual table" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Columnstore indexes for Daily Tables\SQL create Columnstore index on factRenewalsCarrioverActual table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                   CREATE NONCLUSTERED COLUMNSTORE INDEX [CS_IX_factRenewalsCarrioverActual] ON [DataMart].[factRenewalsCarrioverActual] (&#xA;                    SK_CY_DateID&#xA;                    ,SK_AY_DateID&#xA;                    ,SK_PY_DateID&#xA;                    ,SK_RY_DateID&#xA;                    ,SK_PolicyID&#xA;                    ,SK_ProducerID&#xA;                    ,SK_CarrierID&#xA;                    ,SK_ProgramID&#xA;                    ,RenewalCarriover&#xA;                    ,BK_PolicyTermID&#xA;                    )&#xA;                    WITH (DATA_COMPRESSION = COLUMNSTORE_ARCHIVE)&#xA;                   &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{C76621E8-62B7-48A3-9DB0-4C22DCE73DF3}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create Columnstore index on factRenewals table" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Columnstore indexes for Daily Tables\SQL create Columnstore index on factRenewals table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                   CREATE NONCLUSTERED COLUMNSTORE INDEX [CS_IX_factRenewals] ON [DataMart].[factRenewals] (&#xA;                    SK_CY_DateID&#xA;                    ,SK_AY_DateID&#xA;                    ,SK_PY_DateID&#xA;                    ,SK_RY_DateID&#xA;                    ,SK_PolicyID&#xA;                    ,SK_ProducerID&#xA;                    ,SK_CarrierID&#xA;                    ,SK_ProgramID&#xA;                    ,BK_PolicyTermID&#xA;                    ,RenewalDue&#xA;                    ,DNR&#xA;                    )&#xA;                    WITH (DATA_COMPRESSION = COLUMNSTORE_ARCHIVE)&#xA;&#xA;                   &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{72F7542E-8C1A-4FA5-AC4B-CA872AC77A3F}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create Columnstore index on factRenewalsActual table" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Columnstore indexes for Daily Tables\SQL create Columnstore index on factRenewalsActual table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                   CREATE NONCLUSTERED COLUMNSTORE INDEX [CS_IX_factRenewalsActual] ON [DataMart].[factRenewalsActual] (&#xA;                    SK_CY_DateID&#xA;                    ,SK_AY_DateID&#xA;                    ,SK_PY_DateID&#xA;                    ,SK_RY_DateID&#xA;                    ,SK_PolicyID&#xA;                    ,SK_ProducerID&#xA;                    ,SK_CarrierID&#xA;                    ,SK_ProgramID&#xA;                    ,Renewal&#xA;                    ,BK_PolicyTermID&#xA;                    )&#xA;                    WITH (DATA_COMPRESSION = COLUMNSTORE_ARCHIVE)&#xA;&#xA;                   &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
              </DTS:Executables>
              <DTS:PropertyExpression DTS:Name="Disable">!(@[User::config_Process_DailyDataMart] &amp;&amp; @[User::config_CreateColumnstoreIndexes])</DTS:PropertyExpression>
            </DTS:Executable>
            <DTS:Executable DTS:CreationName="STOCK:SEQUENCE" DTS:DTSID="{1E2F9711-DBCC-400F-876F-0ED1B1EC722E}" DTS:ExecutableType="STOCK:SEQUENCE" DTS:LocaleID="-1" DTS:ObjectName="SEQC Create Columnstore indexes for Monthly Ratemaking Tables" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Columnstore indexes for Monthly Ratemaking Tables">
              <DTS:Executables>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{223F8839-81FD-4572-BE53-8A51537E45A4}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create Columnstore index on factPremiumsMonthly table" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Columnstore indexes for Monthly Ratemaking Tables\SQL create Columnstore index on factPremiumsMonthly table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                   CREATE NONCLUSTERED COLUMNSTORE INDEX [CS_IX_factPremiumsMonthly] ON [DataMart].[factPremiumsMonthly] (&#xA;                    SK_CY_MonthID&#xA;                    ,SK_AY_MonthID&#xA;                    ,SK_PY_MonthID&#xA;                    ,SK_RY_MonthID&#xA;                    ,SK_VehicleID&#xA;                    ,SK_PolicyID&#xA;                    ,SK_RatedDriverID&#xA;                    ,SK_DriversID&#xA;                    ,SK_CoverageID&#xA;                    ,SK_ProducerID&#xA;                    ,SK_CarrierID&#xA;                    ,SK_ProgramID&#xA;                    ,SK_ProgramGroupID&#xA;                    ,SK_AgencyOfficeID&#xA;                    ,BK_EndorsementPeriodID&#xA;                    ,BK_PolicyTermID&#xA;                    ,BK_VehicleID&#xA;                    ,WP&#xA;                    ,WE&#xA;                    ,EP&#xA;                    ,EE&#xA;                    ,EoM_InforceFlag&#xA;                    )&#xA;                    WITH (DATA_COMPRESSION = COLUMNSTORE_ARCHIVE)&#xA;                   &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{6D86AB37-8D03-4E2C-92CC-77E412375789}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create Columnstore index on factDriverCountMonthly table" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Columnstore indexes for Monthly Ratemaking Tables\SQL create Columnstore index on factDriverCountMonthly table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                   CREATE NONCLUSTERED COLUMNSTORE INDEX [CS_IX_factDriverCountMonthly] ON [DataMart].[factDriverCountMonthly] (&#xA;                    SK_CY_MonthID&#xA;                    ,SK_AY_MonthID&#xA;                    ,SK_PY_MonthID&#xA;                    ,SK_RY_MonthID&#xA;                    ,SK_VehicleID&#xA;                    ,SK_PolicyID&#xA;                    ,SK_ProducerID&#xA;                    ,SK_CarrierID&#xA;                    ,SK_ProgramID&#xA;                    ,BK_DriverID&#xA;                    )&#xA;                    WITH (DATA_COMPRESSION = COLUMNSTORE_ARCHIVE)&#xA;&#xA;                   &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{6DC114E7-34D7-4DED-8564-837650A96B70}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create Columnstore index on factPifVifMonthly table" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Columnstore indexes for Monthly Ratemaking Tables\SQL create Columnstore index on factPifVifMonthly table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                   CREATE NONCLUSTERED COLUMNSTORE INDEX [CS_IX_factPifVifMonthly] ON [DataMart].[factPifVifMonthly] (&#xA;                    SK_CY_MonthID&#xA;                    ,SK_AY_MonthID&#xA;                    ,SK_RY_MonthID&#xA;                    ,SK_VehicleID&#xA;                    ,SK_PolicyID&#xA;                    ,SK_RatedDriverID&#xA;                    ,SK_CoverageID&#xA;                    ,SK_ProducerID&#xA;                    ,SK_CarrierID&#xA;                    ,SK_ProgramID&#xA;                    ,BK_PolicyTermID&#xA;                    ,BK_VehicleID&#xA;                    ,BK_DriverID&#xA;                    )&#xA;                    WITH (DATA_COMPRESSION = COLUMNSTORE_ARCHIVE)&#xA;&#xA;                   &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{98209436-4BC1-42CC-9E79-21179DF7BFED}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create Columnstore index on factNewBusinessMonthly table" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Columnstore indexes for Monthly Ratemaking Tables\SQL create Columnstore index on factNewBusinessMonthly table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                   CREATE NONCLUSTERED COLUMNSTORE INDEX [CS_IX_factNewBusinessMonthly] ON [DataMart].[factNewBusinessMonthly] (&#xA;                    SK_CY_MonthID&#xA;                    ,SK_AY_MonthID&#xA;                    ,SK_PY_MonthID&#xA;                    ,SK_RY_MonthID&#xA;                    ,SK_VehicleID&#xA;                    ,SK_PolicyID&#xA;                    ,SK_RatedDriverID&#xA;                    ,SK_DriversID&#xA;                    ,SK_ProducerID&#xA;                    ,SK_CarrierID&#xA;                    ,SK_ProgramID&#xA;                    ,SK_ProgramGroupID&#xA;                    ,BK_PolicyTermID&#xA;                    ,SK_AgencyOfficeID&#xA;                    ,NewBusiness&#xA;                    )&#xA;                    WITH (DATA_COMPRESSION = COLUMNSTORE_ARCHIVE)&#xA;&#xA;                   &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{3446335C-2878-41D6-844D-42F9D0F45FC5}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create Columnstore index on factRenewalsCarrioverActualMonthly table" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Columnstore indexes for Monthly Ratemaking Tables\SQL create Columnstore index on factRenewalsCarrioverActualMonthly table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                   CREATE NONCLUSTERED COLUMNSTORE INDEX [CS_IX_factRenewalsCarrioverActualMonthly] ON [DataMart].[factRenewalsCarrioverActualMonthly] (&#xA;                    SK_CY_MonthID&#xA;                    ,SK_AY_MonthID&#xA;                    ,SK_PY_MonthID&#xA;                    ,SK_RY_MonthID&#xA;                    ,SK_PolicyID&#xA;                    ,SK_ProducerID&#xA;                    ,SK_CarrierID&#xA;                    ,SK_ProgramID&#xA;                    ,CarrioverRenewal&#xA;                    ,BK_PolicyTermID&#xA;                    )&#xA;                    WITH (DATA_COMPRESSION = COLUMNSTORE_ARCHIVE)&#xA;&#xA;                   &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{6211CA0D-1950-4473-AA2D-C4B1DB29EA5C}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create Columnstore index on factRenewalsActualMonthly table" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Columnstore indexes for Monthly Ratemaking Tables\SQL create Columnstore index on factRenewalsActualMonthly table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                   CREATE NONCLUSTERED COLUMNSTORE INDEX [CS_IX_factRenewalsActualMonthly] ON [DataMart].[factRenewalsActualMonthly] (&#xA;                    SK_CY_MonthID&#xA;                    ,SK_AY_MonthID&#xA;                    ,SK_PY_MonthID&#xA;                    ,SK_RY_MonthID&#xA;                    ,SK_PolicyID&#xA;                    ,SK_ProducerID&#xA;                    ,SK_CarrierID&#xA;                    ,SK_ProgramID&#xA;                    ,Renewal&#xA;                    ,BK_PolicyTermID&#xA;                    )&#xA;                    WITH (DATA_COMPRESSION = COLUMNSTORE_ARCHIVE)&#xA;&#xA;                   &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{8981F956-2DA5-45BD-8E41-AF95C41242E0}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create Columnstore index on factRenewalsMonthly table" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Columnstore indexes for Monthly Ratemaking Tables\SQL create Columnstore index on factRenewalsMonthly table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                   CREATE NONCLUSTERED COLUMNSTORE INDEX [CS_IX_factRenewalsMonthly] ON [DataMart].[factRenewalsMonthly] (&#xA;                    SK_CY_MonthID&#xA;                    ,SK_AY_MonthID&#xA;                    ,SK_PY_MonthID&#xA;                    ,SK_RY_MonthID&#xA;                    ,SK_PolicyID&#xA;                    ,SK_ProducerID&#xA;                    ,SK_CarrierID&#xA;                    ,SK_ProgramID&#xA;                    ,BK_PolicyTermID&#xA;                    ,RenewalDue&#xA;                    ,DNR&#xA;                    )&#xA;                    WITH (DATA_COMPRESSION = COLUMNSTORE_ARCHIVE)&#xA;&#xA;                   &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
              </DTS:Executables>
              <DTS:PropertyExpression DTS:Name="Disable">!(@[User::config_Process_MonthlyDataMart] &amp;&amp; @[User::config_CreateColumnstoreIndexes])</DTS:PropertyExpression>
            </DTS:Executable>
            <DTS:Executable DTS:CreationName="STOCK:SEQUENCE" DTS:DTSID="{24F59C92-BCB6-47A9-895C-31D0594A0AD4}" DTS:ExecutableType="STOCK:SEQUENCE" DTS:LocaleID="-1" DTS:ObjectName="SEQC Create Columnstore indexes for Transactional Tables" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Columnstore indexes for Transactional Tables">
              <DTS:Executables>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{089F77EF-30DD-4B78-8968-34D90414C6FE}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create Columnstore index on factEndorsementTransaction table" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Columnstore indexes for Transactional Tables\SQL create Columnstore index on factEndorsementTransaction table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                   CREATE NONCLUSTERED COLUMNSTORE INDEX [CS_IX_factEndorsementTransaction] ON [DataMart].[factEndorsementTransaction] (&#xA;                    SK_EndorsementTransactionDateID&#xA;                    ,SK_EndorsementTransactionMonthID&#xA;                    ,SK_VehicleID&#xA;                    ,SK_PolicyID&#xA;                    ,SK_RatedDriverID&#xA;                    ,SK_DriversID&#xA;                    ,SK_CoverageID&#xA;                    ,SK_EndorsementID&#xA;                    ,SK_ProducerID&#xA;                    ,BK_TriggeringEndorsementID&#xA;                    ,SK_CarrierID&#xA;                    ,SK_ProgramID&#xA;                    )&#xA;                    WITH (DATA_COMPRESSION = COLUMNSTORE_ARCHIVE)&#xA;                   &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{54F1A655-87A4-4F32-8211-330C185D154D}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create Columnstore index on factPIFVIFDIFTransaction table" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Columnstore indexes for Transactional Tables\SQL create Columnstore index on factPIFVIFDIFTransaction table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                   CREATE NONCLUSTERED COLUMNSTORE INDEX [CS_IX_factPIFVIFDIFTransaction] ON [DataMart].[factPIFVIFDIFTransaction] (&#xA;                    SK_TransactionDateID&#xA;                    ,SK_VehicleID&#xA;                    ,SK_PolicyID&#xA;                    ,SK_RatedDriverID&#xA;                    ,SK_CoverageID&#xA;                    ,SK_EndorsementID&#xA;                    ,SK_ProducerID&#xA;                    ,SK_CarrierID&#xA;                    ,BK_PolicyID&#xA;                    ,BK_VehicleID&#xA;                    ,BK_DriverID&#xA;                    ,NoValidDriver&#xA;                    ,SK_ProgramID&#xA;                    ,SK_ProgramGroupID&#xA;                    ,SK_AgencyOfficeID&#xA;                    )&#xA;                    WITH (DATA_COMPRESSION = COLUMNSTORE_ARCHIVE)&#xA;                   &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{970C0B6F-831D-4354-9CDD-6F5978E13C26}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create Columnstore index on factPremiumsTransactional table" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Columnstore indexes for Transactional Tables\SQL create Columnstore index on factPremiumsTransactional table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                         &#xA;                   CREATE NONCLUSTERED COLUMNSTORE INDEX [CS_IX_factPremiumsTransactional] ON [DataMart].[factPremiumsTransactional]&#xA;                   (&#xA;                    [SK_TransactionDateID],&#xA;                    [SK_VehicleID],&#xA;                    [SK_PolicyID],&#xA;                    [SK_RatedDriverID],&#xA;                    [SK_DriversID],&#xA;                    [SK_CoverageID],&#xA;                    [SK_EndorsementID],&#xA;                    [SK_ProducerID],&#xA;                    [BK_TriggeringEndorsementID],&#xA;                    [SK_CarrierID],&#xA;                    [SK_ProgramID],&#xA;                    [SK_ProgramGroupID],&#xA;                    [BK_PolicyTermID],&#xA;                    [SK_AgencyOfficeID],&#xA;                    [EP],&#xA;                    [EE],&#xA;                    [WP],&#xA;                    [WE]&#xA;                   )WITH (DATA_COMPRESSION=COLUMNSTORE_ARCHIVE)&#xA;                   &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{E797797A-3FDC-40E8-8D8C-5ECD3AC6F6DC}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create Columnstore index on factInforcePremiumTransactional table" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Columnstore indexes for Transactional Tables\SQL create Columnstore index on factInforcePremiumTransactional table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                         &#xA;                   CREATE NONCLUSTERED COLUMNSTORE INDEX [CS_IX_factInforcePremiumTransactional] ON [DataMart].[factInforcePremiumTransactional]&#xA;                   (&#xA;                                     [SK_TransactionDateID]&#xA;                                     ,[IntervalStartDate]&#xA;                                     ,[IntervalEndDate]&#xA;                                     ,[SK_VehicleID]&#xA;                                     ,[SK_PolicyID]&#xA;                                     ,[SK_RatedDriverID]&#xA;                                     ,[SK_DriversID]&#xA;                                     ,[SK_CoverageID]&#xA;                                     ,[SK_EndorsementID]&#xA;                                     ,[SK_ProducerID]&#xA;                                     ,[BK_TriggeringEndorsementID]&#xA;                                     ,[SK_CarrierID]&#xA;                                     ,[SK_ProgramID]&#xA;                                     ,[SK_ProgramGroupID]&#xA;                                     ,[BK_PolicyTermID]&#xA;                                     ,[SK_AgencyOfficeID]&#xA;                                     ,[EP_forPeriod]&#xA;                                     ,[EP_DailyRunRate]&#xA;                                     ,[EE_forPeriod]&#xA;                                     ,[WP]&#xA;                                     ,[WE]&#xA;                   )WITH (DATA_COMPRESSION=COLUMNSTORE_ARCHIVE)&#xA;                   &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{20B077B3-6152-45F0-875F-46C03708AC3F}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create Columnstore index on factPremiumChangingEndorsement table" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Columnstore indexes for Transactional Tables\SQL create Columnstore index on factPremiumChangingEndorsement table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                   CREATE NONCLUSTERED COLUMNSTORE INDEX [CS_IX_factPremiumChangingEndorsement] ON [DataMart].[factPremiumChangingEndorsement] (&#xA;                    SK_TransactionDateID&#xA;                    ,BK_TriggeringEndorsementID&#xA;                    ,SK_CarrierID&#xA;                    ,EndorsementBusinessTypeID&#xA;                    )&#xA;                    WITH (DATA_COMPRESSION = COLUMNSTORE_ARCHIVE)&#xA;                   &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{882E47BB-8035-4AE0-93E0-C5994EA67231}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create Columnstore index on factPremiumsTransactionalMonthly table" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Columnstore indexes for Transactional Tables\SQL create Columnstore index on factPremiumsTransactionalMonthly table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                   CREATE NONCLUSTERED COLUMNSTORE INDEX [CS_IX_factPremiumsTransactionalMonthly] ON [DataMart].[factPremiumsTransactionalMonthly] (&#xA;                    SK_TransactionMonthID&#xA;                    ,SK_VehicleID&#xA;                    ,SK_PolicyID&#xA;                    ,SK_RatedDriverID&#xA;                    ,SK_DriversID&#xA;                    ,SK_CoverageID&#xA;                    ,SK_EndorsementID&#xA;                    ,SK_ProducerID&#xA;                    ,BK_TriggeringEndorsementID&#xA;                    ,SK_CarrierID&#xA;                    ,SK_ProgramID&#xA;                    ,BK_PolicyTermID&#xA;                    ,SK_AgencyOfficeID&#xA;                    ,EP&#xA;                    ,EE&#xA;                    ,WP&#xA;                    ,WE&#xA;                    )&#xA;                    WITH (DATA_COMPRESSION = COLUMNSTORE_ARCHIVE)&#xA;                   &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{A0FC8843-557A-4DE5-A3EC-808B6343FEB3}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create Columnstore index on factPIFVIFDIFTransactionMonthly table" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Columnstore indexes for Transactional Tables\SQL create Columnstore index on factPIFVIFDIFTransactionMonthly table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                   CREATE NONCLUSTERED COLUMNSTORE INDEX [CS_IX_factPIFVIFDIFTransactionMonthly] ON [DataMart].[factPIFVIFDIFTransactionMonthly] (&#xA;                    SK_TransactionMonthID&#xA;                    ,SK_VehicleID&#xA;                    ,SK_PolicyID&#xA;                    ,SK_RatedDriverID&#xA;                    ,SK_CoverageID&#xA;                    ,SK_EndorsementID&#xA;                    ,SK_ProducerID&#xA;                    ,SK_CarrierID&#xA;                    ,BK_PolicyID&#xA;                    ,BK_VehicleID&#xA;                    ,BK_DriverID&#xA;                    ,NoValidDriver&#xA;                    ,SK_ProgramID&#xA;                    ,[SK_ProgramGroupID]&#xA;                    ,[SK_AgencyOfficeID]&#xA;                    )&#xA;                    WITH (DATA_COMPRESSION = COLUMNSTORE_ARCHIVE)&#xA;                   &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{F999245F-17A8-44A9-8513-68F52DC7071A}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create Columnstore index on factInforcePremiumTransactionalMonthly table" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Columnstore indexes for Transactional Tables\SQL create Columnstore index on factInforcePremiumTransactionalMonthly table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                   CREATE NONCLUSTERED COLUMNSTORE INDEX [CS_IX_factInforcePremiumTransactionalMonthly] ON [DataMart].[factInforcePremiumTransactionalMonthly] (&#xA;                    SK_TransactionMonthID&#xA;                    ,SK_VehicleID&#xA;                    ,SK_PolicyID&#xA;                    ,SK_RatedDriverID&#xA;                    ,SK_DriversID&#xA;                    ,SK_CoverageID&#xA;                    ,SK_ProducerID&#xA;                    ,SK_CarrierID&#xA;                    ,SK_ProgramID&#xA;                    ,InforceWP                     &#xA;                    )&#xA;                    WITH (DATA_COMPRESSION = COLUMNSTORE_ARCHIVE)&#xA;                   &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{3B0B5A01-9E32-4A76-A7FB-323F0CC46DD1}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create Columnstore index on factSoFarPremiumTransactionalMonthly table" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Columnstore indexes for Transactional Tables\SQL create Columnstore index on factSoFarPremiumTransactionalMonthly table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                   CREATE NONCLUSTERED COLUMNSTORE INDEX [CS_IX_factSoFarPremiumTransactionalMonthly] ON [DataMart].[factSoFarPremiumTransactionalMonthly] (&#xA;                    SK_TransactionMonthID&#xA;                    ,SK_VehicleID&#xA;                    ,SK_PolicyID&#xA;                    ,SK_RatedDriverID&#xA;                    ,SK_DriversID&#xA;                    ,SK_CoverageID&#xA;                    ,SK_ProducerID&#xA;                    ,SK_CarrierID&#xA;                    ,SK_ProgramID&#xA;                    ,SoFarWP&#xA;                    ,SoFarEP&#xA;                    )&#xA;                    WITH (DATA_COMPRESSION = COLUMNSTORE_ARCHIVE)&#xA;                   &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{1354EC4A-E26C-456D-8531-AFD671243FEA}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create Columnstore index on factPaymentTransaction table" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Columnstore indexes for Transactional Tables\SQL create Columnstore index on factPaymentTransaction table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                   CREATE NONCLUSTERED COLUMNSTORE INDEX [CS_IX_factPaymentTransaction] ON [DataMart].[factPaymentTransaction] (&#xA;                    SK_TransactionDateID&#xA;                    ,SK_TransactionMonthID&#xA;                    ,SK_PaymentTransactionID&#xA;                    ,SK_PolicyID&#xA;                    ,SK_EndorsementID&#xA;                    ,SK_ProducerID&#xA;                    ,SK_CarrierID&#xA;                    ,SK_ProgramID&#xA;                    ,BK_PaymentTransactionID&#xA;                    ,Amount&#xA;                    )&#xA;                    WITH (DATA_COMPRESSION = COLUMNSTORE_ARCHIVE)&#xA;                   &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{0BB0359E-3E0A-4B07-AF9A-18092D49F0D5}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create Columnstore index on factCashAppliedTransaction table" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Columnstore indexes for Transactional Tables\SQL create Columnstore index on factCashAppliedTransaction table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                   CREATE NONCLUSTERED COLUMNSTORE INDEX [CS_IX_factCashAppliedTransaction] ON [DataMart].[factCashAppliedTransaction] (&#xA;                    SK_AppliedDateID&#xA;                    ,SK_AppliedMonthID&#xA;                    ,SK_PolicyID&#xA;                    ,SK_EndorsementID&#xA;                    ,SK_ProducerID&#xA;                    ,SK_CarrierID&#xA;                    ,SK_ProgramID&#xA;                    ,Premium&#xA;                    ,UndefinedFee&#xA;                    ,UserDefinedFee&#xA;                    ,InstallmentFee&#xA;                    ,EndorsementFee&#xA;                    ,ShortPaymentFee&#xA;                    ,CancellationFee&#xA;                    ,ReinstatementFee&#xA;                    ,SR22ReinstatementFee&#xA;                    ,SR22Fee&#xA;                    ,ReturnItemFee&#xA;                    ,FraudFee&#xA;                    ,PolicyFee&#xA;                    ,InstallmentEFTFee&#xA;                    ,ReinstatementGoodDriverFee&#xA;                    ,LateFee&#xA;                    ,MVRFee&#xA;                    ,ReturnMailFee&#xA;                    ,RegistrationFee&#xA;                    ,RewriteFee&#xA;                    ,InstallmentRCCPFee&#xA;                    ,MotorVehicleLawEnforcementFee&#xA;                    ,PolicyFeeGoodDriver&#xA;                    ,NSDFee&#xA;                    )&#xA;                    WITH (DATA_COMPRESSION = COLUMNSTORE_ARCHIVE)&#xA;                   &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
              </DTS:Executables>
              <DTS:PropertyExpression DTS:Name="Disable">!(@[User::config_Process_TransactionalDataMart] &amp;&amp; @[User::config_CreateColumnstoreIndexes])</DTS:PropertyExpression>
            </DTS:Executable>
            <DTS:Executable DTS:CreationName="STOCK:SEQUENCE" DTS:DTSID="{31D2A6AC-D702-4172-89B1-15F48D6DFA69}" DTS:ExecutableType="STOCK:SEQUENCE" DTS:LocaleID="-1" DTS:ObjectName="SEQC Create Columnstore indexes for Claim Tables" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Columnstore indexes for Claim Tables">
              <DTS:Executables>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{33CE27A7-AC82-451B-B91B-12762EC4A2E8}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create Columnstore index on factFeature table" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Columnstore indexes for Claim Tables\SQL create Columnstore index on factFeature table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                   CREATE NONCLUSTERED COLUMNSTORE INDEX [CS_IX_factFeature] ON [DataMart].[factFeature] (&#xA;                    SK_CY_DateID&#xA;                    ,SK_AY_DateID&#xA;                    ,SK_PY_DateID&#xA;                    ,SK_RY_DateID&#xA;                    ,SK_VehicleID&#xA;                    ,SK_PolicyID&#xA;                    ,SK_RatedDriverID&#xA;                    ,SK_DriversID&#xA;                    ,SK_CoverageID&#xA;                    ,SK_ClaimID&#xA;                    ,SK_FeatureID&#xA;                    ,SK_IncidentDriverID&#xA;                    ,SK_ProducerID&#xA;                    ,SK_CarrierID&#xA;                    ,SK_ProgramID&#xA;                                      ,SK_Transaction_DateID&#xA;                    )&#xA;                    WITH (DATA_COMPRESSION = COLUMNSTORE_ARCHIVE)&#xA;&#xA;                   &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{87FD4756-78E3-4BC5-8E7F-958D3A8BBCC2}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create Columnstore index on factClaim table" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Columnstore indexes for Claim Tables\SQL create Columnstore index on factClaim table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                   CREATE NONCLUSTERED COLUMNSTORE INDEX [CS_IX_factClaim] ON [DataMart].[factClaim] (&#xA;                    SK_CY_DateID&#xA;                    ,SK_AY_DateID&#xA;                    ,SK_PY_DateID&#xA;                    ,SK_RY_DateID&#xA;                    ,SK_VehicleID&#xA;                    ,SK_PolicyID&#xA;                    ,SK_RatedDriverID&#xA;                    ,SK_DriversID&#xA;                    ,SK_ClaimID&#xA;                    ,SK_IncidentDriverID&#xA;                    ,SK_ProducerID&#xA;                    ,SK_CarrierID&#xA;                    ,SK_ProgramID&#xA;                    ,BK_ClaimID&#xA;                    ,BK_ClaimNumber&#xA;                    ,BK_PolicyTermID&#xA;                    ,BK_VehicleID&#xA;                                      ,SK_Transaction_DateID&#xA;                    )&#xA;                    WITH (DATA_COMPRESSION = COLUMNSTORE_ARCHIVE)&#xA;&#xA;                   &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{BE79108C-A89A-44CE-9B47-2178312B0667}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create Columnstore index on factExpense table" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Columnstore indexes for Claim Tables\SQL create Columnstore index on factExpense table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                   CREATE NONCLUSTERED COLUMNSTORE INDEX [CS_IX_factExpense] ON [DataMart].[factExpense] (&#xA;                    SK_CY_DateID&#xA;                    ,SK_AY_DateID&#xA;                    ,SK_PY_DateID&#xA;                    ,SK_RY_DateID&#xA;                    ,SK_VehicleID&#xA;                    ,SK_PolicyID&#xA;                    ,SK_RatedDriverID&#xA;                    ,SK_DriversID&#xA;                    ,SK_CoverageID&#xA;                    ,SK_ClaimID&#xA;                    ,SK_FeatureID&#xA;                    ,SK_IncidentDriverID&#xA;                    ,SK_ProducerID&#xA;                    ,SK_CarrierID&#xA;                    ,SK_ProgramID&#xA;                    ,SK_ProgramGroupID&#xA;                    ,SK_AgencyOfficeID&#xA;                    ,LossPaid&#xA;                    ,ExpensePaid&#xA;                    ,LegalExpensePaid&#xA;                    ,SubroRecovered&#xA;                    ,SalvageRecovered&#xA;                                      ,SK_Transaction_DateID&#xA;                    )&#xA;                    WITH (DATA_COMPRESSION = COLUMNSTORE_ARCHIVE)&#xA;&#xA;                   &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{6AC941DC-F149-4DF0-A02A-E76DDB8F6C0C}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create Columnstore index on factReserve table" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Columnstore indexes for Claim Tables\SQL create Columnstore index on factReserve table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                   CREATE NONCLUSTERED COLUMNSTORE INDEX [CS_IX_factReserve] ON [DataMart].[factReserve] (&#xA;                    SK_CY_DateID&#xA;                    ,SK_AY_DateID&#xA;                    ,SK_PY_DateID&#xA;                    ,SK_RY_DateID&#xA;                    ,SK_VehicleID&#xA;                    ,SK_PolicyID&#xA;                    ,SK_RatedDriverID&#xA;                    ,SK_DriversID&#xA;                    ,SK_CoverageID&#xA;                    ,SK_ClaimID&#xA;                    ,SK_FeatureID&#xA;                    ,SK_IncidentDriverID&#xA;                    ,SK_ProducerID&#xA;                    ,SK_CarrierID&#xA;                    ,SK_ProgramID&#xA;                    ,SK_ProgramGroupID&#xA;                    ,SK_AgencyOfficeID&#xA;                    ,LossReserve&#xA;                    ,ExpenseReserve&#xA;                    ,LegalExpenseReserve&#xA;                    ,RecoveryReserve&#xA;                                      ,SK_Transaction_DateID&#xA;                    )&#xA;                    WITH (DATA_COMPRESSION = COLUMNSTORE_ARCHIVE)&#xA;                   &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{57AA5676-223D-4ECB-AAD3-F5572A8B4051}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create Columnstore index on factExpenseMonthly table" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Columnstore indexes for Claim Tables\SQL create Columnstore index on factExpenseMonthly table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                   CREATE NONCLUSTERED COLUMNSTORE INDEX [CS_IX_factExpenseMonthly] ON [DataMart].[factExpenseMonthly] (&#xA;                    SK_CY_MonthID&#xA;                    ,SK_AY_MonthID&#xA;                    ,SK_PY_MonthID&#xA;                    ,SK_RY_MonthID&#xA;                    ,SK_VehicleID&#xA;                    ,SK_PolicyID&#xA;                    ,SK_RatedDriverID&#xA;                    ,SK_DriversID&#xA;                    ,SK_CoverageID&#xA;                    ,SK_ClaimID&#xA;                    ,SK_FeatureID&#xA;                    ,SK_IncidentDriverID&#xA;                    ,SK_ProducerID&#xA;                    ,SK_CarrierID&#xA;                    ,SK_ProgramID&#xA;                    ,SK_ProgramGroupID&#xA;                    ,SK_AgencyOfficeID&#xA;                    ,LossPaid&#xA;                    ,ExpensePaid&#xA;                    ,LegalExpensePaid&#xA;                    ,SubroRecovered&#xA;                    ,SalvageRecovered&#xA;                                      ,SK_Transaction_MonthID&#xA;                    )&#xA;                    WITH (DATA_COMPRESSION = COLUMNSTORE_ARCHIVE)&#xA;                     &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{DD94F932-26B3-4EE5-A29A-3E84C8724CF8}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create Columnstore index on factReserveMonthly table" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Columnstore indexes for Claim Tables\SQL create Columnstore index on factReserveMonthly table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                   CREATE NONCLUSTERED COLUMNSTORE INDEX [CS_IX_factReserveMonthly] ON [DataMart].[factReserveMonthly] (&#xA;                    SK_CY_MonthID&#xA;                    ,SK_AY_MonthID&#xA;                    ,SK_PY_MonthID&#xA;                    ,SK_RY_MonthID&#xA;                    ,SK_VehicleID&#xA;                    ,SK_PolicyID&#xA;                    ,SK_RatedDriverID&#xA;                    ,SK_DriversID&#xA;                    ,SK_CoverageID&#xA;                    ,SK_ClaimID&#xA;                    ,SK_FeatureID&#xA;                    ,SK_IncidentDriverID&#xA;                    ,SK_ProducerID&#xA;                    ,SK_CarrierID&#xA;                    ,SK_ProgramID&#xA;                    ,SK_ProgramGroupID&#xA;                    ,SK_AgencyOfficeID&#xA;                    ,LossReserve&#xA;                    ,ExpenseReserve&#xA;                    ,LegalExpenseReserve&#xA;                    ,RecoveryReserve&#xA;                                      ,SK_Transaction_MonthID&#xA;                    )&#xA;                    WITH (DATA_COMPRESSION = COLUMNSTORE_ARCHIVE)&#xA;&#xA;                   &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{09CEB368-9EBB-43DA-9837-DDFAB4331C14}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create Columnstore index on factClaimMonthly table" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Columnstore indexes for Claim Tables\SQL create Columnstore index on factClaimMonthly table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                   CREATE NONCLUSTERED COLUMNSTORE INDEX [CS_IX_factClaimMonthly] ON [DataMart].[factClaimMonthly] (&#xA;                    SK_CY_MonthID&#xA;                    ,SK_AY_MonthID&#xA;                    ,SK_PY_MonthID&#xA;                    ,SK_RY_MonthID&#xA;                    ,SK_VehicleID&#xA;                    ,SK_PolicyID&#xA;                    ,SK_RatedDriverID&#xA;                    ,SK_DriversID&#xA;                    ,SK_ClaimID&#xA;                    ,SK_IncidentDriverID&#xA;                    ,SK_ProducerID&#xA;                    ,SK_CarrierID&#xA;                    ,SK_ProgramID&#xA;                    ,BK_ClaimID&#xA;                    ,BK_ClaimNumber&#xA;                    ,BK_PolicyTermID&#xA;                    ,BK_VehicleID&#xA;                                      ,SK_Transaction_MonthID&#xA;                    )&#xA;                    WITH (DATA_COMPRESSION = COLUMNSTORE_ARCHIVE)&#xA;                   &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{745A22E9-FC6D-47F6-A4B2-5DCE1EEDEDDD}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create Columnstore index on factFeatureMonthly table" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Columnstore indexes for Claim Tables\SQL create Columnstore index on factFeatureMonthly table" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                              &#xA;                   CREATE NONCLUSTERED COLUMNSTORE INDEX [CS_IX_factFeatureMonthly] ON [DataMart].[factFeatureMonthly] (&#xA;                    SK_CY_MonthID&#xA;                    ,SK_AY_MonthID&#xA;                    ,SK_PY_MonthID&#xA;                    ,SK_RY_MonthID&#xA;                    ,SK_VehicleID&#xA;                    ,SK_PolicyID&#xA;                    ,SK_RatedDriverID&#xA;                    ,SK_DriversID&#xA;                    ,SK_CoverageID&#xA;                    ,SK_ClaimID&#xA;                    ,SK_FeatureID&#xA;                    ,SK_IncidentDriverID&#xA;                    ,SK_ProducerID&#xA;                    ,SK_CarrierID&#xA;                    ,SK_ProgramID&#xA;                                      ,SK_Transaction_MonthID&#xA;                    )&#xA;                    WITH (DATA_COMPRESSION = COLUMNSTORE_ARCHIVE)&#xA;                   &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
              </DTS:Executables>
              <DTS:PropertyExpression DTS:Name="Disable">!@[User::config_CreateColumnstoreIndexes]</DTS:PropertyExpression>
            </DTS:Executable>
            <DTS:Executable DTS:CreationName="STOCK:SEQUENCE" DTS:DTSID="{34F7E47B-5A1A-41E7-A2CA-0BC41BEC0C86}" DTS:ExecutableType="STOCK:SEQUENCE" DTS:LocaleID="-1" DTS:ObjectName="SEQC Create Transactional Indexes and FKs" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Transactional Indexes and FKs">
              <DTS:Executables>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{74A1A080-6F6F-488F-812F-9AF6834FC746}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factPaymentTransaction FKs" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Transactional Indexes and FKs\SQL create factPaymentTransaction FKs" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                         &#xA;          --) Create Indexes&#xA;          CREATE CLUSTERED INDEX CLUST_IX ON [DataMart].[factPaymentTransaction](SK_TransactionDateID) WITH (SORT_IN_TEMPDB = ON, DATA_COMPRESSION = PAGE)          &#xA;           &#xA;          --) Create FKs&#xA;          ALTER TABLE [DataMart].[factPaymentTransaction] WITH NOCHECK ADD CONSTRAINT FK_factPaymentTransaction_SK_TransactionDateID FOREIGN KEY (SK_TransactionDateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;                  ALTER TABLE [DataMart].[factPaymentTransaction] WITH NOCHECK ADD CONSTRAINT FK_factPaymentTransaction_SK_TransactionMonthID FOREIGN KEY (SK_TransactionMonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;          ALTER TABLE [DataMart].[factPaymentTransaction] WITH NOCHECK ADD CONSTRAINT FK_factPaymentTransaction_SK_PaymentTransactionID FOREIGN KEY (SK_PaymentTransactionID) REFERENCES [DataMart].[dimPaymentTransaction](SK_PaymentTransactionID)&#xA;          ALTER TABLE [DataMart].[factPaymentTransaction] WITH NOCHECK ADD CONSTRAINT FK_factPaymentTransaction_SK_PolicyID FOREIGN KEY (SK_PolicyID) REFERENCES [DataMart].[dimPolicy](SK_PolicyID)&#xA;          ALTER TABLE [DataMart].[factPaymentTransaction] WITH NOCHECK ADD CONSTRAINT FK_factPaymentTransaction_SK_EndorsementID FOREIGN KEY (SK_EndorsementID) REFERENCES [DataMart].[dimEndorsement](SK_EndorsementID)&#xA;          ALTER TABLE [DataMart].[factPaymentTransaction] WITH NOCHECK ADD CONSTRAINT FK_factPaymentTransaction_SK_ProducerID FOREIGN KEY (SK_ProducerID) REFERENCES [DataMart].[dimProducer](SK_ProducerID)&#xA;          ALTER TABLE [DataMart].[factPaymentTransaction] WITH NOCHECK ADD CONSTRAINT FK_factPaymentTransaction_SK_CarrierID FOREIGN KEY (SK_CarrierID) REFERENCES [DataMart].[dimCarrier](SK_CarrierID)&#xA;                  ALTER TABLE [DataMart].[factPaymentTransaction] WITH NOCHECK ADD CONSTRAINT FK_factPaymentTransaction_SK_ProgramID FOREIGN KEY (SK_ProgramID) REFERENCES [DataMart].[dimProgram](SK_ProgramID)&#xA;         &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{BD9C4ACB-1408-4826-B297-9E70969FE60B}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factCashAppliedTransaction FKs" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Transactional Indexes and FKs\SQL create factCashAppliedTransaction FKs" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                         &#xA;          --) Create Indexes&#xA;          CREATE CLUSTERED INDEX CLUST_IX ON [DataMart].[factCashAppliedTransaction](SK_AppliedDateID) WITH (DATA_COMPRESSION = PAGE)        &#xA;           &#xA;          --) Create FKs&#xA;          ALTER TABLE [DataMart].[factCashAppliedTransaction] WITH NOCHECK ADD CONSTRAINT FK_factCashAppliedTransaction_SK_AppliedDateID FOREIGN KEY (SK_AppliedDateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;                  ALTER TABLE [DataMart].[factCashAppliedTransaction] WITH NOCHECK ADD CONSTRAINT FK_factCashAppliedTransaction_SK_AppliedMonthID FOREIGN KEY (SK_AppliedMonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;          ALTER TABLE [DataMart].[factCashAppliedTransaction] WITH NOCHECK ADD CONSTRAINT FK_factCashAppliedTransaction_SK_PolicyID FOREIGN KEY (SK_PolicyID) REFERENCES [DataMart].[dimPolicy](SK_PolicyID)&#xA;          ALTER TABLE [DataMart].[factCashAppliedTransaction] WITH NOCHECK ADD CONSTRAINT FK_factCashAppliedTransaction_SK_EndorsementID FOREIGN KEY (SK_EndorsementID) REFERENCES [DataMart].[dimEndorsement](SK_EndorsementID)&#xA;          ALTER TABLE [DataMart].[factCashAppliedTransaction] WITH NOCHECK ADD CONSTRAINT FK_factCashAppliedTransaction_SK_ProducerID FOREIGN KEY (SK_ProducerID) REFERENCES [DataMart].[dimProducer](SK_ProducerID)&#xA;          ALTER TABLE [DataMart].[factCashAppliedTransaction] WITH NOCHECK ADD CONSTRAINT FK_factCashAppliedTransaction_SK_CarrierID FOREIGN KEY (SK_CarrierID) REFERENCES [DataMart].[dimCarrier](SK_CarrierID)&#xA;                  ALTER TABLE [DataMart].[factCashAppliedTransaction] WITH NOCHECK ADD CONSTRAINT FK_factCashAppliedTransaction_SK_ProgramID FOREIGN KEY (SK_ProgramID) REFERENCES [DataMart].[dimProgram](SK_ProgramID)&#xA;         &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{CF7C4D53-51FD-4D52-A884-991248F78D9C}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factPremiumsTransactional FKs" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Transactional Indexes and FKs\SQL create factPremiumsTransactional FKs" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                         &#xA;          --) Create Indexes&#xA;          CREATE CLUSTERED INDEX CLUST_IX_factPremiumsTransactional ON [DataMart].[factPremiumsTransactional](SK_TransactionDateID, SK_PolicyID) WITH ( DATA_COMPRESSION = PAGE)&#xA;           &#xA;          --) Create FKs&#xA;          ALTER TABLE [DataMart].[factPremiumsTransactional] WITH NOCHECK ADD CONSTRAINT FK_factPremiumsTransactional_SK_TransactionDateID FOREIGN KEY (SK_TransactionDateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;          ALTER TABLE [DataMart].[factPremiumsTransactional] WITH NOCHECK ADD CONSTRAINT FK_factPremiumsTransactional_SK_VehicleID FOREIGN KEY (SK_VehicleID) REFERENCES [DataMart].[dimVehicle](SK_VehicleID)&#xA;          ALTER TABLE [DataMart].[factPremiumsTransactional] WITH NOCHECK ADD CONSTRAINT FK_factPremiumsTransactional_SK_PolicyID FOREIGN KEY (SK_PolicyID) REFERENCES [DataMart].[dimPolicy](SK_PolicyID)&#xA;          ALTER TABLE [DataMart].[factPremiumsTransactional] WITH NOCHECK ADD CONSTRAINT FK_factPremiumsTransactional_SK_CoverageID FOREIGN KEY (SK_CoverageID) REFERENCES [DataMart].[dimCoverage](SK_CoverageID)&#xA;          ALTER TABLE [DataMart].[factPremiumsTransactional] WITH NOCHECK ADD CONSTRAINT FK_factPremiumsTransactional_SK_DriversID FOREIGN KEY (SK_DriversID) REFERENCES [DataMart].[dimDrivers](SK_DriversID)&#xA;          ALTER TABLE [DataMart].[factPremiumsTransactional] WITH NOCHECK ADD CONSTRAINT FK_factPremiumsTransactional_SK_RatedDriverID FOREIGN KEY (SK_RatedDriverID) REFERENCES [DataMart].[dimDriver](SK_DriverID)          &#xA;          ALTER TABLE [DataMart].[factPremiumsTransactional] WITH NOCHECK ADD CONSTRAINT FK_factPremiumsTransactional_SK_EndorsementID FOREIGN KEY (SK_EndorsementID) REFERENCES [DataMart].[dimEndorsement](SK_EndorsementID) &#xA;          ALTER TABLE [DataMart].[factPremiumsTransactional] WITH NOCHECK ADD CONSTRAINT FK_factPremiumsTransactional_SK_ProducerID FOREIGN KEY (SK_ProducerID) REFERENCES [DataMart].[dimProducer](SK_ProducerID) &#xA;          ALTER TABLE [DataMart].[factPremiumsTransactional] WITH NOCHECK ADD CONSTRAINT FK_factPremiumsTransactional_SK_CarrierID FOREIGN KEY (SK_CarrierID) REFERENCES [DataMart].[dimCarrier](SK_CarrierID)&#xA;          ALTER TABLE [DataMart].[factPremiumsTransactional] WITH NOCHECK ADD CONSTRAINT FK_factPremiumsTransactional_SK_ProgramID FOREIGN KEY (SK_ProgramID) REFERENCES [DataMart].[dimProgram](SK_ProgramID)&#xA;          ALTER TABLE [DataMart].[factPremiumsTransactional] WITH NOCHECK ADD CONSTRAINT FK_factPremiumsTransactional_SK_ProgramGroupID FOREIGN KEY (SK_ProgramGroupID) REFERENCES [DataMart].[dimProgramGroup](SK_ProgramGroupID)&#xA;          ALTER TABLE [DataMart].[factPremiumsTransactional] WITH NOCHECK ADD CONSTRAINT FK_factPremiumsTransactional_SK_AgencyOfficeID FOREIGN KEY (SK_AgencyOfficeID) REFERENCES [DataMart].[dimAgencyOffice](SK_AgencyOfficeID)&#xA;         &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{780F104D-67AD-48D8-A820-444BBA82D5AA}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factPremiumsTransactionalMonthly FKs" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Transactional Indexes and FKs\SQL create factPremiumsTransactionalMonthly FKs" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                         &#xA;          --) Create Indexes&#xA;          CREATE CLUSTERED INDEX CLUST_IX_factPremiumsTransactionalMonthly ON [DataMart].[factPremiumsTransactionalMonthly](SK_TransactionMonthID, SK_PolicyID) WITH ( DATA_COMPRESSION = PAGE)&#xA;           &#xA;          --) Create FKs&#xA;          ALTER TABLE [DataMart].[factPremiumsTransactionalMonthly] WITH NOCHECK ADD CONSTRAINT FK_factPremiumsTransactionalMonthly_SK_TransactionMonthID FOREIGN KEY (SK_TransactionMonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;          ALTER TABLE [DataMart].[factPremiumsTransactionalMonthly] WITH NOCHECK ADD CONSTRAINT FK_factPremiumsTransactionalMonthly_SK_VehicleID FOREIGN KEY (SK_VehicleID) REFERENCES [DataMart].[dimVehicle](SK_VehicleID)&#xA;          ALTER TABLE [DataMart].[factPremiumsTransactionalMonthly] WITH NOCHECK ADD CONSTRAINT FK_factPremiumsTransactionalMonthly_SK_PolicyID FOREIGN KEY (SK_PolicyID) REFERENCES [DataMart].[dimPolicy](SK_PolicyID)&#xA;          ALTER TABLE [DataMart].[factPremiumsTransactionalMonthly] WITH NOCHECK ADD CONSTRAINT FK_factPremiumsTransactionalMonthly_SK_CoverageID FOREIGN KEY (SK_CoverageID) REFERENCES [DataMart].[dimCoverage](SK_CoverageID)&#xA;          ALTER TABLE [DataMart].[factPremiumsTransactionalMonthly] WITH NOCHECK ADD CONSTRAINT FK_factPremiumsTransactionalMonthly_SK_DriversID FOREIGN KEY (SK_DriversID) REFERENCES [DataMart].[dimDrivers](SK_DriversID)&#xA;          ALTER TABLE [DataMart].[factPremiumsTransactionalMonthly] WITH NOCHECK ADD CONSTRAINT FK_factPremiumsTransactionalMonthly_SK_RatedDriverID FOREIGN KEY (SK_RatedDriverID) REFERENCES [DataMart].[dimDriver](SK_DriverID)          &#xA;          ALTER TABLE [DataMart].[factPremiumsTransactionalMonthly] WITH NOCHECK ADD CONSTRAINT FK_factPremiumsTransactionalMonthly_SK_EndorsementID FOREIGN KEY (SK_EndorsementID) REFERENCES [DataMart].[dimEndorsement](SK_EndorsementID) &#xA;          ALTER TABLE [DataMart].[factPremiumsTransactionalMonthly] WITH NOCHECK ADD CONSTRAINT FK_factPremiumsTransactionalMonthly_SK_ProducerID FOREIGN KEY (SK_ProducerID) REFERENCES [DataMart].[dimProducer](SK_ProducerID) &#xA;          ALTER TABLE [DataMart].[factPremiumsTransactionalMonthly] WITH NOCHECK ADD CONSTRAINT FK_factPremiumsTransactionalMonthly_SK_CarrierID FOREIGN KEY (SK_CarrierID) REFERENCES [DataMart].[dimCarrier](SK_CarrierID)&#xA;                  ALTER TABLE [DataMart].[factPremiumsTransactionalMonthly] WITH NOCHECK ADD CONSTRAINT FK_factPremiumsTransactionalMonthly_SK_SK_ProgramID FOREIGN KEY (SK_ProgramID) REFERENCES [DataMart].[dimProgram](SK_ProgramID)&#xA;          ALTER TABLE [DataMart].[factPremiumsTransactionalMonthly] WITH NOCHECK ADD CONSTRAINT FK_factPremiumsTransactionalMonthly_SK_AgencyOfficeID FOREIGN KEY (SK_AgencyOfficeID) REFERENCES [DataMart].[dimAgencyOffice](SK_AgencyOfficeID)&#xA;         &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{522C7D85-F5E8-4CCA-AC33-222F99C4763B}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factInforcePremiumTransactional FKs" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Transactional Indexes and FKs\SQL create factInforcePremiumTransactional FKs" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                         &#xA;          --) Create Indexes&#xA;          CREATE CLUSTERED INDEX CLUST_IX_factInforcePremiumTransactional ON [DataMart].[factInforcePremiumTransactional](SK_TransactionDateID, SK_PolicyID) WITH ( DATA_COMPRESSION = PAGE)&#xA;           &#xA;          --) Create FKs&#xA;          ALTER TABLE [DataMart].[factInforcePremiumTransactional] WITH NOCHECK ADD CONSTRAINT FK_factInforcePremiumTransactional_SK_TransactionDateID FOREIGN KEY (SK_TransactionDateID) REFERENCES [DataMart].[dimDate](SK_DateID)           &#xA;          ALTER TABLE [DataMart].[factInforcePremiumTransactional] WITH NOCHECK ADD CONSTRAINT FK_factInforcePremiumTransactional_SK_VehicleID FOREIGN KEY (SK_VehicleID) REFERENCES [DataMart].[dimVehicle](SK_VehicleID)&#xA;          ALTER TABLE [DataMart].[factInforcePremiumTransactional] WITH NOCHECK ADD CONSTRAINT FK_factInforcePremiumTransactional_SK_PolicyID FOREIGN KEY (SK_PolicyID) REFERENCES [DataMart].[dimPolicy](SK_PolicyID)&#xA;          ALTER TABLE [DataMart].[factInforcePremiumTransactional] WITH NOCHECK ADD CONSTRAINT FK_factInforcePremiumTransactional_SK_CoverageID FOREIGN KEY (SK_CoverageID) REFERENCES [DataMart].[dimCoverage](SK_CoverageID)&#xA;          ALTER TABLE [DataMart].[factInforcePremiumTransactional] WITH NOCHECK ADD CONSTRAINT FK_factInforcePremiumTransactional_SK_DriversID FOREIGN KEY (SK_DriversID) REFERENCES [DataMart].[dimDrivers](SK_DriversID)&#xA;          ALTER TABLE [DataMart].[factInforcePremiumTransactional] WITH NOCHECK ADD CONSTRAINT FK_factInforcePremiumTransactional_SK_RatedDriverID FOREIGN KEY (SK_RatedDriverID) REFERENCES [DataMart].[dimDriver](SK_DriverID)          &#xA;          ALTER TABLE [DataMart].[factInforcePremiumTransactional] WITH NOCHECK ADD CONSTRAINT FK_factInforcePremiumTransactional_SK_EndorsementID FOREIGN KEY (SK_EndorsementID) REFERENCES [DataMart].[dimEndorsement](SK_EndorsementID) &#xA;          ALTER TABLE [DataMart].[factInforcePremiumTransactional] WITH NOCHECK ADD CONSTRAINT FK_factInforcePremiumTransactional_SK_ProducerID FOREIGN KEY (SK_ProducerID) REFERENCES [DataMart].[dimProducer](SK_ProducerID) &#xA;          ALTER TABLE [DataMart].[factInforcePremiumTransactional] WITH NOCHECK ADD CONSTRAINT FK_factInforcePremiumTransactional_SK_CarrierID FOREIGN KEY (SK_CarrierID) REFERENCES [DataMart].[dimCarrier](SK_CarrierID)&#xA;          ALTER TABLE [DataMart].[factInforcePremiumTransactional] WITH NOCHECK ADD CONSTRAINT FK_factInforcePremiumTransactional_SK_ProgramID FOREIGN KEY (SK_ProgramID) REFERENCES [DataMart].[dimProgram](SK_ProgramID)&#xA;          ALTER TABLE [DataMart].[factInforcePremiumTransactional] WITH NOCHECK ADD CONSTRAINT FK_factInforcePremiumTransactional_SK_ProgramGroupID FOREIGN KEY (SK_ProgramGroupID) REFERENCES [DataMart].[dimProgramGroup](SK_ProgramGroupID)&#xA;          ALTER TABLE [DataMart].[factInforcePremiumTransactional] WITH NOCHECK ADD CONSTRAINT FK_factInforcePremiumTransactional_SK_AgencyOfficeID FOREIGN KEY (SK_AgencyOfficeID) REFERENCES [DataMart].[dimAgencyOffice](SK_AgencyOfficeID)                      &#xA;         &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{485E723D-F992-4784-8FBC-9135045D349F}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factSoFarPremiumTransactionalMonthly FKs" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Transactional Indexes and FKs\SQL create factSoFarPremiumTransactionalMonthly FKs" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                         &#xA;                   CREATE CLUSTERED INDEX CLUST_IX_factSoFarPremiumTransactionalMonthly ON [DataMart].[factSoFarPremiumTransactionalMonthly](SK_TransactionMonthID, SK_PolicyID) WITH ( DATA_COMPRESSION = PAGE)&#xA;                       &#xA;                   --) Create FKs&#xA;                   ALTER TABLE [DataMart].[factSoFarPremiumTransactionalMonthly] WITH NOCHECK ADD CONSTRAINT FK_factSoFarPremiumTransactionalMonthly_SK_TransactionMonthID FOREIGN KEY (SK_TransactionMonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;                   ALTER TABLE [DataMart].[factSoFarPremiumTransactionalMonthly] WITH NOCHECK ADD CONSTRAINT FK_factSoFarPremiumTransactionalMonthly_SK_VehicleID FOREIGN KEY (SK_VehicleID) REFERENCES [DataMart].[dimVehicle](SK_VehicleID)&#xA;                   ALTER TABLE [DataMart].[factSoFarPremiumTransactionalMonthly] WITH NOCHECK ADD CONSTRAINT FK_factSoFarPremiumTransactionalMonthly_SK_PolicyID FOREIGN KEY (SK_PolicyID) REFERENCES [DataMart].[dimPolicy](SK_PolicyID)&#xA;                   ALTER TABLE [DataMart].[factSoFarPremiumTransactionalMonthly] WITH NOCHECK ADD CONSTRAINT FK_factSoFarPremiumTransactionalMonthly_SK_CoverageID FOREIGN KEY (SK_CoverageID) REFERENCES [DataMart].[dimCoverage](SK_CoverageID)&#xA;                   ALTER TABLE [DataMart].[factSoFarPremiumTransactionalMonthly] WITH NOCHECK ADD CONSTRAINT FK_factSoFarPremiumTransactionalMonthly_SK_DriversID FOREIGN KEY (SK_DriversID) REFERENCES [DataMart].[dimDrivers](SK_DriversID)&#xA;                   ALTER TABLE [DataMart].[factSoFarPremiumTransactionalMonthly] WITH NOCHECK ADD CONSTRAINT FK_factSoFarPremiumTransactionalMonthly_SK_RatedDriverID FOREIGN KEY (SK_RatedDriverID) REFERENCES [DataMart].[dimDriver](SK_DriverID)                     &#xA;                   ALTER TABLE [DataMart].[factSoFarPremiumTransactionalMonthly] WITH NOCHECK ADD CONSTRAINT FK_factSoFarPremiumTransactionalMonthly_SK_ProducerID FOREIGN KEY (SK_ProducerID) REFERENCES [DataMart].[dimProducer](SK_ProducerID) &#xA;                   ALTER TABLE [DataMart].[factSoFarPremiumTransactionalMonthly] WITH NOCHECK ADD CONSTRAINT FK_factSoFarPremiumTransactionalMonthly_SK_CarrierID FOREIGN KEY (SK_CarrierID) REFERENCES [DataMart].[dimCarrier](SK_CarrierID)&#xA;                   ALTER TABLE [DataMart].[factSoFarPremiumTransactionalMonthly] WITH NOCHECK ADD CONSTRAINT FK_factSoFarPremiumTransactionalMonthly_SK_ProgramID FOREIGN KEY (SK_ProgramID) REFERENCES [DataMart].[dimProgram](SK_ProgramID)                                  &#xA;                  &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{2FE0FEB3-F484-41F4-B735-22307A932156}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factEndorsementTransaction FKs" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Transactional Indexes and FKs\SQL create factEndorsementTransaction FKs" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                         &#xA;          --) Create Indexes&#xA;          CREATE CLUSTERED INDEX CLUST_IX_factEndorsementTransaction ON [DataMart].[factEndorsementTransaction](SK_EndorsementTransactionDateID, SK_PolicyID) WITH ( DATA_COMPRESSION = PAGE)&#xA;           &#xA;          --) Create FKs&#xA;          ALTER TABLE [DataMart].[factEndorsementTransaction] WITH NOCHECK ADD CONSTRAINT FK_factEndorsementTransaction_SK_EndorsementTransactionDateID FOREIGN KEY (SK_EndorsementTransactionDateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;                  ALTER TABLE [DataMart].[factEndorsementTransaction] WITH NOCHECK ADD CONSTRAINT FK_factEndorsementTransaction_SK_EndorsementTransactionMonthID FOREIGN KEY (SK_EndorsementTransactionMonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;          ALTER TABLE [DataMart].[factEndorsementTransaction] WITH NOCHECK ADD CONSTRAINT FK_factEndorsementTransaction_SK_VehicleID FOREIGN KEY (SK_VehicleID) REFERENCES [DataMart].[dimVehicle](SK_VehicleID)&#xA;          ALTER TABLE [DataMart].[factEndorsementTransaction] WITH NOCHECK ADD CONSTRAINT FK_factEndorsementTransaction_SK_PolicyID FOREIGN KEY (SK_PolicyID) REFERENCES [DataMart].[dimPolicy](SK_PolicyID)&#xA;          ALTER TABLE [DataMart].[factEndorsementTransaction] WITH NOCHECK ADD CONSTRAINT FK_factEndorsementTransaction_SK_CoverageID FOREIGN KEY (SK_CoverageID) REFERENCES [DataMart].[dimCoverage](SK_CoverageID)&#xA;          ALTER TABLE [DataMart].[factEndorsementTransaction] WITH NOCHECK ADD CONSTRAINT FK_factEndorsementTransaction_SK_DriversID FOREIGN KEY (SK_DriversID) REFERENCES [DataMart].[dimDrivers](SK_DriversID)&#xA;          ALTER TABLE [DataMart].[factEndorsementTransaction] WITH NOCHECK ADD CONSTRAINT FK_factEndorsementTransaction_SK_RatedDriverID FOREIGN KEY (SK_RatedDriverID) REFERENCES [DataMart].[dimDriver](SK_DriverID)          &#xA;          ALTER TABLE [DataMart].[factEndorsementTransaction] WITH NOCHECK ADD CONSTRAINT FK_factEndorsementTransaction_SK_EndorsementID FOREIGN KEY (SK_EndorsementID) REFERENCES [DataMart].[dimEndorsement](SK_EndorsementID) &#xA;          ALTER TABLE [DataMart].[factEndorsementTransaction] WITH NOCHECK ADD CONSTRAINT FK_factEndorsementTransaction_SK_ProducerID FOREIGN KEY (SK_ProducerID) REFERENCES [DataMart].[dimProducer](SK_ProducerID) &#xA;          ALTER TABLE [DataMart].[factEndorsementTransaction] WITH NOCHECK ADD CONSTRAINT FK_factEndorsementTransaction_SK_CarrierID FOREIGN KEY (SK_CarrierID) REFERENCES [DataMart].[dimCarrier](SK_CarrierID)&#xA;                  ALTER TABLE [DataMart].[factEndorsementTransaction] WITH NOCHECK ADD CONSTRAINT FK_factEndorsementTransaction_SK_ProgramID FOREIGN KEY (SK_ProgramID) REFERENCES [DataMart].[dimProgram](SK_ProgramID)&#xA;         &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{CF3BB565-8FBC-4A7D-AFFF-B5A7D4644832}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factPIFVIFDIFTransaction FKs" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Transactional Indexes and FKs\SQL create factPIFVIFDIFTransaction FKs" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                         &#xA;          --) Create Indexes&#xA;          CREATE CLUSTERED INDEX CLUST_IX_factPIFVIFDIFTransaction ON [DataMart].[factPIFVIFDIFTransaction](SK_TransactionDateID, SK_PolicyID) WITH ( DATA_COMPRESSION = PAGE)&#xA;           &#xA;          --) Create FKs&#xA;          ALTER TABLE [DataMart].[factPIFVIFDIFTransaction] WITH NOCHECK ADD CONSTRAINT FK_factPIFVIFDIFTransaction_SK_SK_TransactionDateID FOREIGN KEY (SK_TransactionDateID) REFERENCES [DataMart].[dimDate](SK_DateID)&#xA;          ALTER TABLE [DataMart].[factPIFVIFDIFTransaction] WITH NOCHECK ADD CONSTRAINT FK_factPIFVIFDIFTransaction_SK_VehicleID FOREIGN KEY (SK_VehicleID) REFERENCES [DataMart].[dimVehicle](SK_VehicleID)&#xA;          ALTER TABLE [DataMart].[factPIFVIFDIFTransaction] WITH NOCHECK ADD CONSTRAINT FK_factPIFVIFDIFTransaction_SK_PolicyID FOREIGN KEY (SK_PolicyID) REFERENCES [DataMart].[dimPolicy](SK_PolicyID)&#xA;          ALTER TABLE [DataMart].[factPIFVIFDIFTransaction] WITH NOCHECK ADD CONSTRAINT FK_factPIFVIFDIFTransaction_SK_CoverageID FOREIGN KEY (SK_CoverageID) REFERENCES [DataMart].[dimCoverage](SK_CoverageID)           &#xA;          ALTER TABLE [DataMart].[factPIFVIFDIFTransaction] WITH NOCHECK ADD CONSTRAINT FK_factPIFVIFDIFTransaction_SK_RatedDriverID FOREIGN KEY (SK_RatedDriverID) REFERENCES [DataMart].[dimDriver](SK_DriverID)          &#xA;          ALTER TABLE [DataMart].[factPIFVIFDIFTransaction] WITH NOCHECK ADD CONSTRAINT FK_factPIFVIFDIFTransaction_SK_EndorsementID FOREIGN KEY (SK_EndorsementID) REFERENCES [DataMart].[dimEndorsement](SK_EndorsementID) &#xA;          ALTER TABLE [DataMart].[factPIFVIFDIFTransaction] WITH NOCHECK ADD CONSTRAINT FK_factPIFVIFDIFTransaction_SK_ProducerID FOREIGN KEY (SK_ProducerID) REFERENCES [DataMart].[dimProducer](SK_ProducerID) &#xA;          ALTER TABLE [DataMart].[factPIFVIFDIFTransaction] WITH NOCHECK ADD CONSTRAINT FK_factPIFVIFDIFTransaction_SK_CarrierID FOREIGN KEY (SK_CarrierID) REFERENCES [DataMart].[dimCarrier](SK_CarrierID)&#xA;          ALTER TABLE [DataMart].[factPIFVIFDIFTransaction] WITH NOCHECK ADD CONSTRAINT FK_factPIFVIFDIFTransaction_SK_ProgramID FOREIGN KEY (SK_ProgramID) REFERENCES [DataMart].[dimProgram](SK_ProgramID)&#xA;          ALTER TABLE [DataMart].[factPIFVIFDIFTransaction] WITH NOCHECK ADD CONSTRAINT FK_factPIFVIFDIFTransaction_SK_ProgramGroupID FOREIGN KEY (SK_ProgramGroupID) REFERENCES [DataMart].[dimProgramGroup](SK_ProgramGroupID)&#xA;          ALTER TABLE [DataMart].[factPIFVIFDIFTransaction] WITH NOCHECK ADD CONSTRAINT FK_factPIFVIFDIFTransaction_SK_AgencyOfficeID FOREIGN KEY (SK_AgencyOfficeID) REFERENCES [DataMart].[dimAgencyOffice](SK_AgencyOfficeID)&#xA;         &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{CE664EAA-A7A7-4C7C-B363-ABE96592D5C5}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factPIFVIFDIFTransactionMonthly FKs" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Transactional Indexes and FKs\SQL create factPIFVIFDIFTransactionMonthly FKs" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                         &#xA;          --) Create Indexes&#xA;          CREATE CLUSTERED INDEX CLUST_IX_factPIFVIFDIFTransactionMonthly ON [DataMart].[factPIFVIFDIFTransactionMonthly](SK_TransactionMonthID, SK_PolicyID) WITH ( DATA_COMPRESSION = PAGE)&#xA;           &#xA;          --) Create FKs&#xA;          ALTER TABLE [DataMart].[factPIFVIFDIFTransactionMonthly] WITH NOCHECK ADD CONSTRAINT FK_factPIFVIFDIFTransactionMonthly_SK_SK_TransactionMonthID FOREIGN KEY (SK_TransactionMonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;          ALTER TABLE [DataMart].[factPIFVIFDIFTransactionMonthly] WITH NOCHECK ADD CONSTRAINT FK_factPIFVIFDIFTransactionMonthly_SK_VehicleID FOREIGN KEY (SK_VehicleID) REFERENCES [DataMart].[dimVehicle](SK_VehicleID)&#xA;          ALTER TABLE [DataMart].[factPIFVIFDIFTransactionMonthly] WITH NOCHECK ADD CONSTRAINT FK_factPIFVIFDIFTransactionMonthly_SK_PolicyID FOREIGN KEY (SK_PolicyID) REFERENCES [DataMart].[dimPolicy](SK_PolicyID)&#xA;          ALTER TABLE [DataMart].[factPIFVIFDIFTransactionMonthly] WITH NOCHECK ADD CONSTRAINT FK_factPIFVIFDIFTransactionMonthly_SK_CoverageID FOREIGN KEY (SK_CoverageID) REFERENCES [DataMart].[dimCoverage](SK_CoverageID)           &#xA;          ALTER TABLE [DataMart].[factPIFVIFDIFTransactionMonthly] WITH NOCHECK ADD CONSTRAINT FK_factPIFVIFDIFTransactionMonthly_SK_RatedDriverID FOREIGN KEY (SK_RatedDriverID) REFERENCES [DataMart].[dimDriver](SK_DriverID)          &#xA;          ALTER TABLE [DataMart].[factPIFVIFDIFTransactionMonthly] WITH NOCHECK ADD CONSTRAINT FK_factPIFVIFDIFTransactionMonthly_SK_EndorsementID FOREIGN KEY (SK_EndorsementID) REFERENCES [DataMart].[dimEndorsement](SK_EndorsementID) &#xA;          ALTER TABLE [DataMart].[factPIFVIFDIFTransactionMonthly] WITH NOCHECK ADD CONSTRAINT FK_factPIFVIFDIFTransactionMonthly_SK_ProducerID FOREIGN KEY (SK_ProducerID) REFERENCES [DataMart].[dimProducer](SK_ProducerID) &#xA;          ALTER TABLE [DataMart].[factPIFVIFDIFTransactionMonthly] WITH NOCHECK ADD CONSTRAINT FK_factPIFVIFDIFTransactionMonthly_SK_CarrierID FOREIGN KEY (SK_CarrierID) REFERENCES [DataMart].[dimCarrier](SK_CarrierID)&#xA;                      ALTER TABLE [DataMart].[factPIFVIFDIFTransactionMonthly] WITH NOCHECK ADD CONSTRAINT FK_factPIFVIFDIFTransactionMonthly_SK_ProgramID FOREIGN KEY (SK_ProgramID) REFERENCES [DataMart].[dimProgram](SK_ProgramID)&#xA;          ALTER TABLE [DataMart].[factPIFVIFDIFTransactionMonthly] WITH NOCHECK ADD CONSTRAINT FK_factPIFVIFDIFTransactionMonthly_SK_ProgramGroupID FOREIGN KEY (SK_ProgramGroupID) REFERENCES [DataMart].[dimProgramGroup](SK_ProgramGroupID)&#xA;          ALTER TABLE [DataMart].[factPIFVIFDIFTransactionMonthly] WITH NOCHECK ADD CONSTRAINT FK_factPIFVIFDIFTransactionMonthly_SK_AgencyOfficeID FOREIGN KEY (SK_AgencyOfficeID) REFERENCES [DataMart].[dimAgencyOffice](SK_AgencyOfficeID)&#xA;         &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
                <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{B6FFC7F9-A03F-40C9-8CAE-3856C2FE8F3A}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL create factInforcePremiumTransactionalMonthly FKs" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Transactional Indexes and FKs\SQL create factInforcePremiumTransactionalMonthly FKs" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:ObjectData>
                    <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                                         &#xA;          --) Create Indexes&#xA;          CREATE CLUSTERED INDEX CLUST_IX_factInforcePremiumTransactionalMonthly ON [DataMart].[factInforcePremiumTransactionalMonthly](SK_TransactionMonthID, SK_PolicyID) WITH ( DATA_COMPRESSION = PAGE)&#xA;           &#xA;          --) Create FKs&#xA;          ALTER TABLE [DataMart].[factInforcePremiumTransactionalMonthly] WITH NOCHECK ADD CONSTRAINT FK_factInforcePremiumTransactionalMonthly_SK_TransactionMonthID FOREIGN KEY (SK_TransactionMonthID) REFERENCES [DataMart].[dimMonth](SK_MonthID)&#xA;          ALTER TABLE [DataMart].[factInforcePremiumTransactionalMonthly] WITH NOCHECK ADD CONSTRAINT FK_factInforcePremiumTransactionalMonthly_SK_VehicleID FOREIGN KEY (SK_VehicleID) REFERENCES [DataMart].[dimVehicle](SK_VehicleID)&#xA;          ALTER TABLE [DataMart].[factInforcePremiumTransactionalMonthly] WITH NOCHECK ADD CONSTRAINT FK_factInforcePremiumTransactionalMonthly_SK_PolicyID FOREIGN KEY (SK_PolicyID) REFERENCES [DataMart].[dimPolicy](SK_PolicyID)&#xA;          ALTER TABLE [DataMart].[factInforcePremiumTransactionalMonthly] WITH NOCHECK ADD CONSTRAINT FK_factInforcePremiumTransactionalMonthly_SK_CoverageID FOREIGN KEY (SK_CoverageID) REFERENCES [DataMart].[dimCoverage](SK_CoverageID)&#xA;          ALTER TABLE [DataMart].[factInforcePremiumTransactionalMonthly] WITH NOCHECK ADD CONSTRAINT FK_factInforcePremiumTransactionalMonthly_SK_DriversID FOREIGN KEY (SK_DriversID) REFERENCES [DataMart].[dimDrivers](SK_DriversID)&#xA;          ALTER TABLE [DataMart].[factInforcePremiumTransactionalMonthly] WITH NOCHECK ADD CONSTRAINT FK_factInforcePremiumTransactionalMonthly_SK_RatedDriverID FOREIGN KEY (SK_RatedDriverID) REFERENCES [DataMart].[dimDriver](SK_DriverID)                     &#xA;          ALTER TABLE [DataMart].[factInforcePremiumTransactionalMonthly] WITH NOCHECK ADD CONSTRAINT FK_factInforcePremiumTransactionalMonthly_SK_ProducerID FOREIGN KEY (SK_ProducerID) REFERENCES [DataMart].[dimProducer](SK_ProducerID) &#xA;          ALTER TABLE [DataMart].[factInforcePremiumTransactionalMonthly] WITH NOCHECK ADD CONSTRAINT FK_factInforcePremiumTransactionalMonthly_SK_CarrierID FOREIGN KEY (SK_CarrierID) REFERENCES [DataMart].[dimCarrier](SK_CarrierID)&#xA;          ALTER TABLE [DataMart].[factInforcePremiumTransactionalMonthly] WITH NOCHECK ADD CONSTRAINT FK_factInforcePremiumTransactionalMonthlyl_SK_ProgramID FOREIGN KEY (SK_ProgramID) REFERENCES [DataMart].[dimProgram](SK_ProgramID)&#xA;         &#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                    </SQLTask:SqlTaskData>
                  </DTS:ObjectData>
                </DTS:Executable>
              </DTS:Executables>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:PrecedenceConstraints>
            <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{69AFC9DF-10B3-4BC5-831B-E260238339FB}" DTS:From="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create dimension columnstore indexes" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SEQC Create dimension columnstore indexes_To_SEQC Create Ratemaking Indexes and FKs" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes.PrecedenceConstraints[Constraint_SEQC Create dimension columnstore indexes_To_SEQC Create Ratemaking Indexes and FKs]" DTS:To="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Ratemaking Indexes and FKs">
            </DTS:PrecedenceConstraint>
            <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{AA4C47CC-AC89-4D8B-9E61-86FCD7BE04F4}" DTS:From="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Ratemaking Indexes and FKs" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SEQC Create Ratemaking Indexes and FKs_To_SEQC Create Claim Indexes and FKs" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes.PrecedenceConstraints[Constraint_SEQC Create Ratemaking Indexes and FKs_To_SEQC Create Claim Indexes and FKs]" DTS:To="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Claim Indexes and FKs">
            </DTS:PrecedenceConstraint>
            <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{56254639-7E31-47C7-9DC1-A8F05F0CF717}" DTS:From="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Claim Indexes and FKs" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SEQC Create Claim Indexes and FKs_To_SEQC Create Columnstore indexes for Daily Tables" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes.PrecedenceConstraints[Constraint_SEQC Create Claim Indexes and FKs_To_SEQC Create Columnstore indexes for Daily Tables]" DTS:To="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Columnstore indexes for Daily Tables">
            </DTS:PrecedenceConstraint>
            <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{3003EAE3-5545-439C-8E65-F77CA9021AC6}" DTS:From="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Columnstore indexes for Daily Tables" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SEQC Create Columnstore indexes for Daily Tables_To_SEQC Create Columnstore indexes for Monthly Ratemaking Tables" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes.PrecedenceConstraints[Constraint_SEQC Create Columnstore indexes for Daily Tables_To_SEQC Create Columnstore indexes for Monthly Ratemaking Tables]" DTS:To="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Columnstore indexes for Monthly Ratemaking Tables">
            </DTS:PrecedenceConstraint>
            <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{EAD56BF0-9277-49A1-8768-BA7159DE2E8F}" DTS:From="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Columnstore indexes for Monthly Ratemaking Tables" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SEQC Create Columnstore indexes for Monthly Ratemaking Tables_To_SEQC Create Columnstore indexes for Transactional Tables" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes.PrecedenceConstraints[Constraint_SEQC Create Columnstore indexes for Monthly Ratemaking Tables_To_SEQC Create Columnstore indexes for Transactional Tables]" DTS:To="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Columnstore indexes for Transactional Tables">
            </DTS:PrecedenceConstraint>
            <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{D3C21C47-C966-4EF4-BD89-6554AD2022D7}" DTS:From="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Columnstore indexes for Transactional Tables" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SEQC Create Columnstore indexes for Transactional Tables_To_SEQC Create Columnstore indexes for Claim Tables" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes.PrecedenceConstraints[Constraint_SEQC Create Columnstore indexes for Transactional Tables_To_SEQC Create Columnstore indexes for Claim Tables]" DTS:To="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Columnstore indexes for Claim Tables">
            </DTS:PrecedenceConstraint>
            <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{1CEFFFCD-2498-4B77-80D4-C602198121BE}" DTS:EvalOp="3" DTS:Expression="@[User::IsIncremental]==0" DTS:From="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Columnstore indexes for Claim Tables" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SEQC Create Columnstore indexes for Claim Tables_To_SEQC Create Transactional Indexes and FKs" DTS:refId="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes.PrecedenceConstraints[Constraint_SEQC Create Columnstore indexes for Claim Tables_To_SEQC Create Transactional Indexes and FKs]" DTS:To="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes\SEQC Create Transactional Indexes and FKs">
            </DTS:PrecedenceConstraint>
          </DTS:PrecedenceConstraints>
        </DTS:Executable>
        <DTS:Executable DTS:CreationName="STOCK:SEQUENCE" DTS:DTSID="{7E8FE170-073D-4FD0-BD09-ED2C9DC0D973}" DTS:ExecutableType="STOCK:SEQUENCE" DTS:LocaleID="-1" DTS:ObjectName="SEQC Process Version Info" DTS:refId="Package\SEQC Package Logic\SEQC Process Version Info">
          <DTS:Executables>
            <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{E90CCBDD-90A7-4680-9515-4124C01C796C}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL Setup Version and Version_KeyValue tables" DTS:refId="Package\SEQC Package Logic\SEQC Process Version Info\SQL Setup Version and Version_KeyValue tables" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
              <DTS:ObjectData>
                <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                          IF object_id('[DataMart].[Version]') IS NULL&#xA;                          BEGIN&#xA;                          CREATE TABLE [DataMart].[Version] (&#xA;                          [VersionID] INT IDENTITY PRIMARY KEY,&#xA;                          [VersionName] VARCHAR(30) ,     --T.1.[VersionID].yyyymmdd&#xA;                          [ProcessStartDate] DATETIME,&#xA;                          [ProcessEndDate] DATETIME,&#xA;                          [ActiveStartDate] DATETIME,&#xA;                          [ActiveEndDate] DATETIME,&#xA;                          [CurrentVersion] tinyint,&#xA;                          )&#xA;&#xA;                          IF object_id('[DataMart].[Version_KeyValue]') IS NOT NULL DROP TABLE DDS_Version_KeyValue&#xA;                          END&#xA;&#xA;                          IF object_id('[DataMart].[Version_KeyValue]') IS NULL&#xA;                          BEGIN&#xA;                          CREATE TABLE [DataMart].[Version_KeyValue] (&#xA;                          [KeyValueID] INT IDENTITY PRIMARY KEY,&#xA;                          [Layer] Varchar(10),&#xA;                          [VersionID] INT,&#xA;                          [Key] Varchar(100),&#xA;                          [Value] varchar(50),&#xA;                          [IncludeIntoExecSummary] bit,&#xA;                          [IncludeIntoCube] bit&#xA;                          )&#xA;&#xA;                          ALTER TABLE [DataMart].[Version_KeyValue] ADD CONSTRAINT FK_DDS_Version FOREIGN KEY (VersionID) REFERENCES [DataMart].[Version](VersionID)&#xA;                          ALTER TABLE [DataMart].[Version_KeyValue] ADD CONSTRAINT FK_DDS_KeyValue UNIQUE (Layer, VersionID, [Key], Value)&#xA;                          END&#xA;                        " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                </SQLTask:SqlTaskData>
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{0ED1AEA8-58B7-41E6-87F1-68BC65C0058C}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL assign VersionID" DTS:refId="Package\SEQC Package Logic\SEQC Process Version Info\SQL assign VersionID" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
              <DTS:ObjectData>
                <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                          --1) Get new VersionID record&#xA;                          DECLARE @VersionID int&#xA;                          INSERT INTO [DataMart].[Version] DEFAULT VALUES&#xA;                          SET @VersionID = SCOPE_IDENTITY()&#xA;&#xA;                          --Create Version number&#xA;                          DECLARE @VersionName VARCHAR(30)&#xA;                          SET @VersionName = 'D.1.' + CAST(@VersionID AS varchar) + '.' + CONVERT(VARCHAR, GETDATE(), 112)&#xA;&#xA;                          --Make previous version non-current&#xA;                          UPDATE [DataMart].[Version] SET ActiveEndDate = GETDATE(), CurrentVersion = 0 WHERE CurrentVersion = 1&#xA;&#xA;                          -- Update Values&#xA;                          UPDATE [DataMart].[Version]&#xA;                          SET VersionName = @VersionName,&#xA;                          [ProcessStartDate]  = ?,&#xA;                          [ProcessEndDate]  = GETDATE(),&#xA;                          [ActiveStartDate]  = GETDATE(),&#xA;                          [ActiveEndDate]  = null,&#xA;                          [CurrentVersion]  = 1&#xA;                          WHERE VersionID = @VersionID&#xA;&#xA;                          SELECT ? = @VersionID&#xA;                        " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                  <SQLTask:ParameterBinding SQLTask:DataType="7" SQLTask:DtsVariableName="System::StartTime" SQLTask:ParameterDirection="Input" SQLTask:ParameterName="0" SQLTask:ParameterSize="-1">
                  </SQLTask:ParameterBinding>
                  <SQLTask:ParameterBinding SQLTask:DataType="3" SQLTask:DtsVariableName="User::VersionID" SQLTask:ParameterDirection="Output" SQLTask:ParameterName="1" SQLTask:ParameterSize="-1">
                  </SQLTask:ParameterBinding>
                </SQLTask:SqlTaskData>
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{AB331A5B-BEBA-4FBB-8689-7E9D30D0A19F}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL copy Extract KeyValue pairs" DTS:refId="Package\SEQC Package Logic\SEQC Process Version Info\SQL copy Extract KeyValue pairs" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
              <DTS:ObjectData>
                <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                          --1) Get @VersionID&#xA;                          DECLARE @VersionID INT&#xA;                          SET @VersionID = ?&#xA;&#xA;                          --2) Move KeyValue pairs&#xA;                          INSERT INTO [DataMart].[Version_KeyValue]&#xA;                          SELECT kv.Layer,&#xA;                          @VersionID AS VersionID,&#xA;                          kv.[Key],&#xA;                          kv.[Value],&#xA;                          0 AS IncludeIntoExecSummary,&#xA;                          kv.[IncludeIntoCube]&#xA;                          FROM  [Extract].[Version] AS v&#xA;                          LEFT JOIN [Extract].[Version_KeyValue] AS kv ON v.VersionID = kv.VersionID WHERE v.CurrentVersion = 1&#xA;                        " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                  <SQLTask:ParameterBinding SQLTask:DataType="3" SQLTask:DtsVariableName="User::VersionID" SQLTask:ParameterDirection="Input" SQLTask:ParameterName="0" SQLTask:ParameterSize="-1">
                  </SQLTask:ParameterBinding>
                </SQLTask:SqlTaskData>
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{826AC916-A9DA-4A30-B220-EC27B17E19E0}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL Populate KeyValue tables with Other params" DTS:refId="Package\SEQC Package Logic\SEQC Process Version Info\SQL Populate KeyValue tables with Other params" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
              <DTS:ObjectData>
                <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                          --1) Get @VersionID&#xA;                          DECLARE @VersionID INT&#xA;                          SET @VersionID = ?&#xA;&#xA;                          --2) Get/Save values&#xA;                          DECLARE @dimClaimRows int&#xA;                          SELECT  @dimClaimRows = COUNT(*) FROM [DataMart].dimClaim&#xA;                          INSERT INTO [DataMart].[Version_KeyValue] VALUES('Load DDS',@VersionID, 'DDS - dimClaim table # rows', CAST(@dimClaimRows AS VARCHAR(50)), 1, 1)&#xA;&#xA;                          DECLARE @dimCoverageRows int&#xA;                          SELECT  @dimCoverageRows = COUNT(*) FROM [DataMart].dimCoverage&#xA;                          INSERT INTO [DataMart].[Version_KeyValue] VALUES('Load DDS',@VersionID, 'DDS - dimCoverage table # rows', CAST(@dimCoverageRows AS VARCHAR(50)), 1, 1)&#xA;&#xA;                          DECLARE @dimDateRows int&#xA;                          SELECT  @dimDateRows = COUNT(*) FROM [DataMart].dimDate&#xA;                          INSERT INTO [DataMart].[Version_KeyValue] VALUES('Load DDS',@VersionID, 'DDS - dimDate table # rows', CAST(@dimDateRows AS VARCHAR(50)), 1, 1)&#xA;&#xA;                          DECLARE @dimDriverRows int&#xA;                          SELECT  @dimDriverRows = COUNT(*) FROM [DataMart].dimDriver&#xA;                          INSERT INTO [DataMart].[Version_KeyValue] VALUES('Load DDS',@VersionID, 'DDS - dimDriver table # rows', CAST(@dimDriverRows AS VARCHAR(50)), 1, 1)&#xA;&#xA;                          DECLARE @dimDriversRows int&#xA;                          SELECT  @dimDriversRows = COUNT(*) FROM [DataMart].dimDrivers&#xA;                          INSERT INTO [DataMart].[Version_KeyValue] VALUES('Load DDS',@VersionID, 'DDS - dimDrivers table # rows', CAST(@dimDriversRows AS VARCHAR(50)), 1, 1)&#xA;&#xA;                          DECLARE @dimEndorsementRows int&#xA;                          SELECT  @dimEndorsementRows = COUNT(*) FROM [DataMart].dimEndorsement&#xA;                          INSERT INTO [DataMart].[Version_KeyValue] VALUES('Load DDS',@VersionID, 'DDS - dimEndorsement table # rows', CAST(@dimEndorsementRows AS VARCHAR(50)), 1, 1)&#xA;&#xA;                          DECLARE @dimFeatureRows int&#xA;                          SELECT  @dimFeatureRows = COUNT(*) FROM [DataMart].dimFeature&#xA;                          INSERT INTO [DataMart].[Version_KeyValue] VALUES('Load DDS',@VersionID, 'DDS - dimFeature table # rows', CAST(@dimFeatureRows AS VARCHAR(50)), 1, 1)&#xA;&#xA;                          DECLARE @dimLienholderRows int&#xA;                          SELECT  @dimLienholderRows = COUNT(*) FROM [DataMart].dimLienholder&#xA;                          INSERT INTO [DataMart].[Version_KeyValue] VALUES('Load DDS',@VersionID, 'DDS - dimLienholder table # rows', CAST(@dimLienholderRows AS VARCHAR(50)), 1, 1)&#xA;&#xA;                          DECLARE @dimMonthRows int&#xA;                          SELECT  @dimMonthRows = COUNT(*) FROM [DataMart].dimMonth&#xA;                          INSERT INTO [DataMart].[Version_KeyValue] VALUES('Load DDS',@VersionID, 'DDS - dimMonth table # rows', CAST(@dimMonthRows AS VARCHAR(50)), 1, 1)&#xA;&#xA;                          DECLARE @dimPaymentTransactionRows int&#xA;                          SELECT  @dimPaymentTransactionRows = COUNT(*) FROM [DataMart].dimPaymentTransaction&#xA;                          INSERT INTO [DataMart].[Version_KeyValue] VALUES('Load DDS',@VersionID, 'DDS - dimPaymentTransaction table # rows', CAST(@dimPaymentTransactionRows AS VARCHAR(50)), 1, 1)&#xA;&#xA;                          DECLARE @dimPolicyRows int&#xA;                          SELECT  @dimPolicyRows = COUNT(*) FROM [DataMart].dimPolicy&#xA;                          INSERT INTO [DataMart].[Version_KeyValue] VALUES('Load DDS',@VersionID, 'DDS - dimPolicy table # rows', CAST(@dimPolicyRows AS VARCHAR(50)), 1, 1)&#xA;&#xA;                          DECLARE @dimProducerRows int&#xA;                          SELECT  @dimProducerRows = COUNT(*) FROM [DataMart].dimProducer&#xA;                          INSERT INTO [DataMart].[Version_KeyValue] VALUES('Load DDS',@VersionID, 'DDS - dimProducer table # rows', CAST(@dimProducerRows AS VARCHAR(50)), 1, 1)&#xA;&#xA;                          DECLARE @dimVehicleRows int&#xA;                          SELECT  @dimVehicleRows = COUNT(*) FROM [DataMart].dimVehicle&#xA;                          INSERT INTO [DataMart].[Version_KeyValue] VALUES('Load DDS',@VersionID, 'DDS - dimVehicle table # rows', CAST(@dimVehicleRows AS VARCHAR(50)), 1, 1)&#xA;&#xA;                          DECLARE @factCashAppliedTransactionRows int&#xA;                          SELECT  @factCashAppliedTransactionRows = COUNT(*) FROM [DataMart].factCashAppliedTransaction&#xA;                          INSERT INTO [DataMart].[Version_KeyValue] VALUES('Load DDS',@VersionID, 'DDS - factCashAppliedTransaction table # rows', CAST(@factCashAppliedTransactionRows AS VARCHAR(50)), 1, 1)&#xA;&#xA;                          DECLARE @factClaimRows int&#xA;                          SELECT  @factClaimRows = COUNT(*) FROM [DataMart].factClaim&#xA;                          INSERT INTO [DataMart].[Version_KeyValue] VALUES('Load DDS',@VersionID, 'DDS - factClaim table # rows', CAST(@factClaimRows AS VARCHAR(50)), 1, 1)&#xA;&#xA;                          DECLARE @factClaimMonthlyRows int&#xA;                          SELECT  @factClaimMonthlyRows = COUNT(*) FROM [DataMart].factClaimMonthly&#xA;                          INSERT INTO [DataMart].[Version_KeyValue] VALUES('Load DDS',@VersionID, 'DDS - factClaimMonthly table # rows', CAST(@factClaimMonthlyRows AS VARCHAR(50)), 1, 1)&#xA;&#xA;                          DECLARE @factExpenseRows int&#xA;                          SELECT  @factExpenseRows = COUNT(*) FROM [DataMart].factExpense&#xA;                          INSERT INTO [DataMart].[Version_KeyValue] VALUES('Load DDS',@VersionID, 'DDS - factExpense table # rows', CAST(@factExpenseRows AS VARCHAR(50)), 1, 1)&#xA;&#xA;                          DECLARE @factExpenseMonthlyRows int&#xA;                          SELECT  @factExpenseMonthlyRows = COUNT(*) FROM [DataMart].factExpenseMonthly&#xA;                          INSERT INTO [DataMart].[Version_KeyValue] VALUES('Load DDS',@VersionID, 'DDS - factExpenseMonthly table # rows', CAST(@factExpenseMonthlyRows AS VARCHAR(50)), 1, 1)&#xA;&#xA;                          DECLARE @factFeatureRows int&#xA;                          SELECT  @factFeatureRows = COUNT(*) FROM [DataMart].factFeature&#xA;                          INSERT INTO [DataMart].[Version_KeyValue] VALUES('Load DDS',@VersionID, 'DDS - factFeature table # rows', CAST(@factFeatureRows AS VARCHAR(50)), 1, 1)&#xA;&#xA;                          DECLARE @factFeatureMonthlyRows int&#xA;                          SELECT  @factFeatureMonthlyRows = COUNT(*) FROM [DataMart].factFeatureMonthly&#xA;                          INSERT INTO [DataMart].[Version_KeyValue] VALUES('Load DDS',@VersionID, 'DDS - factFeatureMonthly table # rows', CAST(@factFeatureMonthlyRows AS VARCHAR(50)), 1, 1)&#xA;&#xA;                          DECLARE @factlessDriversRows int&#xA;                          SELECT  @factlessDriversRows = COUNT(*) FROM [DataMart].factlessDrivers&#xA;                          INSERT INTO [DataMart].[Version_KeyValue] VALUES('Load DDS',@VersionID, 'DDS - factlessDrivers table # rows', CAST(@factlessDriversRows AS VARCHAR(50)), 1, 1)&#xA;&#xA;                          DECLARE @factlessVehicleLienholderRows int&#xA;                          SELECT  @factlessVehicleLienholderRows = COUNT(*) FROM [DataMart].factlessVehicleLienholder&#xA;                          INSERT INTO [DataMart].[Version_KeyValue] VALUES('Load DDS',@VersionID, 'DDS - factlessVehicleLienholder table # rows', CAST(@factlessVehicleLienholderRows AS VARCHAR(50)), 1, 1)&#xA;&#xA;                          DECLARE @factNewBusinessRows int&#xA;                          SELECT  @factNewBusinessRows = COUNT(*) FROM [DataMart].factNewBusiness&#xA;                          INSERT INTO [DataMart].[Version_KeyValue] VALUES('Load DDS',@VersionID, 'DDS - factNewBusiness table # rows', CAST(@factNewBusinessRows AS VARCHAR(50)), 1, 1)&#xA;&#xA;                          DECLARE @factNewBusinessMonthlyRows int&#xA;                          SELECT  @factNewBusinessMonthlyRows = COUNT(*) FROM [DataMart].factNewBusinessMonthly&#xA;                          INSERT INTO [DataMart].[Version_KeyValue] VALUES('Load DDS',@VersionID, 'DDS - factNewBusinessMonthly table # rows', CAST(@factNewBusinessMonthlyRows AS VARCHAR(50)), 1, 1)&#xA;&#xA;                          DECLARE @factPaymentTransactionRows int&#xA;                          SELECT  @factPaymentTransactionRows = COUNT(*) FROM [DataMart].factPaymentTransaction&#xA;                          INSERT INTO [DataMart].[Version_KeyValue] VALUES('Load DDS',@VersionID, 'DDS - factPaymentTransaction table # rows', CAST(@factPaymentTransactionRows AS VARCHAR(50)), 1, 1)&#xA;&#xA;                          DECLARE @factPifVifMonthlyRows int&#xA;                          SELECT  @factPifVifMonthlyRows = COUNT(*) FROM [DataMart].factPifVifMonthly&#xA;                          INSERT INTO [DataMart].[Version_KeyValue] VALUES('Load DDS',@VersionID, 'DDS - factPifVifMonthly table # rows', CAST(@factPifVifMonthlyRows AS VARCHAR(50)), 1, 1)&#xA;&#xA;                          DECLARE @factPremiumsRows int&#xA;                          SELECT  @factPremiumsRows = COUNT(*) FROM [DataMart].factPremiums&#xA;                          INSERT INTO [DataMart].[Version_KeyValue] VALUES('Load DDS',@VersionID, 'DDS - factPremiums table # rows', CAST(@factPremiumsRows AS VARCHAR(50)), 1, 1)&#xA;&#xA;                          DECLARE @factPremiumsMonthlyRows int&#xA;                          SELECT  @factPremiumsMonthlyRows = COUNT(*) FROM [DataMart].factPremiumsMonthly&#xA;                          INSERT INTO [DataMart].[Version_KeyValue] VALUES('Load DDS',@VersionID, 'DDS - factPremiumsMonthly table # rows', CAST(@factPremiumsMonthlyRows AS VARCHAR(50)), 1, 1)&#xA;&#xA;                          DECLARE @factPremiumsTransactionalRows int&#xA;                          SELECT  @factPremiumsTransactionalRows = COUNT(*) FROM [DataMart].factPremiumsTransactional&#xA;                          INSERT INTO [DataMart].[Version_KeyValue] VALUES('Load DDS',@VersionID, 'DDS - factPremiumsTransactional table # rows', CAST(@factPremiumsTransactionalRows AS VARCHAR(50)), 1, 1)&#xA;&#xA;                          DECLARE @factRenewalsRows int&#xA;                          SELECT  @factRenewalsRows = COUNT(*) FROM [DataMart].factRenewals&#xA;                          INSERT INTO [DataMart].[Version_KeyValue] VALUES('Load DDS',@VersionID, 'DDS - factRenewals table # rows', CAST(@factRenewalsRows AS VARCHAR(50)), 1, 1)&#xA;&#xA;                          DECLARE @factRenewalsActualRows int&#xA;                          SELECT  @factRenewalsActualRows = COUNT(*) FROM [DataMart].factRenewalsActual&#xA;                          INSERT INTO [DataMart].[Version_KeyValue] VALUES('Load DDS',@VersionID, 'DDS - factRenewalsActual table # rows', CAST(@factRenewalsActualRows AS VARCHAR(50)), 1, 1)&#xA;&#xA;                          DECLARE @factRenewalsCarrioverActualRows int&#xA;                          SELECT  @factRenewalsCarrioverActualRows = COUNT(*) FROM [DataMart].factRenewalsCarrioverActual&#xA;                          INSERT INTO [DataMart].[Version_KeyValue] VALUES('Load DDS',@VersionID, 'DDS - factRenewalsCarrioverActual table # rows', CAST(@factRenewalsCarrioverActualRows AS VARCHAR(50)), 1, 1)&#xA;&#xA;                          DECLARE @factRenewalsActualMonthlyRows int&#xA;                          SELECT  @factRenewalsActualMonthlyRows = COUNT(*) FROM [DataMart].factRenewalsActualMonthly&#xA;                          INSERT INTO [DataMart].[Version_KeyValue] VALUES('Load DDS',@VersionID, 'DDS - factRenewalsActualMonthly table # rows', CAST(@factRenewalsActualMonthlyRows AS VARCHAR(50)), 1, 1)&#xA;&#xA;                          DECLARE @factRenewalsCarrioverActualMonthlyRows int&#xA;                          SELECT  @factRenewalsCarrioverActualMonthlyRows = COUNT(*) FROM [DataMart].factRenewalsCarrioverActualMonthly&#xA;                          INSERT INTO [DataMart].[Version_KeyValue] VALUES('Load DDS',@VersionID, 'DDS - factRenewalsCarrioverActualMonthly table # rows', CAST(@factRenewalsCarrioverActualMonthlyRows AS VARCHAR(50)), 1, 1)&#xA;&#xA;                          DECLARE @factRenewalsMonthlyRows int&#xA;                          SELECT  @factRenewalsMonthlyRows = COUNT(*) FROM [DataMart].factRenewalsMonthly&#xA;                          INSERT INTO [DataMart].[Version_KeyValue] VALUES('Load DDS',@VersionID, 'DDS - factRenewalsMonthly table # rows', CAST(@factRenewalsMonthlyRows AS VARCHAR(50)), 1, 1)&#xA;&#xA;                          DECLARE @factReserveRows int&#xA;                          SELECT  @factReserveRows = COUNT(*) FROM [DataMart].factReserve&#xA;                          INSERT INTO [DataMart].[Version_KeyValue] VALUES('Load DDS',@VersionID, 'DDS - factReserve table # rows', CAST(@factReserveRows AS VARCHAR(50)), 1, 1)&#xA;&#xA;                          DECLARE @factReserveMonthlyRows int&#xA;                          SELECT  @factReserveMonthlyRows = COUNT(*) FROM [DataMart].factReserveMonthly&#xA;                          INSERT INTO [DataMart].[Version_KeyValue] VALUES('Load DDS',@VersionID, 'DDS - factReserveMonthly table # rows', CAST(@factReserveMonthlyRows AS VARCHAR(50)), 1, 1)&#xA;&#xA;                        " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                  <SQLTask:ParameterBinding SQLTask:DataType="3" SQLTask:DtsVariableName="User::VersionID" SQLTask:ParameterDirection="Input" SQLTask:ParameterName="0" SQLTask:ParameterSize="-1">
                  </SQLTask:ParameterBinding>
                </SQLTask:SqlTaskData>
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:PrecedenceConstraints>
            <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{D3C08AD9-CA83-4A16-9B37-8078B43EACFE}" DTS:From="Package\SEQC Package Logic\SEQC Process Version Info\SQL Setup Version and Version_KeyValue tables" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL Setup Version and Version_KeyValue tables_To_SQL assign VersionID" DTS:refId="Package\SEQC Package Logic\SEQC Process Version Info.PrecedenceConstraints[Constraint_SQL Setup Version and Version_KeyValue tables_To_SQL assign VersionID]" DTS:To="Package\SEQC Package Logic\SEQC Process Version Info\SQL assign VersionID">
            </DTS:PrecedenceConstraint>
            <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{A0E4133D-17FA-48B6-A857-201BC4EE8EF5}" DTS:From="Package\SEQC Package Logic\SEQC Process Version Info\SQL assign VersionID" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL assign VersionID_To_SQL copy Extract KeyValue pairs" DTS:refId="Package\SEQC Package Logic\SEQC Process Version Info.PrecedenceConstraints[Constraint_SQL assign VersionID_To_SQL copy Extract KeyValue pairs]" DTS:To="Package\SEQC Package Logic\SEQC Process Version Info\SQL copy Extract KeyValue pairs">
            </DTS:PrecedenceConstraint>
            <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{A19CC3A7-8474-4035-8F0D-DB3571A72782}" DTS:From="Package\SEQC Package Logic\SEQC Process Version Info\SQL copy Extract KeyValue pairs" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SQL copy Extract KeyValue pairs_To_SQL Populate KeyValue tables with Other params" DTS:refId="Package\SEQC Package Logic\SEQC Process Version Info.PrecedenceConstraints[Constraint_SQL copy Extract KeyValue pairs_To_SQL Populate KeyValue tables with Other params]" DTS:To="Package\SEQC Package Logic\SEQC Process Version Info\SQL Populate KeyValue tables with Other params">
            </DTS:PrecedenceConstraint>
          </DTS:PrecedenceConstraints>
        </DTS:Executable>
        <DTS:Executable DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DTSID="{540D6033-333D-4267-8E54-81A09B9750C1}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="SQL Prepare execution details" DTS:refId="Package\SEQC Package Logic\SQL Prepare execution details" DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
          <DTS:ObjectData>
            <SQLTask:SqlTaskData SQLTask:Connection="OLEDBCONN_DDS_DataOne" SQLTask:SqlStatementSource="&#xA;                      --1) Get @VersionID&#xA;                      DECLARE @VersionID INT&#xA;                      SET @VersionID = ?&#xA;&#xA;                      --2) Populate execSummaryText&#xA;                      DECLARE @key VARCHAR(100)&#xA;                      DECLARE @value VARCHAR(50)&#xA;                      DECLARE @check VARCHAR(3000)&#xA;                      SET @check = ''&#xA;&#xA;                      DECLARE Version_Loop CURSOR FAST_FORWARD FOR&#xA;                      SELECT&#xA;                      [Key], [Value]&#xA;                      FROM [DataMart].[Version_KeyValue]&#xA;                      WHERE VersionID = @VersionID AND IncludeIntoExecSummary = 1&#xA;                      ORDER BY [Key]&#xA;&#xA;                      OPEN Version_Loop&#xA;&#xA;                      FETCH NEXT FROM Version_Loop INTO @key, @value&#xA;&#xA;                      WHILE @@FETCH_STATUS = 0&#xA;                      BEGIN&#xA;&#xA;                      SET @check = @check + @key + '&gt;&gt;&gt; ' + @value + ' ' + char(13) + char(10)&#xA;&#xA;                      FETCH NEXT FROM Version_Loop INTO @key, @value&#xA;                      END&#xA;&#xA;                      CLOSE Version_Loop&#xA;                      DEALLOCATE Version_Loop&#xA;&#xA;                      SET ? = @check&#xA;&#xA;                    " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding SQLTask:DataType="130" SQLTask:DtsVariableName="User::execDetailsText" SQLTask:ParameterDirection="Output" SQLTask:ParameterName="1" SQLTask:ParameterSize="3000">
              </SQLTask:ParameterBinding>
              <SQLTask:ParameterBinding SQLTask:DataType="3" SQLTask:DtsVariableName="User::VersionID" SQLTask:ParameterDirection="Input" SQLTask:ParameterName="0" SQLTask:ParameterSize="-1">
              </SQLTask:ParameterBinding>
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{A964187A-AC44-4BD5-A77F-39206CAED05A}" DTS:From="Package\SEQC Package Logic\SEQC Prepare Database" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SEQC Prepare Database_To_SEQC Create facts and dimensions" DTS:refId="Package\SEQC Package Logic.PrecedenceConstraints[Constraint_SEQC Prepare Database_To_SEQC Create facts and dimensions]" DTS:To="Package\SEQC Package Logic\SEQC Create facts and dimensions">
        </DTS:PrecedenceConstraint>
        <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{4F5818EA-EF2E-4225-96E7-3612B6807914}" DTS:From="Package\SEQC Package Logic\SEQC Create facts and dimensions" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SEQC Create facts and dimensions_To_SEQC Create indexes, FKs and Columnstore indexes" DTS:refId="Package\SEQC Package Logic.PrecedenceConstraints[Constraint_SEQC Create facts and dimensions_To_SEQC Create indexes, FKs and Columnstore indexes]" DTS:To="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes">
        </DTS:PrecedenceConstraint>
        <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{00324F9F-6EA4-46DC-B3DF-3F53E1DAE28C}" DTS:From="Package\SEQC Package Logic\SEQC Create indexes, FKs and Columnstore indexes" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SEQC Create indexes, FKs and Columnstore indexes_To_SEQC Process Version Info" DTS:refId="Package\SEQC Package Logic.PrecedenceConstraints[Constraint_SEQC Create indexes, FKs and Columnstore indexes_To_SEQC Process Version Info]" DTS:To="Package\SEQC Package Logic\SEQC Process Version Info">
        </DTS:PrecedenceConstraint>
        <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{68B93646-F51D-4289-9762-CEF9A7E1D076}" DTS:From="Package\SEQC Package Logic\SEQC Process Version Info" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SEQC Process Version Info_To_SQL Prepare execution details" DTS:refId="Package\SEQC Package Logic.PrecedenceConstraints[Constraint_SEQC Process Version Info_To_SQL Prepare execution details]" DTS:To="Package\SEQC Package Logic\SQL Prepare execution details">
        </DTS:PrecedenceConstraint>
      </DTS:PrecedenceConstraints>
    </DTS:Executable>
    <DTS:Executable DTS:CreationName="Microsoft.SendMailTask" DTS:DelayValidation="True" DTS:DTSID="{12511FA0-E849-48EC-A5CF-689D4A837E2F}" DTS:ExecutableType="Microsoft.SendMailTask" DTS:LocaleID="-1" DTS:ObjectName="SMT Send Success Message" DTS:refId="Package\SMT Send Success Message" DTS:TaskContact="Send Mail Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
      <DTS:ObjectData>
        <SendMailTask:SendMailTaskData SendMailTask:BCC="" SendMailTask:CC="" SendMailTask:From="P1D1Automation@oneinc.biz" SendMailTask:MessageSource="&#xA;                " SendMailTask:SMTPServer="{33A9F961-B2EB-4688-A62D-0341E6938A0B}" SendMailTask:Subject="SUCCESS - OneInc.PolicyOne.DataOne.SSIS.DataMart.PremiumLoss" SendMailTask:To="Sergeyl@oneinc.biz" xmlns:SendMailTask="www.microsoft.com/sqlserver/dts/tasks/sendmailtask">
        </SendMailTask:SendMailTaskData>
      </DTS:ObjectData>
      <DTS:PropertyExpression DTS:Name="Disable">!@[User::config_SendLetters]</DTS:PropertyExpression>
      <DTS:PropertyExpression DTS:Name="Subject">"SUCCESS - OneInc.PolicyOne.DataOne.SSIS.DataMart.PremiumLoss (" + @[User::config_installationName] + ") "</DTS:PropertyExpression>
      <DTS:PropertyExpression DTS:Name="ToLine">@[User::config_notificationEmail]</DTS:PropertyExpression>
      <DTS:PropertyExpression DTS:Name="MessageSource">
                    "Package&gt;&gt;&gt;      " + @[System::PackageName] + "\r\n" +

                    "Started&gt;&gt;&gt;      " + (DT_WSTR, 40)@[System::StartTime]  + "\r\n" +

                    "Server&gt;&gt;&gt;       " + @[System::MachineName] +  "\r\n" +

                    "User&gt;&gt;&gt;         " + @[System::UserName] +  "\r\n" +

                    "Installation&gt;&gt;&gt; " + @[User::config_installationName] +  "\r\n" +

                    "-- SUCCESS --" + "\r\n"

                    + "\r\n"

                    +

                    "-- DETAILS --" + "\r\n"
                    + (DT_STR, 3000, 1252)@[User::execDetailsText]
                  </DTS:PropertyExpression>
    </DTS:Executable>
    <DTS:Executable DTS:CreationName="Microsoft.SendMailTask" DTS:DelayValidation="True" DTS:DTSID="{5C2CBBED-7ED1-4942-906B-EF007E071F68}" DTS:ExecutableType="Microsoft.SendMailTask" DTS:LocaleID="-1" DTS:ObjectName="SMT Send FAILURE Message" DTS:refId="Package\SMT Send FAILURE Message" DTS:TaskContact="Send Mail Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
      <DTS:ObjectData>
        <SendMailTask:SendMailTaskData SendMailTask:BCC="" SendMailTask:CC="" SendMailTask:From="P1D1Automation@oneinc.biz" SendMailTask:MessageSource="&#xA;                " SendMailTask:SMTPServer="{33A9F961-B2EB-4688-A62D-0341E6938A0B}" SendMailTask:Subject="FAILURE - OneInc.PolicyOne.DataOne.SSIS.DataMart.PremiumLoss" SendMailTask:To="Sergeyl@oneinc.biz" xmlns:SendMailTask="www.microsoft.com/sqlserver/dts/tasks/sendmailtask">
        </SendMailTask:SendMailTaskData>
      </DTS:ObjectData>
      <DTS:PropertyExpression DTS:Name="Disable">!@[User::config_SendLetters]</DTS:PropertyExpression>
      <DTS:PropertyExpression DTS:Name="Subject">"FAILURE - OneInc.PolicyOne.DataOne.SSIS.DataMart.PremiumLoss (" + @[User::config_installationName] + ") "</DTS:PropertyExpression>
      <DTS:PropertyExpression DTS:Name="ToLine">@[User::config_notificationEmail]</DTS:PropertyExpression>
      <DTS:PropertyExpression DTS:Name="MessageSource">
                    "Package&gt;&gt;&gt;      " + @[System::PackageName] + "\r\n" +

                    "Started&gt;&gt;&gt;      " + (DT_WSTR, 40)@[System::StartTime]  + "\r\n" +

                    "Server&gt;&gt;&gt;       " + @[System::MachineName] +  "\r\n" +

                    "User&gt;&gt;&gt;         " + @[System::UserName] +  "\r\n" +

                    "Installation&gt;&gt;&gt; " + @[User::config_installationName] +  "\r\n" +

                    "-- FAILURE --" + "\r\n"

                    + "\r\n"

                    +

                    "-- DETAILS --" + "\r\n" + (DT_WSTR, 3000)@[User::errorMessagesString]

                  </DTS:PropertyExpression>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{E2BC3135-55EA-4E06-81AC-B9ED5E031CD5}" DTS:From="Package\SEQC Package Logic" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SEQC Package Logic_To_SMT Send Success Message" DTS:refId="Package.PrecedenceConstraints[Constraint_SEQC Package Logic_To_SMT Send Success Message]" DTS:To="Package\SMT Send Success Message">
    </DTS:PrecedenceConstraint>
    <DTS:PrecedenceConstraint DTS:CreationName="" DTS:DTSID="{6C9F845C-6C6B-4100-AD62-E9F91B0C8172}" DTS:From="Package\SEQC Package Logic" DTS:LogicalAnd="True" DTS:ObjectName="Constraint_SEQC Package Logic_To_SMT Send FAILURE Message" DTS:refId="Package.PrecedenceConstraints[Constraint_SEQC Package Logic_To_SMT Send FAILURE Message]" DTS:To="Package\SMT Send FAILURE Message" DTS:Value="1">
    </DTS:PrecedenceConstraint>
  </DTS:PrecedenceConstraints>
  <DTS:Property DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables>
    <DTS:Variable DTS:CreationName="" DTS:DTSID="{823CF2D5-9FF6-404E-B350-76AC920DFEFF}" DTS:IncludeInDebugDump="2345" DTS:Namespace="User" DTS:ObjectName="config_installationFolder">
      <DTS:VariableValue DTS:DataType="8">
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable DTS:CreationName="" DTS:DTSID="{25CF52D3-F292-4AE3-B840-A1920FCAF072}" DTS:IncludeInDebugDump="2345" DTS:Namespace="User" DTS:ObjectName="config_installationName">
      <DTS:VariableValue DTS:DataType="8">
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable DTS:CreationName="" DTS:DTSID="{266B9FC6-CBB2-418E-AF15-3A26EE572EBE}" DTS:IncludeInDebugDump="2345" DTS:Namespace="User" DTS:ObjectName="config_notificationEmail">
      <DTS:VariableValue DTS:DataType="8">
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable DTS:CreationName="" DTS:DTSID="{97EF13CD-E27A-4ABD-AE26-0495208F8703}" DTS:IncludeInDebugDump="2345" DTS:Namespace="User" DTS:ObjectName="config_DataOne_DDS_DB_ConnectionString">
      <DTS:VariableValue DTS:DataType="8">
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable DTS:CreationName="" DTS:DTSID="{AA17F8A9-4668-45B2-BBBA-169E7A4E573B}" DTS:IncludeInDebugDump="2345" DTS:Namespace="User" DTS:ObjectName="config_SMTPServer">
      <DTS:VariableValue DTS:DataType="8">
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable DTS:CreationName="" DTS:DTSID="{CF0850DA-B207-437F-82A0-D19C63E0ACB1}" DTS:IncludeInDebugDump="6789" DTS:Namespace="User" DTS:ObjectName="config_Process_DailyDataMart">
      <DTS:VariableValue DTS:DataType="11">True</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable DTS:CreationName="" DTS:DTSID="{271E2BE5-A7B1-47B4-B6A7-B9003848D40D}" DTS:IncludeInDebugDump="6789" DTS:Namespace="User" DTS:ObjectName="config_Process_MonthlyDataMart">
      <DTS:VariableValue DTS:DataType="11">True</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable DTS:CreationName="" DTS:DTSID="{2DA9CFE2-3782-4C35-A8E0-7CCFC1901C66}" DTS:IncludeInDebugDump="6789" DTS:Namespace="User" DTS:ObjectName="config_Process_TransactionalDataMart">
      <DTS:VariableValue DTS:DataType="11">True</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable DTS:CreationName="" DTS:DTSID="{D96B0EDD-A6CA-4E47-A140-A9E273BB6CD5}" DTS:IncludeInDebugDump="6789" DTS:Namespace="User" DTS:ObjectName="config_ProcessClaims">
      <DTS:VariableValue DTS:DataType="11">True</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable DTS:CreationName="" DTS:DTSID="{03667500-71E1-47FB-A3BE-1FDB8ADA4869}" DTS:IncludeInDebugDump="6789" DTS:Namespace="User" DTS:ObjectName="VersionID">
      <DTS:VariableValue DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable DTS:CreationName="" DTS:DTSID="{FDF653B9-D559-481F-B4E2-947357B840EA}" DTS:IncludeInDebugDump="6789" DTS:Namespace="User" DTS:ObjectName="errorCount">
      <DTS:VariableValue DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable DTS:CreationName="" DTS:DTSID="{10D3142F-672D-4D47-BD6E-B90D77176D3E}" DTS:IncludeInDebugDump="6789" DTS:Namespace="User" DTS:ObjectName="errorMessages">
      <DTS:VariableValue DTS:DataSubType="ManagedSerializable" DTS:DataType="13">
        <SOAP-ENV:Envelope SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0">
          <SOAP-ENV:Body>
            <xsd:anyType id="ref-1">
            </xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable DTS:CreationName="" DTS:DTSID="{EC7C1677-2289-4989-A72C-F103886BD9E5}" DTS:IncludeInDebugDump="2345" DTS:Namespace="User" DTS:ObjectName="errorText">
      <DTS:VariableValue DTS:DataType="8">
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable DTS:CreationName="" DTS:DTSID="{13359130-0211-448E-86B4-8ABB07F69C07}" DTS:IncludeInDebugDump="2345" DTS:Namespace="User" DTS:ObjectName="errorMessagesString">
      <DTS:VariableValue DTS:DataType="8">
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable DTS:CreationName="" DTS:DTSID="{49A8A054-3704-4651-988C-0105C043C776}" DTS:IncludeInDebugDump="2345" DTS:Namespace="User" DTS:ObjectName="execDetailsText">
      <DTS:VariableValue DTS:DataType="8">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable DTS:CreationName="" DTS:DTSID="{0CC6F404-0DBC-4F0A-B7EB-6E27E80221A6}" DTS:IncludeInDebugDump="6789" DTS:Namespace="User" DTS:ObjectName="config_SendLetters">
      <DTS:VariableValue DTS:DataType="11">True</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable DTS:CreationName="" DTS:DTSID="{53059619-FB90-4D81-8EE1-20192DC725E0}" DTS:IncludeInDebugDump="6789" DTS:Namespace="User" DTS:ObjectName="config_CreateColumnstoreIndexes">
      <DTS:VariableValue DTS:DataType="11">True</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable DTS:CreationName="" DTS:DTSID="{E081FF1E-896A-4B1B-A1C4-57B4C3FE73C9}" DTS:IncludeInDebugDump="6789" DTS:Namespace="User" DTS:ObjectName="IsIncremental">
      <DTS:VariableValue DTS:DataType="17">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable DTS:CreationName="" DTS:DTSID="{3793F16E-44C4-42D2-BC41-C20FD42BF53F}" DTS:IncludeInDebugDump="6789" DTS:Namespace="User" DTS:ObjectName="ProcessRatemakingRaw">
      <DTS:VariableValue DTS:DataType="17">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable DTS:CreationName="" DTS:DTSID="{58EF50E5-3A72-4034-8CCD-473A5133C227}" DTS:IncludeInDebugDump="6789" DTS:Namespace="User" DTS:ObjectName="ProcessRatemaking">
      <DTS:VariableValue DTS:DataType="17">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable DTS:CreationName="" DTS:DTSID="{7D93C3E9-37F7-4A5D-A6E6-7B2EFE2D7AAE}" DTS:IncludeInDebugDump="6789" DTS:Namespace="User" DTS:ObjectName="IncrementalStartDate">
      <DTS:VariableValue DTS:DataType="7">04/17/2017 00:00:00</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
</DTS:Executable>